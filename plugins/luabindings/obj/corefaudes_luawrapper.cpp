/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL
#define SWIG_LUA_SQUASH_BASES


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AttributeCFlags swig_types[0]
#define SWIGTYPE_p_AttributeFlags swig_types[1]
#define SWIGTYPE_p_AttributeVoid swig_types[2]
#define SWIGTYPE_p_Generator swig_types[3]
#define SWIGTYPE_p_IndexSet swig_types[4]
#define SWIGTYPE_p_IndexSetIterator swig_types[5]
#define SWIGTYPE_p_IntegerVector swig_types[6]
#define SWIGTYPE_p_NameSet swig_types[7]
#define SWIGTYPE_p_NameSetIterator swig_types[8]
#define SWIGTYPE_p_Position swig_types[9]
#define SWIGTYPE_p_ProductCompositionMap swig_types[10]
#define SWIGTYPE_p_SccFilter swig_types[11]
#define SWIGTYPE_p_SymbolTable swig_types[12]
#define SWIGTYPE_p_TBaseVectorT_Generator_t swig_types[13]
#define SWIGTYPE_p_TBaseVectorT_IndexSet_t swig_types[14]
#define SWIGTYPE_p_TBaseVectorT_NameSet_t swig_types[15]
#define SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t swig_types[16]
#define SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t swig_types[17]
#define SWIGTYPE_p_TaIndexSetT_AttributeVoid_t swig_types[18]
#define SWIGTYPE_p_TaNameSetT_AttributeCFlags_t swig_types[19]
#define SWIGTYPE_p_TaTransSetT_AttributeVoid_t swig_types[20]
#define SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t swig_types[21]
#define SWIGTYPE_p_TokenReader swig_types[22]
#define SWIGTYPE_p_TokenWriter swig_types[23]
#define SWIGTYPE_p_TransSet swig_types[24]
#define SWIGTYPE_p_TransSetEvX1X2 swig_types[25]
#define SWIGTYPE_p_TransSetEvX1X2Iterator swig_types[26]
#define SWIGTYPE_p_TransSetEvX2X1 swig_types[27]
#define SWIGTYPE_p_TransSetEvX2X1Iterator swig_types[28]
#define SWIGTYPE_p_TransSetX1EvX2 swig_types[29]
#define SWIGTYPE_p_TransSetX1EvX2Iterator swig_types[30]
#define SWIGTYPE_p_TransSetX1X2Ev swig_types[31]
#define SWIGTYPE_p_TransSetX1X2EvIterator swig_types[32]
#define SWIGTYPE_p_TransSetX2EvX1 swig_types[33]
#define SWIGTYPE_p_TransSetX2EvX1Iterator swig_types[34]
#define SWIGTYPE_p_TransSetX2X1Ev swig_types[35]
#define SWIGTYPE_p_TransSetX2X1EvIterator swig_types[36]
#define SWIGTYPE_p_Transition swig_types[37]
#define SWIGTYPE_p_Type swig_types[38]
#define SWIGTYPE_p_double swig_types[39]
#define SWIGTYPE_p_int swig_types[40]
#define SWIGTYPE_p_long swig_types[41]
#define SWIGTYPE_p_long_long swig_types[42]
#define SWIGTYPE_p_short swig_types[43]
#define SWIGTYPE_p_signed_char swig_types[44]
#define SWIGTYPE_p_std__string swig_types[45]
#define SWIGTYPE_p_std__vectorT_int_t__size_type swig_types[46]
#define SWIGTYPE_p_unsigned_char swig_types[47]
#define SWIGTYPE_p_unsigned_int swig_types[48]
#define SWIGTYPE_p_unsigned_long swig_types[49]
#define SWIGTYPE_p_unsigned_long_long swig_types[50]
#define SWIGTYPE_p_unsigned_short swig_types[51]
static swig_type_info *swig_types[53];
static swig_module_info swig_module = {swig_types, 52, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "faudes"
#define SWIG_init      luaopen_faudes
#define SWIG_init_user luaopen_faudes_user

#define SWIG_LUACODE   luaopen_faudes_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <stdint.h>		// Use the C99 official header


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>



// include faudes headers (inc. also pbp_include.h, lbp_include.h etc)
#include "libfaudes.h"

// use libfaudes namespace
using namespace faudes;


// make microsoft compiler happy
#ifdef _MSC_VER
#pragma warning(disable:4503)
#endif



namespace faudes {
typedef NameSet::Iterator NameSetIterator;
typedef NameSet::Iterator EventSetIterator;
typedef IndexSet::Iterator IndexSetIterator;
typedef IndexSet::Iterator StateSetIterator;
}


namespace faudes {
void faudes_throw_exception(const std::string& msg) {
  throw Exception("faudes script", msg, 49);
}
}  



namespace faudes {

// global switches
bool faudes_statenames = true;
std::string faudes_dotpath = "dot";

// access functions
void faudes_statenames_on(void) {faudes_statenames=true; Generator::StateNamesEnabledDefault(true); }
void faudes_statenames_off(void) {faudes_statenames=false; Generator::StateNamesEnabledDefault(false); }
void faudes_dotexecpath(const std::string& filename)  { faudes_dotpath=filename; }
std::string  faudes_version(void) { return VersionString()+" "+PluginsString(); }

// helper: run dot for test
bool faudes_dotready(void) {
  // cache value
  static bool ready=false;  
  static bool known=false;
  if(known) return ready;    
  // test for dot binary
  std::string testdot = faudes_dotpath + " -V";
  ready = (system(testdot.c_str()) == 0);
  known = true;
  return ready;
}

}//namespace
  



namespace faudes {

// cheap console out, mutable, strings only, SIWG interface
void faudes_debug(const std::string& message) {
  // print
  std::ostringstream line;
  line << "FAUDES_PRINT: " <<  message << std::endl;
  faudes::ConsoleOut::G()->Write(line.str());
  // still do loop callback
  LoopCallback();
}

// cheap console out, strings only, no mute, SIWG interface
void faudes_console(const std::string& message) {
  int m;
  // un-mute
  m=faudes::ConsoleOut::G()->Mute();
  faudes::ConsoleOut::G()->Mute(false);
  // print
  std::ostringstream line;
  line << "FAUDES_PRINT: " <<  message << std::endl;
  faudes::ConsoleOut::G()->Write(line.str());
  // restore mute
  faudes::ConsoleOut::G()->Mute(m);
  // still do loop callback
  LoopCallback();
}

// mute libFAUDES console outout
void faudes_mute(bool on) {
  faudes::ConsoleOut::G()->Mute(on);
}

}//namespace




namespace faudes {  

//global help dictionary topic -> key -> text
std::map< std::string, std::string > faudes_dictionary_topics;
std::map< std::string, std::map<std::string, std::vector<std::string> > > faudes_dictionary_entries;

// insert topic to dictionary
void faudes_dict_insert_topic(const std::string& topic, const std::string& text) {
  faudes_dictionary_topics[topic]=text;
}

// insert entry to dictionary
void faudes_dict_insert_entry(const std::string& topic, const std::string& key, const std::string& entry) {
  std::string k=key;
  if(k.length()>0) 
    k.at(0)=toupper(k.at(0));
  faudes_dictionary_entries[topic][k].push_back(entry);
  if(topic!="")
  if(faudes_dictionary_topics[topic]=="") 
    faudes_dictionary_topics[topic]=topic;
}

}//namespace  




namespace faudes {  

// main help text
void faudes_help(void) {
  std::stringstream sstr;

  // section: intro
  sstr << std::endl
    << "libFAUDES bindings provide access to libFAUDES data structures and functions. " << std::endl
    << "For detailed information, please consult the libFAUDES documentation."<< std::endl
    << std::endl
    << "All libFAUDES bindings are in the module 'faudes', ie access is via 'faudes.*'." << std::endl
    << std::endl
    << "Interface:" << std::endl
    << std::endl;

  // section: topics
  std::map< std::string, std::string >::iterator tit; 
  for(tit=faudes_dictionary_topics.begin(); tit!=faudes_dictionary_topics.end();tit++) {
    std::string left  = "  faudes.Help(\"" + tit->first +"\")";
    std::string right = tit->second;
    while(left.length()<37) left+=" ";
    sstr << left << right << std::endl;
  }
  sstr << std::endl;

  // section: behavioural
  sstr 
    << "Configuration:" << std::endl
    << std::endl
    << "  faudes.StateNamesOn()              enable automatic state names" << std::endl
    << "  faudes.StateNamesOff()             disable automatic state names" << std::endl
    << "  faudes.DotExecPath(\"filename\")     path of dot executable" << std::endl
    << "  faudes.Version()                   return libfaudes version string" << std::endl
    << std::endl
    << "Console Commands:" << std::endl
    << std::endl
    << "  faudes.Print(\"message\")            print as faudes debugging message" << std::endl
    << "  faudes.Error(\"message\")            abort script with error message" << std::endl
    << "  faudes.Mute(bool)                  mute faudes debugging messages" << std::endl;

  // do print to stderr
  faudes_console(sstr.str());
}


// section text
void faudes_help(const std::string& topic) {
  std::stringstream sstr;

  // section: intro
  sstr  
    << std::endl
    << "libFAUDES help topic: \"" << topic << "\"" << std::endl
    << std::endl;

  // section: list entries
  std::map< std::string, std::map< std::string, std::vector<std::string> > >::iterator tit; 
  tit = faudes_dictionary_entries.find(topic);
  if(tit!=faudes_dictionary_entries.end()) {
    std::map< std::string, std::vector<std::string> >::iterator kit;   
    for(kit = tit->second.begin(); kit != tit->second.end(); kit++) {
      if(kit != tit->second.begin()) sstr << std::endl;
      const std::string& line = kit->first;
      sstr << "                 *** " << line << " ***" << std::endl;
      for(unsigned int i=0; i< kit->second.size(); i++) {
        const std::string& line = kit->second[i];
	std::size_t sep = line.find_first_of(' ');
        if(sep==std::string::npos) sep=0;
        while(sep<20) { sstr << " "; sep++; };
        sstr << line << std::endl;
      }
    }
  } else {
    sstr << "  (no entries) " << std::endl;
  }

  // do print to stderr
  faudes_console(sstr.str());
}

}//namespace  


SWIGINTERN std::string Transition___str__(Transition *self){ return self->Str();}
SWIGINTERN Transition *new_Transition__SWIG_2(Idx x1,std::string const &rEvent,Idx x2){
   static EventSet defeset;
   return new Transition(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN Type Type_Copy(Type const *self){ return *(self->Copy());}
SWIGINTERN std::string Type___str__(Type *self){ return self->ToString();}



SWIGINTERN std::string AttributeVoid___str__(AttributeVoid *self){ return self->ToString();}


// Typedefs for nested classes: index set iterator 
namespace faudes {
typedef IndexSet::Iterator IndexSetIterator;
typedef IndexSet::Iterator StateSetIterator;
}


SWIGINTERN Idx IndexSetIterator_DeRef(IndexSetIterator const *self){ return  ** self; }
SWIGINTERN void IndexSetIterator_Inc(IndexSetIterator *self){ ++ *self; }
SWIGINTERN void IndexSetIterator_Dec(IndexSetIterator *self){ -- *self; }
SWIGINTERN Idx IndexSetIterator_Index(IndexSetIterator const *self){ return  ** self; }
SWIGINTERN bool IndexSet_operator_Sl_(IndexSet const *self,IndexSet const &rOtherSet){
      return  !( *self >= rOtherSet) ; }


namespace faudes {
typedef NameSet::Iterator NameSetIterator;
typedef NameSet::Iterator EventSetIterator;
}


SWIGINTERN Idx NameSetIterator_DeRef(NameSetIterator const *self){ return  ** self; }
SWIGINTERN void NameSetIterator_Inc(NameSetIterator *self){ ++ *self; }
SWIGINTERN void NameSetIterator_Dec(NameSetIterator *self){ -- *self; }
SWIGINTERN Idx NameSetIterator_Index(NameSetIterator const *self){ return  ** self; }
SWIGINTERN std::string NameSetIterator_Name(NameSetIterator const *self){ 
      const NameSet* nset= dynamic_cast<const NameSet*>(self->pBaseSet);
      if(!nset) return "";
      return  nset->SymbolicName(** self) ; }
SWIGINTERN bool NameSet_operator_Sl_(NameSet const *self,NameSet const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN std::string NameSet_SymbolicName__SWIG_1(NameSet const *self,NameSetIterator const &iit){ return self->SymbolicName(*iit);}
SWIGINTERN std::string NameSet_Str__SWIG_1(NameSet const *self,NameSetIterator const &iit){ return self->Str(*iit);}
SWIGINTERN AttributeCFlags *TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_2(TaNameSet< AttributeCFlags > *self,std::string const &rName){ return self->Attributep(self->Index(rName)); }
SWIGINTERN AttributeCFlags *TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_3(TaNameSet< AttributeCFlags > *self,NameSetIterator const &iit){ return self->Attributep(*iit); }
SWIGINTERN void TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_4(TaNameSet< AttributeCFlags > *self,std::string const &rName,AttributeCFlags const &rAttr){ self->Attribute(self->Index(rName), rAttr); }
SWIGINTERN void TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_5(TaNameSet< AttributeCFlags > *self,NameSetIterator const &iit,AttributeCFlags const &rAttr){ self->Attribute(*iit, rAttr); }

namespace faudes {
typedef TransSort::X1EvX2 X1EvX2;
typedef TTransSet<X1EvX2>::Iterator TransSetX1EvX2Iterator;
}

SWIGINTERN Transition TransSetX1EvX2Iterator_DeRef(TransSetX1EvX2Iterator const *self){ return  ** self; }
SWIGINTERN void TransSetX1EvX2Iterator_Inc(TransSetX1EvX2Iterator *self){ ++ *self; }
SWIGINTERN void TransSetX1EvX2Iterator_Dec(TransSetX1EvX2Iterator *self){ -- *self; }
SWIGINTERN Transition TransSetX1EvX2Iterator_Transition(TransSetX1EvX2Iterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetX1EvX2Iterator_X1(TransSetX1EvX2Iterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetX1EvX2Iterator_Ev(TransSetX1EvX2Iterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetX1EvX2Iterator_X2(TransSetX1EvX2Iterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TransSort::X1X2Ev X1X2Ev;
typedef TTransSet<X1X2Ev>::Iterator TransSetX1X2EvIterator;
}

SWIGINTERN Transition TransSetX1X2EvIterator_DeRef(TransSetX1X2EvIterator const *self){ return  ** self; }
SWIGINTERN void TransSetX1X2EvIterator_Inc(TransSetX1X2EvIterator *self){ ++ *self; }
SWIGINTERN void TransSetX1X2EvIterator_Dec(TransSetX1X2EvIterator *self){ -- *self; }
SWIGINTERN Transition TransSetX1X2EvIterator_Transition(TransSetX1X2EvIterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetX1X2EvIterator_X1(TransSetX1X2EvIterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetX1X2EvIterator_Ev(TransSetX1X2EvIterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetX1X2EvIterator_X2(TransSetX1X2EvIterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TransSort::X2EvX1 X2EvX1;
typedef TTransSet<X2EvX1>::Iterator TransSetX2EvX1Iterator;
}

SWIGINTERN Transition TransSetX2EvX1Iterator_DeRef(TransSetX2EvX1Iterator const *self){ return  ** self; }
SWIGINTERN void TransSetX2EvX1Iterator_Inc(TransSetX2EvX1Iterator *self){ ++ *self; }
SWIGINTERN void TransSetX2EvX1Iterator_Dec(TransSetX2EvX1Iterator *self){ -- *self; }
SWIGINTERN Transition TransSetX2EvX1Iterator_Transition(TransSetX2EvX1Iterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetX2EvX1Iterator_X1(TransSetX2EvX1Iterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetX2EvX1Iterator_Ev(TransSetX2EvX1Iterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetX2EvX1Iterator_X2(TransSetX2EvX1Iterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TransSort::X2X1Ev X2X1Ev;
typedef TTransSet<X2X1Ev>::Iterator TransSetX2X1EvIterator;
}

SWIGINTERN Transition TransSetX2X1EvIterator_DeRef(TransSetX2X1EvIterator const *self){ return  ** self; }
SWIGINTERN void TransSetX2X1EvIterator_Inc(TransSetX2X1EvIterator *self){ ++ *self; }
SWIGINTERN void TransSetX2X1EvIterator_Dec(TransSetX2X1EvIterator *self){ -- *self; }
SWIGINTERN Transition TransSetX2X1EvIterator_Transition(TransSetX2X1EvIterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetX2X1EvIterator_X1(TransSetX2X1EvIterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetX2X1EvIterator_Ev(TransSetX2X1EvIterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetX2X1EvIterator_X2(TransSetX2X1EvIterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TransSort::EvX1X2 EvX1X2;
typedef TTransSet<EvX1X2>::Iterator TransSetEvX1X2Iterator;
}

SWIGINTERN Transition TransSetEvX1X2Iterator_DeRef(TransSetEvX1X2Iterator const *self){ return  ** self; }
SWIGINTERN void TransSetEvX1X2Iterator_Inc(TransSetEvX1X2Iterator *self){ ++ *self; }
SWIGINTERN void TransSetEvX1X2Iterator_Dec(TransSetEvX1X2Iterator *self){ -- *self; }
SWIGINTERN Transition TransSetEvX1X2Iterator_Transition(TransSetEvX1X2Iterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetEvX1X2Iterator_X1(TransSetEvX1X2Iterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetEvX1X2Iterator_Ev(TransSetEvX1X2Iterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetEvX1X2Iterator_X2(TransSetEvX1X2Iterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TransSort::EvX2X1 EvX2X1;
typedef TTransSet<EvX2X1>::Iterator TransSetEvX2X1Iterator;
}

SWIGINTERN Transition TransSetEvX2X1Iterator_DeRef(TransSetEvX2X1Iterator const *self){ return  ** self; }
SWIGINTERN void TransSetEvX2X1Iterator_Inc(TransSetEvX2X1Iterator *self){ ++ *self; }
SWIGINTERN void TransSetEvX2X1Iterator_Dec(TransSetEvX2X1Iterator *self){ -- *self; }
SWIGINTERN Transition TransSetEvX2X1Iterator_Transition(TransSetEvX2X1Iterator const *self){ return  ** self; }
SWIGINTERN Idx TransSetEvX2X1Iterator_X1(TransSetEvX2X1Iterator const *self){ return  (**self).X1; }
SWIGINTERN Idx TransSetEvX2X1Iterator_Ev(TransSetEvX2X1Iterator const *self){ return  (**self).Ev; }
SWIGINTERN Idx TransSetEvX2X1Iterator_X2(TransSetEvX2X1Iterator const *self){ return  (**self).X2; }

namespace faudes {
typedef TTransSet<X1EvX2> TransSetX1EvX2;
}

SWIGINTERN bool TransSetX1EvX2_operator_Sl_(TransSetX1EvX2 const *self,TransSetX1EvX2 const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetX1EvX2_Insert__SWIG_2(TransSetX1EvX2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetX1EvX2_Erase__SWIG_3(TransSetX1EvX2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetX1EvX2_EraseByEv__SWIG_1(TransSetX1EvX2 *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetX1EvX2_Exists__SWIG_2(TransSetX1EvX2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetX1EvX2Iterator TransSetX1EvX2_Find__SWIG_2(TransSetX1EvX2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetX1EvX2_Str__SWIG_1(TransSetX1EvX2 const *self,TransSetX1EvX2Iterator const &tit){ return self->Str(*tit);}

namespace faudes {
typedef TTransSet<X1X2Ev> TransSetX1X2Ev;
}

SWIGINTERN bool TransSetX1X2Ev_operator_Sl_(TransSetX1X2Ev const *self,TransSetX1X2Ev const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetX1X2Ev_Insert__SWIG_2(TransSetX1X2Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetX1X2Ev_Erase__SWIG_3(TransSetX1X2Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetX1X2Ev_EraseByEv__SWIG_1(TransSetX1X2Ev *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetX1X2Ev_Exists__SWIG_2(TransSetX1X2Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetX1X2EvIterator TransSetX1X2Ev_Find__SWIG_2(TransSetX1X2Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetX1X2Ev_Str__SWIG_1(TransSetX1X2Ev const *self,TransSetX1X2EvIterator const &tit){ return self->Str(*tit);}

namespace faudes {
typedef TTransSet<X2EvX1> TransSetX2EvX1;
}

SWIGINTERN bool TransSetX2EvX1_operator_Sl_(TransSetX2EvX1 const *self,TransSetX2EvX1 const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetX2EvX1_Insert__SWIG_2(TransSetX2EvX1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetX2EvX1_Erase__SWIG_3(TransSetX2EvX1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetX2EvX1_EraseByEv__SWIG_1(TransSetX2EvX1 *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetX2EvX1_Exists__SWIG_2(TransSetX2EvX1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetX2EvX1Iterator TransSetX2EvX1_Find__SWIG_2(TransSetX2EvX1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetX2EvX1_Str__SWIG_1(TransSetX2EvX1 const *self,TransSetX2EvX1Iterator const &tit){ return self->Str(*tit);}

namespace faudes {
typedef TTransSet<X2X1Ev> TransSetX2X1Ev;
}

SWIGINTERN bool TransSetX2X1Ev_operator_Sl_(TransSetX2X1Ev const *self,TransSetX2X1Ev const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetX2X1Ev_Insert__SWIG_2(TransSetX2X1Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetX2X1Ev_Erase__SWIG_3(TransSetX2X1Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetX2X1Ev_EraseByEv__SWIG_1(TransSetX2X1Ev *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetX2X1Ev_Exists__SWIG_2(TransSetX2X1Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetX2X1EvIterator TransSetX2X1Ev_Find__SWIG_2(TransSetX2X1Ev *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetX2X1Ev_Str__SWIG_1(TransSetX2X1Ev const *self,TransSetX2X1EvIterator const &tit){ return self->Str(*tit);}

namespace faudes {
typedef TTransSet<EvX1X2> TransSetEvX1X2;
}

SWIGINTERN bool TransSetEvX1X2_operator_Sl_(TransSetEvX1X2 const *self,TransSetEvX1X2 const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetEvX1X2_Insert__SWIG_2(TransSetEvX1X2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetEvX1X2_Erase__SWIG_3(TransSetEvX1X2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetEvX1X2_EraseByEv__SWIG_1(TransSetEvX1X2 *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetEvX1X2_Exists__SWIG_2(TransSetEvX1X2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetEvX1X2Iterator TransSetEvX1X2_Find__SWIG_2(TransSetEvX1X2 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetEvX1X2_Str__SWIG_1(TransSetEvX1X2 const *self,TransSetEvX1X2Iterator const &tit){ return self->Str(*tit);}

namespace faudes {
typedef TTransSet<EvX2X1> TransSetEvX2X1;
}

SWIGINTERN bool TransSetEvX2X1_operator_Sl_(TransSetEvX2X1 const *self,TransSetEvX2X1 const &rOtherSet){
      return  !( *self >= rOtherSet) ; }
SWIGINTERN bool TransSetEvX2X1_Insert__SWIG_2(TransSetEvX2X1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Insert(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN bool TransSetEvX2X1_Erase__SWIG_3(TransSetEvX2X1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Erase(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN void TransSetEvX2X1_EraseByEv__SWIG_1(TransSetEvX2X1 *self,std::string const &rEvent){
      static EventSet defeset;
      self->EraseByEv(defeset.SymbolTablep()->Index(rEvent)); }
SWIGINTERN bool TransSetEvX2X1_Exists__SWIG_2(TransSetEvX2X1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Exists(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN TransSetEvX2X1Iterator TransSetEvX2X1_Find__SWIG_2(TransSetEvX2X1 *self,Idx x1,std::string const &rEvent,Idx x2){
      static EventSet defeset;
      return self->Find(x1,defeset.SymbolTablep()->Index(rEvent),x2); }
SWIGINTERN std::string TransSetEvX2X1_Str__SWIG_1(TransSetEvX2X1 const *self,TransSetEvX2X1Iterator const &tit){ return self->Str(*tit);}


SWIGINTERN Generator *Generator_Version__SWIG_0(Generator const *self,std::string const &pattern,std::string const &replace){
      Generator* res=self->New();
      self->Version(pattern,replace,*res);
      return res;
    }
SWIGINTERN Generator *Generator_Version__SWIG_1(Generator const *self,std::string const &suffix){
      Generator* res=self->New();
      self->Version(suffix,*res);
      return res;
    }
SWIGINTERN std::string Generator_EStr__SWIG_1(Generator const *self,NameSetIterator const &eit){
     return self->EStr(*eit); }
SWIGINTERN std::string Generator_SStr__SWIG_1(Generator const *self,IndexSetIterator const &sit){
     return self->SStr(*sit); }
SWIGINTERN std::string Generator_TStr__SWIG_1(Generator const *self,TransSetX1EvX2Iterator const &tit){
     return self->TStr(*tit); }
SWIGINTERN void Generator_GraphWrite__SWIG_0(Generator const *self,std::string const &rFileName,std::string const &rOutFormat=""){
      // dont crash on missing dot
      if(!faudes_dotready()) {
        FD_WARN("faudes.Generator::GraphWrite(...): failed to run graphviz \"" << faudes_dotpath << "\"");
        return;
      }
      self->GraphWrite(rFileName,rOutFormat,faudes_dotpath);
    }
SWIGINTERN EventSet Generator_Alphabet(Generator const *self){
    EventSet res; res=self->Alphabet(); return res; }
SWIGINTERN StateSet Generator_States(Generator const *self){
    StateSet res; res=self->States(); return res; }
SWIGINTERN StateSet Generator_InitStates(Generator const *self){
    StateSet res; res=self->InitStates(); return res; }
SWIGINTERN StateSet Generator_MarkedStates(Generator const *self){
    StateSet res; res=self->MarkedStates(); return res; }
SWIGINTERN TransSetX1EvX2 Generator_TransRel__SWIG_0(Generator const *self){
    TransSet res; res=self->TransRel(); return res; }
SWIGINTERN TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Version__SWIG_0(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *self,std::string const &pattern,std::string const &replace){
      TcGenerator<AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid>* res=self->New();
      self->Version(pattern,replace,*res);
      return res;
    }
SWIGINTERN TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Version__SWIG_1(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *self,std::string const &suffix){
      TcGenerator<AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid>* res=self->New();
      self->Version(suffix,*res);
      return res;
    }
SWIGINTERN TaIndexSet< AttributeVoid > TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__States(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *self){
    return TaIndexSet<AttributeVoid>(self->States()); }
SWIGINTERN TaNameSet< AttributeCFlags > TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Alphabet(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *self){
    return TaNameSet<AttributeCFlags>(self->Alphabet()); }
SWIGINTERN TaTransSet< AttributeVoid > TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__TransRel(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *self){
    return TaTransSet<AttributeVoid>(self->TransRel()); }
SWIGINTERN Type TBaseVector_Sl_EventSet_Sg__Copy(TBaseVector< EventSet > const *self){ return *(self->Copy());}
SWIGINTERN std::string TBaseVector_Sl_EventSet_Sg____str__(TBaseVector< EventSet > *self){ return self->ToString();}
SWIGINTERN NameSet &TBaseVector_Sl_EventSet_Sg____getitem__(TBaseVector< EventSet > *self,unsigned int pos){ 
      if(pos>=self->Size()) self->Size(pos+1); return self->At(pos); }
SWIGINTERN void TBaseVector_Sl_EventSet_Sg____setitem__(TBaseVector< EventSet > *self,unsigned int pos,NameSet const &elem){ 
       if(pos>=self->Size()) self->Size(pos+1); self->Replace(pos,elem); }
SWIGINTERN Type TBaseVector_Sl_Alphabet_Sg__Copy(TBaseVector< Alphabet > const *self){ return *(self->Copy());}
SWIGINTERN std::string TBaseVector_Sl_Alphabet_Sg____str__(TBaseVector< Alphabet > *self){ return self->ToString();}
SWIGINTERN TaNameSet< AttributeCFlags > &TBaseVector_Sl_Alphabet_Sg____getitem__(TBaseVector< Alphabet > *self,unsigned int pos){ 
      if(pos>=self->Size()) self->Size(pos+1); return self->At(pos); }
SWIGINTERN void TBaseVector_Sl_Alphabet_Sg____setitem__(TBaseVector< Alphabet > *self,unsigned int pos,TaNameSet< AttributeCFlags > const &elem){ 
       if(pos>=self->Size()) self->Size(pos+1); self->Replace(pos,elem); }
SWIGINTERN Type TBaseVector_Sl_Generator_Sg__Copy(TBaseVector< Generator > const *self){ return *(self->Copy());}
SWIGINTERN std::string TBaseVector_Sl_Generator_Sg____str__(TBaseVector< Generator > *self){ return self->ToString();}
SWIGINTERN Generator &TBaseVector_Sl_Generator_Sg____getitem__(TBaseVector< Generator > *self,unsigned int pos){ 
      if(pos>=self->Size()) self->Size(pos+1); return self->At(pos); }
SWIGINTERN void TBaseVector_Sl_Generator_Sg____setitem__(TBaseVector< Generator > *self,unsigned int pos,Generator const &elem){ 
       if(pos>=self->Size()) self->Size(pos+1); self->Replace(pos,elem); }
SWIGINTERN Type TBaseVector_Sl_System_Sg__Copy(TBaseVector< System > const *self){ return *(self->Copy());}
SWIGINTERN std::string TBaseVector_Sl_System_Sg____str__(TBaseVector< System > *self){ return self->ToString();}
SWIGINTERN TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > &TBaseVector_Sl_System_Sg____getitem__(TBaseVector< System > *self,unsigned int pos){ 
      if(pos>=self->Size()) self->Size(pos+1); return self->At(pos); }
SWIGINTERN void TBaseVector_Sl_System_Sg____setitem__(TBaseVector< System > *self,unsigned int pos,TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &elem){ 
       if(pos>=self->Size()) self->Size(pos+1); self->Replace(pos,elem); }
SWIGINTERN Type TBaseVector_Sl_IndexSet_Sg__Copy(TBaseVector< IndexSet > const *self){ return *(self->Copy());}
SWIGINTERN std::string TBaseVector_Sl_IndexSet_Sg____str__(TBaseVector< IndexSet > *self){ return self->ToString();}
SWIGINTERN IndexSet &TBaseVector_Sl_IndexSet_Sg____getitem__(TBaseVector< IndexSet > *self,unsigned int pos){ 
      if(pos>=self->Size()) self->Size(pos+1); return self->At(pos); }
SWIGINTERN void TBaseVector_Sl_IndexSet_Sg____setitem__(TBaseVector< IndexSet > *self,unsigned int pos,IndexSet const &elem){ 
       if(pos>=self->Size()) self->Size(pos+1); self->Replace(pos,elem); }

void faudes_gen_version(const Generator& rGen, const std::string& ver, Generator& rRes) 
 { rGen.Version(ver,rRes);}
void faudes_gen_version(const Generator& rGen, const std::string& pat, const std::string& rep, Generator& rRes) 
 { rGen.Version(pat,rep,rRes);}


void faudes_set_union(const EventSet& rAlph1, const EventSet& rAlph2, EventSet& rRes) 
 { rRes = rAlph1; rRes.InsertSet(rAlph2); }
void faudes_set_intersection(const EventSet& rAlph1, const EventSet& rAlph2, EventSet& rRes)
 { rRes = rAlph1; rRes.RestrictSet(rAlph2); }
void faudes_set_difference(const EventSet& rAlph1, const EventSet& rAlph2, EventSet& rRes) 
 { rRes = rAlph1; rRes.EraseSet(rAlph2); }

SWIGINTERN std::string ProductCompositionMap_ToString(ProductCompositionMap *self){ 
      EventSet eset;
      std::stringstream str;
      str << "["; 
      std::map< std::pair<Idx,Idx> , Idx >::const_iterator i;
      for(i=self->StlMap().begin(); i!=self->StlMap().end(); i++) {
        if(i!=self->StlMap().begin()) str << "; "; 
        str << "(" << i->first.first << ", " << i->first.second << ")-->(" << i->second << ")";
      };
      str << "]"; 
      return str.str();
    }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_Error(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("faudes_throw_exception",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("faudes_throw_exception",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      faudes_throw_exception((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateNamesOn(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("faudes_statenames_on",0,0)
  {
    try{
      faudes_statenames_on();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateNamesOff(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("faudes_statenames_off",0,0)
  {
    try{
      faudes_statenames_off();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DotExecPath(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("faudes_dotexecpath",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("faudes_dotexecpath",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      faudes_dotexecpath((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string result;
  
  SWIG_check_num_args("faudes_version",0,0)
  {
    try{
      result = faudes_version();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Print(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("faudes_debug",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("faudes_debug",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      faudes_debug((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mute(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("faudes_mute",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("faudes_mute",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  {
    try{
      faudes_mute(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Help__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("faudes_help",0,0)
  {
    try{
      faudes_help();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Help__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("faudes_help",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("faudes_help",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      faudes_help((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Help(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Help__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Help__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Help'\n"
    "  Possible C/C++ prototypes are:\n"
    "    faudes_help(void)\n"
    "    faudes_help(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TestProtocol__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TestProtocol",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      TestProtocol((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("TestProtocol",0,0)
  {
    try{
      result = (bool)TestProtocol();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Type *arg2 = 0 ;
  bool arg3 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TestProtocol",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TestProtocol",2,"Type const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("TestProtocol",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("TestProtocol",2,SWIGTYPE_p_Type);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try{
      TestProtocol((std::string const &)*arg1,(Type const &)*arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Type *arg2 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TestProtocol",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TestProtocol",2,"Type const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("TestProtocol",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      TestProtocol((std::string const &)*arg1,(Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TestProtocol",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TestProtocol",2,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try{
      TestProtocol((std::string const &)*arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  long arg2 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TestProtocol",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TestProtocol",2,"long");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  {
    try{
      TestProtocol((std::string const &)*arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TestProtocol",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TestProtocol",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TestProtocol",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TestProtocol((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestProtocol(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_TestProtocol__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TestProtocol__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TestProtocol__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TestProtocol__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TestProtocol__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TestProtocol__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_TestProtocol__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TestProtocol'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TestProtocol(std::string const &)\n"
    "    TestProtocol(void)\n"
    "    TestProtocol(std::string const &,Type const &,bool)\n"
    "    TestProtocol(std::string const &,Type const &)\n"
    "    TestProtocol(std::string const &,bool)\n"
    "    TestProtocol(std::string const &,long)\n"
    "    TestProtocol(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Transition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Transition *result = 0 ;
  
  SWIG_check_num_args("Transition::Transition",0,0)
  {
    try{
      result = (Transition *)new Transition();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Transition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Idx arg1 ;
  Idx arg2 ;
  Idx arg3 ;
  Transition *result = 0 ;
  
  SWIG_check_num_args("Transition::Transition",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Transition::Transition",1,"Idx");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Transition::Transition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Transition::Transition",3,"Idx");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Idx)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (Transition *)new Transition(arg1,arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Transition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition___lt(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Transition::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::operator <",1,"Transition const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Transition::operator <",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition___lt",1,SWIGTYPE_p_Transition);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition___lt",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((Transition const *)arg1)->operator <((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition___eq(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Transition::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::operator ==",1,"Transition const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Transition::operator ==",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition___eq",1,SWIGTYPE_p_Transition);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition___eq",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((Transition const *)arg1)->operator ==((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_Valid(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  bool result;
  
  SWIG_check_num_args("Transition::Valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::Valid",1,"Transition const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_Valid",1,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((Transition const *)arg1)->Valid();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_X1_set(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Transition::X1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::X1",1,"Transition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Transition::X1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_X1_set",1,SWIGTYPE_p_Transition);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  if (arg1) (arg1)->X1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_X1_get(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Transition::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::X1",1,"Transition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_X1_get",1,SWIGTYPE_p_Transition);
  }
  
  result = (Idx) ((arg1)->X1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_Ev_set(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Transition::Ev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::Ev",1,"Transition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Transition::Ev",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_Ev_set",1,SWIGTYPE_p_Transition);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  if (arg1) (arg1)->Ev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_Ev_get(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Transition::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::Ev",1,"Transition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_Ev_get",1,SWIGTYPE_p_Transition);
  }
  
  result = (Idx) ((arg1)->Ev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_X2_set(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Transition::X2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::X2",1,"Transition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Transition::X2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_X2_set",1,SWIGTYPE_p_Transition);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  if (arg1) (arg1)->X2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_X2_get(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Transition::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::X2",1,"Transition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_X2_get",1,SWIGTYPE_p_Transition);
  }
  
  result = (Idx) ((arg1)->X2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition_Str(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Transition::Str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::Str",1,"Transition const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition_Str",1,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((Transition const *)arg1)->Str();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transition___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Transition *arg1 = (Transition *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Transition::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Transition::__str__",1,"Transition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Transition___tostring",1,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = Transition___str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Idx arg1 ;
  std::string *arg2 = 0 ;
  Idx arg3 ;
  std::string temp2 ;
  Transition *result = 0 ;
  
  SWIG_check_num_args("Transition::Transition",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Transition::Transition",1,"Idx");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Transition::Transition",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Transition::Transition",3,"Idx");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Idx)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (Transition *)new_Transition__SWIG_2(arg1,(std::string const &)*arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Transition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Transition__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Transition__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Transition__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Transition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Transition::Transition()\n"
    "    Transition::Transition(Idx,Idx,Idx)\n"
    "    Transition::Transition(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static void swig_delete_Transition(void *obj) {
Transition *arg1 = (Transition *) obj;
delete arg1;
}
static int _proxy__wrap_new_Transition(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Transition);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Transition_attributes[] = {
    { "X1", _wrap_Transition_X1_get, _wrap_Transition_X1_set },
    { "Ev", _wrap_Transition_Ev_get, _wrap_Transition_Ev_set },
    { "X2", _wrap_Transition_X2_get, _wrap_Transition_X2_set },
    {0,0,0}
};
static swig_lua_method swig_Transition_methods[]= {
    { "__lt", _wrap_Transition___lt},
    { "__eq", _wrap_Transition___eq},
    { "Valid", _wrap_Transition_Valid},
    { "Str", _wrap_Transition_Str},
    { "__tostring", _wrap_Transition___tostring},
    {0,0}
};
static swig_lua_method swig_Transition_meta[] = {
    { "__lt", _wrap_Transition___lt},
    { "__eq", _wrap_Transition___eq},
    { "__tostring", _wrap_Transition___tostring},
    {0,0}
};

static swig_lua_attribute swig_Transition_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Transition_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Transition_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Transition_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Transition_Sf_SwigStatic = {
    "Transition",
    swig_Transition_Sf_SwigStatic_methods,
    swig_Transition_Sf_SwigStatic_attributes,
    swig_Transition_Sf_SwigStatic_constants,
    swig_Transition_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Transition_bases[] = {0};
static const char *swig_Transition_base_names[] = {0};
static swig_lua_class _wrap_class_Transition = { "Transition", "Transition", &SWIGTYPE_p_Transition,_proxy__wrap_new_Transition, swig_delete_Transition, swig_Transition_methods, swig_Transition_attributes, &swig_Transition_Sf_SwigStatic, swig_Transition_meta, swig_Transition_bases, swig_Transition_base_names };

static int _wrap_new_Type__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *result = 0 ;
  
  SWIG_check_num_args("Type::Type",0,0)
  {
    try{
      result = (Type *)new Type();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Type__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("Type::Type",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Type::Type",1,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("new_Type",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *)new Type((Type const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Type(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Type__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Type__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Type'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::Type()\n"
    "    Type::Type(Type const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Type_Assign(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("Type::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Assign",1,"Type *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Type::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Assign",1,SWIGTYPE_p_Type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Copy(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  Type result;
  
  SWIG_check_num_args("Type::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Copy",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Copy",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = Type_Copy((Type const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Clear",1,"Type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Clear",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Write",1,"Type const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Type::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",1,SWIGTYPE_p_Type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Write",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Write",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Type::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Write",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((Type const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Type::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Write",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Write",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((Type const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Type_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Type_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Type_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Type_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::Write(Type const *) const\n"
    "    Type::Write() const\n"
    "    Type::Write(std::string const &,std::string const &,Type const *) const\n"
    "    Type::Write(std::string const &,std::string const &) const\n"
    "    Type::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Type_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Type::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::ToString",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Type::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_ToString",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((Type const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Type::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::ToString",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_ToString",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((Type const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Type::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::ToString",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_ToString",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((Type const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Type_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Type_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::ToString(std::string const &,Type const *) const\n"
    "    Type::ToString(std::string const &) const\n"
    "    Type::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_Type_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::DWrite",1,"Type const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Type::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",1,SWIGTYPE_p_Type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::DWrite",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::DWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Type::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::DWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((Type const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Type::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::DWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_DWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((Type const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Type_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Type_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Type_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Type_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::DWrite(Type const *) const\n"
    "    Type::DWrite() const\n"
    "    Type::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    Type::DWrite(std::string const &,std::string const &) const\n"
    "    Type::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Type_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::SWrite",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_SWrite",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::XWrite",1,"Type const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Type::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",1,SWIGTYPE_p_Type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  
  SWIG_check_num_args("Type::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::XWrite",1,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::XWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Type::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((Type const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::XWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((Type const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Type::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::XWrite",1,"Type const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_XWrite",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((Type const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Type_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Type_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Type_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Type_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::XWrite(Type const *) const\n"
    "    Type::XWrite() const\n"
    "    Type::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    Type::XWrite(std::string const &,std::string const &) const\n"
    "    Type::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Type_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Read",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Type::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Read",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Read",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Read",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Type::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::Read",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_Read",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Type_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Type_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::Read(std::string const &,std::string const &,Type const *)\n"
    "    Type::Read(std::string const &,std::string const &)\n"
    "    Type::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Type_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::FromString",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Type::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_FromString",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Type::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::FromString",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Type::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_FromString",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Type::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::FromString",1,"Type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Type::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type_FromString",1,SWIGTYPE_p_Type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Type_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Type_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Type_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Type_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Type_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::FromString(std::string const &,std::string const &,Type const *)\n"
    "    Type::FromString(std::string const &,std::string const &)\n"
    "    Type::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Type___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = (Type *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Type::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type::__str__",1,"Type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Type___tostring",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = Type___str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Type(void *obj) {
Type *arg1 = (Type *) obj;
delete arg1;
}
static int _proxy__wrap_new_Type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Type_methods[]= {
    { "Assign", _wrap_Type_Assign},
    { "Copy", _wrap_Type_Copy},
    { "Clear", _wrap_Type_Clear},
    { "Write", _wrap_Type_Write},
    { "ToString", _wrap_Type_ToString},
    { "DWrite", _wrap_Type_DWrite},
    { "SWrite", _wrap_Type_SWrite},
    { "XWrite", _wrap_Type_XWrite},
    { "Read", _wrap_Type_Read},
    { "FromString", _wrap_Type_FromString},
    { "__tostring", _wrap_Type___tostring},
    {0,0}
};
static swig_lua_method swig_Type_meta[] = {
    { "__tostring", _wrap_Type___tostring},
    {0,0}
};

static swig_lua_attribute swig_Type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Type_Sf_SwigStatic = {
    "Type",
    swig_Type_Sf_SwigStatic_methods,
    swig_Type_Sf_SwigStatic_attributes,
    swig_Type_Sf_SwigStatic_constants,
    swig_Type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Type_bases[] = {0};
static const char *swig_Type_base_names[] = {0};
static swig_lua_class _wrap_class_Type = { "Type", "Type", &SWIGTYPE_p_Type,_proxy__wrap_new_Type, swig_delete_Type, swig_Type_methods, swig_Type_attributes, &swig_Type_Sf_SwigStatic, swig_Type_meta, swig_Type_bases, swig_Type_base_names };

static int _wrap_TypeName(lua_State* L) {
  int SWIG_arg = 0;
  Type *arg1 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("FaudesTypeName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FaudesTypeName",1,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("TypeName",1,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (std::string *) &FaudesTypeName((Type const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeTest(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Type *arg2 = 0 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("FaudesTypeTest",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("FaudesTypeTest",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FaudesTypeTest",2,"Type const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("TypeTest",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (bool)FaudesTypeTest((std::string const &)*arg1,(Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttributeVoid(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *result = 0 ;
  
  SWIG_check_num_args("AttributeVoid::AttributeVoid",0,0)
  {
    try{
      result = (AttributeVoid *)new AttributeVoid();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeVoid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("AttributeVoid::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Write",1,"AttributeVoid const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AttributeVoid::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Write",1,SWIGTYPE_p_AttributeVoid);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AttributeVoid_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((AttributeVoid const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  
  SWIG_check_num_args("AttributeVoid::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Write",1,"AttributeVoid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Write",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      ((AttributeVoid const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AttributeVoid::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Write",1,"AttributeVoid const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AttributeVoid::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AttributeVoid::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Write",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AttributeVoid_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((AttributeVoid const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AttributeVoid::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Write",1,"AttributeVoid const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AttributeVoid::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Write",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((AttributeVoid const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("AttributeVoid::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Write",1,"AttributeVoid const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Write",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((AttributeVoid const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeVoid_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttributeVoid_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeVoid_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttributeVoid_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AttributeVoid_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeVoid_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AttributeVoid::Write(Type const *) const\n"
    "    AttributeVoid::Write() const\n"
    "    AttributeVoid::Write(std::string const &,std::string const &,Type const *) const\n"
    "    AttributeVoid::Write(std::string const &,std::string const &) const\n"
    "    AttributeVoid::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeVoid_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("AttributeVoid::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::ToString",1,"AttributeVoid const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AttributeVoid::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_ToString",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AttributeVoid_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((AttributeVoid const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("AttributeVoid::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::ToString",1,"AttributeVoid const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_ToString",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((AttributeVoid const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string result;
  
  SWIG_check_num_args("AttributeVoid::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::ToString",1,"AttributeVoid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_ToString",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = ((AttributeVoid const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeVoid_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeVoid_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AttributeVoid_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeVoid_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AttributeVoid::ToString(std::string const &,Type const *) const\n"
    "    AttributeVoid::ToString(std::string const &) const\n"
    "    AttributeVoid::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeVoid_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AttributeVoid::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Read",1,"AttributeVoid *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AttributeVoid::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AttributeVoid::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Read",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AttributeVoid_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AttributeVoid::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Read",1,"AttributeVoid *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AttributeVoid::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Read",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("AttributeVoid::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Read",1,"AttributeVoid *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttributeVoid::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Read",1,SWIGTYPE_p_AttributeVoid);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeVoid_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttributeVoid_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AttributeVoid, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AttributeVoid_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeVoid_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AttributeVoid::Read(std::string const &,std::string const &,Type const *)\n"
    "    AttributeVoid::Read(std::string const &,std::string const &)\n"
    "    AttributeVoid::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeVoid___tostring(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  std::string result;
  
  SWIG_check_num_args("AttributeVoid::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::__str__",1,"AttributeVoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid___tostring",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = AttributeVoid___str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_IsDefault(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  bool result;
  
  SWIG_check_num_args("AttributeVoid::IsDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::IsDefault",1,"AttributeVoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_IsDefault",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = (bool)(arg1)->IsDefault();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_SetDefault(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  
  SWIG_check_num_args("AttributeVoid::SetDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::SetDefault",1,"AttributeVoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_SetDefault",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      (arg1)->SetDefault();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeVoid_Clear(lua_State* L) {
  int SWIG_arg = 0;
  AttributeVoid *arg1 = (AttributeVoid *) 0 ;
  
  SWIG_check_num_args("AttributeVoid::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeVoid::Clear",1,"AttributeVoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("AttributeVoid_Clear",1,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttributeVoid(void *obj) {
AttributeVoid *arg1 = (AttributeVoid *) obj;
delete arg1;
}
static int _proxy__wrap_new_AttributeVoid(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AttributeVoid);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AttributeVoid_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttributeVoid_methods[]= {
    { "Write", _wrap_AttributeVoid_Write},
    { "ToString", _wrap_AttributeVoid_ToString},
    { "Read", _wrap_AttributeVoid_Read},
    { "__tostring", _wrap_AttributeVoid___tostring},
    { "IsDefault", _wrap_AttributeVoid_IsDefault},
    { "SetDefault", _wrap_AttributeVoid_SetDefault},
    { "Clear", _wrap_AttributeVoid_Clear},
    {0,0}
};
static swig_lua_method swig_AttributeVoid_meta[] = {
    { "__tostring", _wrap_AttributeVoid___tostring},
    {0,0}
};

static swig_lua_attribute swig_AttributeVoid_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttributeVoid_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttributeVoid_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttributeVoid_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttributeVoid_Sf_SwigStatic = {
    "AttributeVoid",
    swig_AttributeVoid_Sf_SwigStatic_methods,
    swig_AttributeVoid_Sf_SwigStatic_attributes,
    swig_AttributeVoid_Sf_SwigStatic_constants,
    swig_AttributeVoid_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttributeVoid_bases[] = {0};
static const char *swig_AttributeVoid_base_names[] = {0};
static swig_lua_class _wrap_class_AttributeVoid = { "AttributeVoid", "AttributeVoid", &SWIGTYPE_p_AttributeVoid,_proxy__wrap_new_AttributeVoid, swig_delete_AttributeVoid, swig_AttributeVoid_methods, swig_AttributeVoid_attributes, &swig_AttributeVoid_Sf_SwigStatic, swig_AttributeVoid_meta, swig_AttributeVoid_bases, swig_AttributeVoid_base_names };

static int _wrap_new_AttributeFlags(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *result = 0 ;
  
  SWIG_check_num_args("AttributeFlags::AttributeFlags",0,0)
  {
    try{
      result = (AttributeFlags *)new AttributeFlags();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeFlags,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_Test(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  bool result;
  
  SWIG_check_num_args("AttributeFlags::Test",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::Test",1,"AttributeFlags const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::Test",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_Test",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((AttributeFlags const *)arg1)->Test(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_TestAll(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  bool result;
  
  SWIG_check_num_args("AttributeFlags::TestAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::TestAll",1,"AttributeFlags const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::TestAll",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_TestAll",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((AttributeFlags const *)arg1)->TestAll(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_TestSome(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  bool result;
  
  SWIG_check_num_args("AttributeFlags::TestSome",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::TestSome",1,"AttributeFlags const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::TestSome",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_TestSome",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((AttributeFlags const *)arg1)->TestSome(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_TestNone(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  bool result;
  
  SWIG_check_num_args("AttributeFlags::TestNone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::TestNone",1,"AttributeFlags const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::TestNone",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_TestNone",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((AttributeFlags const *)arg1)->TestNone(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_Set(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  
  SWIG_check_num_args("AttributeFlags::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::Set",1,"AttributeFlags *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::Set",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_Set",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Set(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_Clr(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  
  SWIG_check_num_args("AttributeFlags::Clr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::Clr",1,"AttributeFlags *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::Clr",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_Clr",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Clr(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_mFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType arg2 ;
  
  SWIG_check_num_args("AttributeFlags::mFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::mFlags",1,"AttributeFlags *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttributeFlags::mFlags",2,"fType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_mFlags_set",1,SWIGTYPE_p_AttributeFlags);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (fType)lua_tonumber(L, 2);
  if (arg1) (arg1)->mFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeFlags_mFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  AttributeFlags *arg1 = (AttributeFlags *) 0 ;
  fType result;
  
  SWIG_check_num_args("AttributeFlags::mFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeFlags::mFlags",1,"AttributeFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeFlags,0))){
    SWIG_fail_ptr("AttributeFlags_mFlags_get",1,SWIGTYPE_p_AttributeFlags);
  }
  
  result = (fType) ((arg1)->mFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttributeFlags(void *obj) {
AttributeFlags *arg1 = (AttributeFlags *) obj;
delete arg1;
}
static int _proxy__wrap_new_AttributeFlags(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AttributeFlags);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AttributeFlags_attributes[] = {
    { "mFlags", _wrap_AttributeFlags_mFlags_get, _wrap_AttributeFlags_mFlags_set },
    {0,0,0}
};
static swig_lua_method swig_AttributeFlags_methods[]= {
    { "Test", _wrap_AttributeFlags_Test},
    { "TestAll", _wrap_AttributeFlags_TestAll},
    { "TestSome", _wrap_AttributeFlags_TestSome},
    { "TestNone", _wrap_AttributeFlags_TestNone},
    { "Set", _wrap_AttributeFlags_Set},
    { "Clr", _wrap_AttributeFlags_Clr},
    {0,0}
};
static swig_lua_method swig_AttributeFlags_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AttributeFlags_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttributeFlags_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttributeFlags_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttributeFlags_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttributeFlags_Sf_SwigStatic = {
    "AttributeFlags",
    swig_AttributeFlags_Sf_SwigStatic_methods,
    swig_AttributeFlags_Sf_SwigStatic_attributes,
    swig_AttributeFlags_Sf_SwigStatic_constants,
    swig_AttributeFlags_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttributeFlags_bases[] = {0,0};
static const char *swig_AttributeFlags_base_names[] = {"AttributeVoid *",0};
static swig_lua_class _wrap_class_AttributeFlags = { "AttributeFlags", "AttributeFlags", &SWIGTYPE_p_AttributeFlags,_proxy__wrap_new_AttributeFlags, swig_delete_AttributeFlags, swig_AttributeFlags_methods, swig_AttributeFlags_attributes, &swig_AttributeFlags_Sf_SwigStatic, swig_AttributeFlags_meta, swig_AttributeFlags_bases, swig_AttributeFlags_base_names };

static int _wrap_new_AttributeCFlags(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("AttributeCFlags::AttributeCFlags",0,0)
  {
    try{
      result = (AttributeCFlags *)new AttributeCFlags();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_SetControllable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::SetControllable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::SetControllable",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_SetControllable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->SetControllable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_ClrControllable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::ClrControllable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::ClrControllable",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_ClrControllable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->ClrControllable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_Controllable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  bool result;
  
  SWIG_check_num_args("AttributeCFlags::Controllable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::Controllable",1,"AttributeCFlags const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_Controllable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (bool)((AttributeCFlags const *)arg1)->Controllable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_SetObservable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::SetObservable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::SetObservable",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_SetObservable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->SetObservable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_ClrObservable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::ClrObservable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::ClrObservable",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_ClrObservable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->ClrObservable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_Observable(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  bool result;
  
  SWIG_check_num_args("AttributeCFlags::Observable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::Observable",1,"AttributeCFlags const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_Observable",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (bool)((AttributeCFlags const *)arg1)->Observable();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_SetForcible(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::SetForcible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::SetForcible",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_SetForcible",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->SetForcible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_ClrForcible(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  
  SWIG_check_num_args("AttributeCFlags::ClrForcible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::ClrForcible",1,"AttributeCFlags *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_ClrForcible",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->ClrForcible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeCFlags_Forcible(lua_State* L) {
  int SWIG_arg = 0;
  AttributeCFlags *arg1 = (AttributeCFlags *) 0 ;
  bool result;
  
  SWIG_check_num_args("AttributeCFlags::Forcible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttributeCFlags::Forcible",1,"AttributeCFlags const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("AttributeCFlags_Forcible",1,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (bool)((AttributeCFlags const *)arg1)->Forcible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttributeCFlags(void *obj) {
AttributeCFlags *arg1 = (AttributeCFlags *) obj;
delete arg1;
}
static int _proxy__wrap_new_AttributeCFlags(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AttributeCFlags);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AttributeCFlags_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttributeCFlags_methods[]= {
    { "SetControllable", _wrap_AttributeCFlags_SetControllable},
    { "ClrControllable", _wrap_AttributeCFlags_ClrControllable},
    { "Controllable", _wrap_AttributeCFlags_Controllable},
    { "SetObservable", _wrap_AttributeCFlags_SetObservable},
    { "ClrObservable", _wrap_AttributeCFlags_ClrObservable},
    { "Observable", _wrap_AttributeCFlags_Observable},
    { "SetForcible", _wrap_AttributeCFlags_SetForcible},
    { "ClrForcible", _wrap_AttributeCFlags_ClrForcible},
    { "Forcible", _wrap_AttributeCFlags_Forcible},
    {0,0}
};
static swig_lua_method swig_AttributeCFlags_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AttributeCFlags_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttributeCFlags_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("mControllableFlag", AttributeCFlags::mControllableFlag)},
    {SWIG_LUA_CONSTTAB_INT("mObservableFlag", AttributeCFlags::mObservableFlag)},
    {SWIG_LUA_CONSTTAB_INT("mForcibleFlag", AttributeCFlags::mForcibleFlag)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttributeCFlags_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttributeCFlags_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttributeCFlags_Sf_SwigStatic = {
    "AttributeCFlags",
    swig_AttributeCFlags_Sf_SwigStatic_methods,
    swig_AttributeCFlags_Sf_SwigStatic_attributes,
    swig_AttributeCFlags_Sf_SwigStatic_constants,
    swig_AttributeCFlags_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttributeCFlags_bases[] = {0,0};
static const char *swig_AttributeCFlags_base_names[] = {"AttributeFlags *",0};
static swig_lua_class _wrap_class_AttributeCFlags = { "AttributeCFlags", "AttributeCFlags", &SWIGTYPE_p_AttributeCFlags,_proxy__wrap_new_AttributeCFlags, swig_delete_AttributeCFlags, swig_AttributeCFlags_methods, swig_AttributeCFlags_attributes, &swig_AttributeCFlags_Sf_SwigStatic, swig_AttributeCFlags_meta, swig_AttributeCFlags_bases, swig_AttributeCFlags_base_names };

static int _wrap_new_IndexSetIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *result = 0 ;
  
  SWIG_check_num_args("IndexSetIterator::IndexSetIterator",0,0)
  {
    try{
      result = (IndexSetIterator *)new IndexSetIterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = 0 ;
  IndexSetIterator *result = 0 ;
  
  SWIG_check_num_args("IndexSetIterator::IndexSetIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IndexSetIterator::IndexSetIterator",1,"IndexSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("new_IndexSetIterator",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = (IndexSetIterator *)new IndexSetIterator((IndexSetIterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IndexSetIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IndexSetIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IndexSetIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IndexSetIterator::IndexSetIterator()\n"
    "    IndexSetIterator::IndexSetIterator(IndexSetIterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetIterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = (IndexSetIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("IndexSetIterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSetIterator::DeRef",1,"IndexSetIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator_DeRef",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = (Idx)IndexSetIterator_DeRef((IndexSetIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetIterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = (IndexSetIterator *) 0 ;
  
  SWIG_check_num_args("IndexSetIterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSetIterator::Inc",1,"IndexSetIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator_Inc",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      IndexSetIterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetIterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = (IndexSetIterator *) 0 ;
  
  SWIG_check_num_args("IndexSetIterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSetIterator::Dec",1,"IndexSetIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator_Dec",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      IndexSetIterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = (IndexSetIterator *) 0 ;
  IndexSetIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IndexSetIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSetIterator::operator ==",1,"IndexSetIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSetIterator::operator ==",2,"IndexSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator___eq",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator___eq",2,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = (bool)((IndexSetIterator const *)arg1)->operator ==((IndexSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetIterator_Index(lua_State* L) {
  int SWIG_arg = 0;
  IndexSetIterator *arg1 = (IndexSetIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("IndexSetIterator::Index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSetIterator::Index",1,"IndexSetIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSetIterator_Index",1,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = (Idx)IndexSetIterator_Index((IndexSetIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IndexSetIterator(void *obj) {
IndexSetIterator *arg1 = (IndexSetIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexSetIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexSetIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexSetIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexSetIterator_methods[]= {
    { "DeRef", _wrap_IndexSetIterator_DeRef},
    { "Inc", _wrap_IndexSetIterator_Inc},
    { "Dec", _wrap_IndexSetIterator_Dec},
    { "__eq", _wrap_IndexSetIterator___eq},
    { "Index", _wrap_IndexSetIterator_Index},
    {0,0}
};
static swig_lua_method swig_IndexSetIterator_meta[] = {
    { "__eq", _wrap_IndexSetIterator___eq},
    {0,0}
};

static swig_lua_attribute swig_IndexSetIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexSetIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexSetIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexSetIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexSetIterator_Sf_SwigStatic = {
    "IndexSetIterator",
    swig_IndexSetIterator_Sf_SwigStatic_methods,
    swig_IndexSetIterator_Sf_SwigStatic_attributes,
    swig_IndexSetIterator_Sf_SwigStatic_constants,
    swig_IndexSetIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexSetIterator_bases[] = {0};
static const char *swig_IndexSetIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IndexSetIterator = { "IndexSetIterator", "IndexSetIterator", &SWIGTYPE_p_IndexSetIterator,_proxy__wrap_new_IndexSetIterator, swig_delete_IndexSetIterator, swig_IndexSetIterator_methods, swig_IndexSetIterator_attributes, &swig_IndexSetIterator_Sf_SwigStatic, swig_IndexSetIterator_meta, swig_IndexSetIterator_bases, swig_IndexSetIterator_base_names };

static int _wrap_new_IndexSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::IndexSet",0,0)
  {
    try{
      result = (IndexSet *)new IndexSet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = 0 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::IndexSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IndexSet::IndexSet",1,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("new_IndexSet",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (IndexSet *)new IndexSet((IndexSet const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::IndexSet",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("IndexSet::IndexSet",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("IndexSet::IndexSet",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (IndexSet *)new IndexSet((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::IndexSet",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("IndexSet::IndexSet",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (IndexSet *)new IndexSet((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IndexSet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IndexSet__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IndexSet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IndexSet__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IndexSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IndexSet::IndexSet()\n"
    "    IndexSet::IndexSet(IndexSet const &)\n"
    "    IndexSet::IndexSet(std::string const &,std::string const &)\n"
    "    IndexSet::IndexSet(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSet_New(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::New",1,"IndexSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_New",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (IndexSet *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Copy(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("IndexSet::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Copy",1,"IndexSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Copy",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (IndexSet *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  std::string result;
  
  SWIG_check_num_args("IndexSet::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Name",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Name",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("IndexSet::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Name",1,"IndexSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("IndexSet::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Name",1,SWIGTYPE_p_IndexSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSet_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSet_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSet_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IndexSet::Name() const\n"
    "    IndexSet::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSet_Clear(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  
  SWIG_check_num_args("IndexSet::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Clear",1,"IndexSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Clear",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Size(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx result;
  
  SWIG_check_num_args("IndexSet::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Size",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Size",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (Idx)((IndexSet const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Empty(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Empty",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Empty",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)((IndexSet const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Valid(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Valid",1,"IndexSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IndexSet::Valid",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Valid",1,SWIGTYPE_p_IndexSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)((IndexSet const *)arg1)->Valid((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Insert(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Insert",1,"IndexSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IndexSet::Insert",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Insert",1,SWIGTYPE_p_IndexSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Insert((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Erase",1,"IndexSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IndexSet::Erase",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Erase",1,SWIGTYPE_p_IndexSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Erase((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Exists(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Exists",1,"IndexSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IndexSet::Exists",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Exists",1,SWIGTYPE_p_IndexSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)((IndexSet const *)arg1)->Exists((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Begin(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("IndexSet::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Begin",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Begin",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_End(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("IndexSet::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::End",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_End",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSetIterator *arg2 = 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("IndexSet::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Erase",1,"IndexSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::Erase",2,"IndexSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Erase",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("IndexSet_Erase",2,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = (arg1)->Erase((IndexSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Erase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSet_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSet_Erase__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSet_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IndexSet::Erase(Idx const &)\n"
    "    IndexSet::Erase(IndexSetIterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSet_Find(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("IndexSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Find",1,"IndexSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IndexSet::Find",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Find",1,SWIGTYPE_p_IndexSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = ((IndexSet const *)arg1)->Find((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  
  SWIG_check_num_args("IndexSet::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::EraseSet",1,"IndexSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::EraseSet",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_EraseSet",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_EraseSet",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->EraseSet((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  
  SWIG_check_num_args("IndexSet::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::InsertSet",1,"IndexSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::InsertSet",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_InsertSet",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_InsertSet",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InsertSet((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  
  SWIG_check_num_args("IndexSet::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::RestrictSet",1,"IndexSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::RestrictSet",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_RestrictSet",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_RestrictSet",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictSet((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___add(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  IndexSet result;
  
  SWIG_check_num_args("IndexSet::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator +",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator +",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___add",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___add",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->operator +((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSet * resultptr = new IndexSet((const IndexSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___sub(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  IndexSet result;
  
  SWIG_check_num_args("IndexSet::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator -",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator -",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___sub",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___sub",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->operator -((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSet * resultptr = new IndexSet((const IndexSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___mul(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  IndexSet result;
  
  SWIG_check_num_args("IndexSet::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator *",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator *",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___mul",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___mul",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((IndexSet const *)arg1)->operator *((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSet * resultptr = new IndexSet((const IndexSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___le(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator <=",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator <=",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___le",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___le",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)((IndexSet const *)arg1)->operator <=((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___lt(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator <",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator <",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___lt",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___lt",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)IndexSet_operator_Sl_((IndexSet const *)arg1,(IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet___eq(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  IndexSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IndexSet::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::operator ==",1,"IndexSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IndexSet::operator ==",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___eq",1,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet___eq",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)((IndexSet const *)arg1)->operator ==((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Detach(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  
  SWIG_check_num_args("IndexSet::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Detach",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Detach",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((IndexSet const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSet_Lock(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = (IndexSet *) 0 ;
  
  SWIG_check_num_args("IndexSet::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IndexSet::Lock",1,"IndexSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSet_Lock",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((IndexSet const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IndexSet(void *obj) {
IndexSet *arg1 = (IndexSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexSet_methods[]= {
    { "New", _wrap_IndexSet_New},
    { "Copy", _wrap_IndexSet_Copy},
    { "Name", _wrap_IndexSet_Name},
    { "Clear", _wrap_IndexSet_Clear},
    { "Size", _wrap_IndexSet_Size},
    { "Empty", _wrap_IndexSet_Empty},
    { "Valid", _wrap_IndexSet_Valid},
    { "Insert", _wrap_IndexSet_Insert},
    { "Exists", _wrap_IndexSet_Exists},
    { "Begin", _wrap_IndexSet_Begin},
    { "End", _wrap_IndexSet_End},
    { "Erase", _wrap_IndexSet_Erase},
    { "Find", _wrap_IndexSet_Find},
    { "EraseSet", _wrap_IndexSet_EraseSet},
    { "InsertSet", _wrap_IndexSet_InsertSet},
    { "RestrictSet", _wrap_IndexSet_RestrictSet},
    { "__add", _wrap_IndexSet___add},
    { "__sub", _wrap_IndexSet___sub},
    { "__mul", _wrap_IndexSet___mul},
    { "__le", _wrap_IndexSet___le},
    { "__lt", _wrap_IndexSet___lt},
    { "__eq", _wrap_IndexSet___eq},
    { "Detach", _wrap_IndexSet_Detach},
    { "Lock", _wrap_IndexSet_Lock},
    {0,0}
};
static swig_lua_method swig_IndexSet_meta[] = {
    { "__add", _wrap_IndexSet___add},
    { "__sub", _wrap_IndexSet___sub},
    { "__mul", _wrap_IndexSet___mul},
    { "__le", _wrap_IndexSet___le},
    { "__lt", _wrap_IndexSet___lt},
    { "__eq", _wrap_IndexSet___eq},
    {0,0}
};

static swig_lua_attribute swig_IndexSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexSet_Sf_SwigStatic = {
    "IndexSet",
    swig_IndexSet_Sf_SwigStatic_methods,
    swig_IndexSet_Sf_SwigStatic_attributes,
    swig_IndexSet_Sf_SwigStatic_constants,
    swig_IndexSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexSet_bases[] = {0,0};
static const char *swig_IndexSet_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_IndexSet = { "IndexSet", "IndexSet", &SWIGTYPE_p_IndexSet,_proxy__wrap_new_IndexSet, swig_delete_IndexSet, swig_IndexSet_methods, swig_IndexSet_attributes, &swig_IndexSet_Sf_SwigStatic, swig_IndexSet_meta, swig_IndexSet_bases, swig_IndexSet_base_names };

static int _wrap_new_IndexSetA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::TaIndexSet",0,0)
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)new TaIndexSet< AttributeVoid >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TaIndexSet< AttributeVoid > *arg1 = 0 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::TaIndexSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::TaIndexSet",1,"TaIndexSet< AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,0))){
    SWIG_fail_ptr("new_IndexSetA",1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t);
  }
  
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)new TaIndexSet< AttributeVoid >((TaIndexSet< AttributeVoid > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetA__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::TaIndexSet",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::TaIndexSet",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::TaIndexSet",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)new TaIndexSet< AttributeVoid >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetA__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::TaIndexSet",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::TaIndexSet",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)new TaIndexSet< AttributeVoid >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetA_New(lua_State* L) {
  int SWIG_arg = 0;
  TaIndexSet< AttributeVoid > *arg1 = (TaIndexSet< AttributeVoid > *) 0 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::New",1,"TaIndexSet< AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,0))){
    SWIG_fail_ptr("IndexSetA_New",1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t);
  }
  
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetA_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TaIndexSet< AttributeVoid > *arg1 = (TaIndexSet< AttributeVoid > *) 0 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::Copy",1,"TaIndexSet< AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,0))){
    SWIG_fail_ptr("IndexSetA_Copy",1,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t);
  }
  
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetA__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IndexSet *arg1 = 0 ;
  TaIndexSet< AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TaIndexSet< AttributeVoid >::TaIndexSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TaIndexSet< AttributeVoid >::TaIndexSet",1,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("new_IndexSetA",1,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (TaIndexSet< AttributeVoid > *)new TaIndexSet< AttributeVoid >((IndexSet const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetA(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IndexSetA__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaIndexSetT_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IndexSetA__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IndexSetA__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IndexSetA__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IndexSetA__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IndexSetA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TaIndexSet< AttributeVoid >::TaIndexSet()\n"
    "    TaIndexSet< AttributeVoid >::TaIndexSet(TaIndexSet< AttributeVoid > const &)\n"
    "    TaIndexSet< AttributeVoid >::TaIndexSet(std::string const &,std::string const &)\n"
    "    TaIndexSet< AttributeVoid >::TaIndexSet(std::string const &)\n"
    "    TaIndexSet< AttributeVoid >::TaIndexSet(IndexSet const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IndexSetA(void *obj) {
TaIndexSet< AttributeVoid > *arg1 = (TaIndexSet< AttributeVoid > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexSetA(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexSetA);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexSetA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexSetA_methods[]= {
    { "New", _wrap_IndexSetA_New},
    { "Copy", _wrap_IndexSetA_Copy},
    {0,0}
};
static swig_lua_method swig_IndexSetA_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IndexSetA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexSetA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexSetA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexSetA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexSetA_Sf_SwigStatic = {
    "IndexSetA",
    swig_IndexSetA_Sf_SwigStatic_methods,
    swig_IndexSetA_Sf_SwigStatic_attributes,
    swig_IndexSetA_Sf_SwigStatic_constants,
    swig_IndexSetA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexSetA_bases[] = {0,0};
static const char *swig_IndexSetA_base_names[] = {"IndexSet *",0};
static swig_lua_class _wrap_class_IndexSetA = { "IndexSetA", "IndexSetA", &SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,_proxy__wrap_new_IndexSetA, swig_delete_IndexSetA, swig_IndexSetA_methods, swig_IndexSetA_attributes, &swig_IndexSetA_Sf_SwigStatic, swig_IndexSetA_meta, swig_IndexSetA_bases, swig_IndexSetA_base_names };

static int _wrap_new_NameSetIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *result = 0 ;
  
  SWIG_check_num_args("NameSetIterator::NameSetIterator",0,0)
  {
    try{
      result = (NameSetIterator *)new NameSetIterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NameSetIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = 0 ;
  NameSetIterator *result = 0 ;
  
  SWIG_check_num_args("NameSetIterator::NameSetIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NameSetIterator::NameSetIterator",1,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("new_NameSetIterator",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (NameSetIterator *)new NameSetIterator((NameSetIterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NameSetIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NameSetIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NameSetIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NameSetIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSetIterator::NameSetIterator()\n"
    "    NameSetIterator::NameSetIterator(NameSetIterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NameSetIterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("NameSetIterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::DeRef",1,"NameSetIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator_DeRef",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (Idx)NameSetIterator_DeRef((NameSetIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameSetIterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  
  SWIG_check_num_args("NameSetIterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::Inc",1,"NameSetIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator_Inc",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      NameSetIterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameSetIterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  
  SWIG_check_num_args("NameSetIterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::Dec",1,"NameSetIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator_Dec",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      NameSetIterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameSetIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  NameSetIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("NameSetIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::operator ==",1,"NameSetIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSetIterator::operator ==",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator___eq",1,SWIGTYPE_p_NameSetIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator___eq",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (bool)((NameSetIterator const *)arg1)->operator ==((NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameSetIterator_Index(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("NameSetIterator::Index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::Index",1,"NameSetIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator_Index",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (Idx)NameSetIterator_Index((NameSetIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameSetIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  NameSetIterator *arg1 = (NameSetIterator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("NameSetIterator::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSetIterator::Name",1,"NameSetIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("NameSetIterator_Name",1,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = NameSetIterator_Name((NameSetIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NameSetIterator(void *obj) {
NameSetIterator *arg1 = (NameSetIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NameSetIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NameSetIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NameSetIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NameSetIterator_methods[]= {
    { "DeRef", _wrap_NameSetIterator_DeRef},
    { "Inc", _wrap_NameSetIterator_Inc},
    { "Dec", _wrap_NameSetIterator_Dec},
    { "__eq", _wrap_NameSetIterator___eq},
    { "Index", _wrap_NameSetIterator_Index},
    { "Name", _wrap_NameSetIterator_Name},
    {0,0}
};
static swig_lua_method swig_NameSetIterator_meta[] = {
    { "__eq", _wrap_NameSetIterator___eq},
    {0,0}
};

static swig_lua_attribute swig_NameSetIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NameSetIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NameSetIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NameSetIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NameSetIterator_Sf_SwigStatic = {
    "NameSetIterator",
    swig_NameSetIterator_Sf_SwigStatic_methods,
    swig_NameSetIterator_Sf_SwigStatic_attributes,
    swig_NameSetIterator_Sf_SwigStatic_constants,
    swig_NameSetIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NameSetIterator_bases[] = {0};
static const char *swig_NameSetIterator_base_names[] = {0};
static swig_lua_class _wrap_class_NameSetIterator = { "NameSetIterator", "NameSetIterator", &SWIGTYPE_p_NameSetIterator,_proxy__wrap_new_NameSetIterator, swig_delete_NameSetIterator, swig_NameSetIterator_methods, swig_NameSetIterator_attributes, &swig_NameSetIterator_Sf_SwigStatic, swig_NameSetIterator_meta, swig_NameSetIterator_bases, swig_NameSetIterator_base_names };

static int _wrap_new_EventSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::NameSet",0,0)
  {
    try{
      result = (NameSet *)new NameSet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = 0 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::NameSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NameSet::NameSet",1,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("new_EventSet",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (NameSet *)new NameSet((NameSet const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::NameSet",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("NameSet::NameSet",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::NameSet",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (NameSet *)new NameSet((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::NameSet",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("NameSet::NameSet",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (NameSet *)new NameSet((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EventSet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventSet__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EventSet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_EventSet__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EventSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::NameSet()\n"
    "    NameSet::NameSet(NameSet const &)\n"
    "    NameSet::NameSet(std::string const &,std::string const &)\n"
    "    NameSet::NameSet(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_New(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::New",1,"NameSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_New",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (NameSet *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Copy(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("NameSet::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Copy",1,"NameSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Copy",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (NameSet *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string result;
  
  SWIG_check_num_args("NameSet::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Name",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Name",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("NameSet::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Name",1,"NameSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Name",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSet_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Name() const\n"
    "    NameSet::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Clear(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  
  SWIG_check_num_args("NameSet::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Clear",1,"NameSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Clear",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Size(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx result;
  
  SWIG_check_num_args("NameSet::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Size",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Size",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (Idx)((NameSet const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Empty(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Empty",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Empty",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)((NameSet const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Valid(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Valid",1,"NameSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Valid",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Valid",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)((NameSet const *)arg1)->Valid((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Insert",1,"NameSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Insert",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Insert",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Insert((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Erase",1,"NameSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Erase",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Erase",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Erase((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Exists",1,"NameSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Exists",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Exists",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)((NameSet const *)arg1)->Exists((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Begin(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSetIterator result;
  
  SWIG_check_num_args("NameSet::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Begin",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Begin",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_End(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSetIterator result;
  
  SWIG_check_num_args("NameSet::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::End",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_End",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSetIterator *arg2 = 0 ;
  NameSetIterator result;
  
  SWIG_check_num_args("NameSet::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Erase",1,"NameSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::Erase",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Erase",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("EventSet_Erase",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (arg1)->Erase((NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  NameSetIterator result;
  
  SWIG_check_num_args("NameSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Find",1,"NameSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Find",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Find",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = ((NameSet const *)arg1)->Find((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  
  SWIG_check_num_args("NameSet::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::EraseSet",1,"NameSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::EraseSet",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_EraseSet",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_EraseSet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->EraseSet((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  
  SWIG_check_num_args("NameSet::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::InsertSet",1,"NameSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::InsertSet",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_InsertSet",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_InsertSet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->InsertSet((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  
  SWIG_check_num_args("NameSet::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::RestrictSet",1,"NameSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::RestrictSet",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_RestrictSet",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_RestrictSet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->RestrictSet((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___add(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  NameSet result;
  
  SWIG_check_num_args("NameSet::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator +",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator +",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___add",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___add",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->operator +((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSet * resultptr = new NameSet((const NameSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___sub(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  NameSet result;
  
  SWIG_check_num_args("NameSet::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator -",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator -",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___sub",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___sub",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->operator -((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSet * resultptr = new NameSet((const NameSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___mul(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  NameSet result;
  
  SWIG_check_num_args("NameSet::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator *",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator *",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___mul",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___mul",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((NameSet const *)arg1)->operator *((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSet * resultptr = new NameSet((const NameSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___le(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("NameSet::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator <=",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator <=",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___le",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___le",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)((NameSet const *)arg1)->operator <=((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___lt(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("NameSet::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator <",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator <",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___lt",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___lt",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)NameSet_operator_Sl_((NameSet const *)arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet___eq(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("NameSet::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::operator ==",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::operator ==",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___eq",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet___eq",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)((NameSet const *)arg1)->operator ==((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Detach(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  
  SWIG_check_num_args("NameSet::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Detach",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Detach",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      ((NameSet const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Lock(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  
  SWIG_check_num_args("NameSet::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Lock",1,"NameSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Lock",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      ((NameSet const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_SymbolicName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  std::string result;
  
  SWIG_check_num_args("NameSet::SymbolicName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::SymbolicName",1,"NameSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::SymbolicName",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_SymbolicName",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = ((NameSet const *)arg1)->SymbolicName((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Index(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("NameSet::Index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Index",1,"NameSet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Index",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Index",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)((NameSet const *)arg1)->Index((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Insert",1,"NameSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Insert",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Insert",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Insert((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Insert(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Insert__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Insert(Idx const &)\n"
    "    NameSet::Insert(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Erase",1,"NameSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Erase",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Erase",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Erase((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Erase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSet_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Erase__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Erase(Idx const &)\n"
    "    NameSet::Erase(NameSetIterator const &)\n"
    "    NameSet::Erase(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("NameSet::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Exists",1,"NameSet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Exists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Exists",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((NameSet const *)arg1)->Exists((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Exists(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Exists__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Exists(Idx const &) const\n"
    "    NameSet::Exists(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  NameSetIterator result;
  
  SWIG_check_num_args("NameSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Find",1,"NameSet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NameSet::Find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Find",1,SWIGTYPE_p_NameSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((NameSet const *)arg1)->Find((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Find(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Find__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Find(Idx const &) const\n"
    "    NameSet::Find(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  std::string result;
  
  SWIG_check_num_args("NameSet::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Str",1,"NameSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NameSet::Str",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Str",1,SWIGTYPE_p_NameSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = ((NameSet const *)arg1)->Str((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_SymbolicName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSetIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("NameSet::SymbolicName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::SymbolicName",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::SymbolicName",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_SymbolicName",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("EventSet_SymbolicName",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = NameSet_SymbolicName__SWIG_1((NameSet const *)arg1,(NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_SymbolicName(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSet_SymbolicName__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_SymbolicName__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_SymbolicName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::SymbolicName(Idx const &) const\n"
    "    NameSet::SymbolicName(NameSetIterator const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSet_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = (NameSet *) 0 ;
  NameSetIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("NameSet::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NameSet::Str",1,"NameSet const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NameSet::Str",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSet_Str",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("EventSet_Str",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = NameSet_Str__SWIG_1((NameSet const *)arg1,(NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSet_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSet_Str__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSet_Str__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSet_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NameSet::Str(Idx const &) const\n"
    "    NameSet::Str(NameSetIterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_EventSet(void *obj) {
NameSet *arg1 = (NameSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventSet_methods[]= {
    { "New", _wrap_EventSet_New},
    { "Copy", _wrap_EventSet_Copy},
    { "Name", _wrap_EventSet_Name},
    { "Clear", _wrap_EventSet_Clear},
    { "Size", _wrap_EventSet_Size},
    { "Empty", _wrap_EventSet_Empty},
    { "Valid", _wrap_EventSet_Valid},
    { "Begin", _wrap_EventSet_Begin},
    { "End", _wrap_EventSet_End},
    { "EraseSet", _wrap_EventSet_EraseSet},
    { "InsertSet", _wrap_EventSet_InsertSet},
    { "RestrictSet", _wrap_EventSet_RestrictSet},
    { "__add", _wrap_EventSet___add},
    { "__sub", _wrap_EventSet___sub},
    { "__mul", _wrap_EventSet___mul},
    { "__le", _wrap_EventSet___le},
    { "__lt", _wrap_EventSet___lt},
    { "__eq", _wrap_EventSet___eq},
    { "Detach", _wrap_EventSet_Detach},
    { "Lock", _wrap_EventSet_Lock},
    { "Index", _wrap_EventSet_Index},
    { "Insert", _wrap_EventSet_Insert},
    { "Erase", _wrap_EventSet_Erase},
    { "Exists", _wrap_EventSet_Exists},
    { "Find", _wrap_EventSet_Find},
    { "SymbolicName", _wrap_EventSet_SymbolicName},
    { "Str", _wrap_EventSet_Str},
    {0,0}
};
static swig_lua_method swig_EventSet_meta[] = {
    { "__add", _wrap_EventSet___add},
    { "__sub", _wrap_EventSet___sub},
    { "__mul", _wrap_EventSet___mul},
    { "__le", _wrap_EventSet___le},
    { "__lt", _wrap_EventSet___lt},
    { "__eq", _wrap_EventSet___eq},
    {0,0}
};

static swig_lua_attribute swig_EventSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventSet_Sf_SwigStatic = {
    "EventSet",
    swig_EventSet_Sf_SwigStatic_methods,
    swig_EventSet_Sf_SwigStatic_attributes,
    swig_EventSet_Sf_SwigStatic_constants,
    swig_EventSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventSet_bases[] = {0,0};
static const char *swig_EventSet_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_EventSet = { "EventSet", "EventSet", &SWIGTYPE_p_NameSet,_proxy__wrap_new_EventSet, swig_delete_EventSet, swig_EventSet_methods, swig_EventSet_attributes, &swig_EventSet_Sf_SwigStatic, swig_EventSet_meta, swig_EventSet_bases, swig_EventSet_base_names };

static int _wrap_new_Alphabet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::TaNameSet",0,0)
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)new TaNameSet< AttributeCFlags >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Alphabet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::TaNameSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::TaNameSet",1,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("new_Alphabet",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)new TaNameSet< AttributeCFlags >((TaNameSet< AttributeCFlags > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Alphabet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::TaNameSet",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::TaNameSet",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::TaNameSet",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)new TaNameSet< AttributeCFlags >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Alphabet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::TaNameSet",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::TaNameSet",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)new TaNameSet< AttributeCFlags >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_New(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::New",1,"TaNameSet< AttributeCFlags > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_New",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Copy",1,"TaNameSet< AttributeCFlags > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Copy",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Alphabet__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  NameSet *arg1 = 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::TaNameSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::TaNameSet",1,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("new_Alphabet",1,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *)new TaNameSet< AttributeCFlags >((NameSet const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Alphabet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Alphabet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Alphabet__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Alphabet__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Alphabet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Alphabet__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Alphabet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TaNameSet< AttributeCFlags >::TaNameSet()\n"
    "    TaNameSet< AttributeCFlags >::TaNameSet(TaNameSet< AttributeCFlags > const &)\n"
    "    TaNameSet< AttributeCFlags >::TaNameSet(std::string const &,std::string const &)\n"
    "    TaNameSet< AttributeCFlags >::TaNameSet(std::string const &)\n"
    "    TaNameSet< AttributeCFlags >::TaNameSet(NameSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Alphabet_Attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attributep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attributep",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attributep",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (AttributeCFlags *)(arg1)->Attributep((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  Idx *arg2 = 0 ;
  AttributeCFlags *arg3 = 0 ;
  Idx temp2 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",2,"Idx const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("Alphabet_Attribute",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->Attribute((Idx const &)*arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  Idx *arg2 = 0 ;
  Idx temp2 ;
  bool result;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",2,"Idx const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Insert",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Idx)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Insert((Idx const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Insert",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->Insert((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  std::string *arg2 = 0 ;
  AttributeCFlags *arg3 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Insert",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Insert",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("Alphabet_Insert",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((std::string const &)*arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Alphabet_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Alphabet_Insert__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Alphabet_Insert__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Alphabet_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TaNameSet< AttributeCFlags >::Insert(Idx const &)\n"
    "    TaNameSet< AttributeCFlags >::Insert(std::string const &)\n"
    "    TaNameSet< AttributeCFlags >::Insert(std::string const &,AttributeCFlags const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Alphabet_Attribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (AttributeCFlags *)TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_2(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Attribute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  NameSetIterator *arg2 = 0 ;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("Alphabet_Attribute",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = (AttributeCFlags *)TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_3(arg1,(NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Attribute__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  std::string *arg2 = 0 ;
  AttributeCFlags *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("Alphabet_Attribute",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_4(arg1,(std::string const &)*arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Attribute__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) 0 ;
  NameSetIterator *arg2 = 0 ;
  AttributeCFlags *arg3 = 0 ;
  
  SWIG_check_num_args("TaNameSet< AttributeCFlags >::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",1,"TaNameSet< AttributeCFlags > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",2,"NameSetIterator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TaNameSet< AttributeCFlags >::Attribute",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("Alphabet_Attribute",1,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("Alphabet_Attribute",2,SWIGTYPE_p_NameSetIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("Alphabet_Attribute",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      TaNameSet_Sl_AttributeCFlags_Sg__Attribute__SWIG_5(arg1,(NameSetIterator const &)*arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alphabet_Attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Alphabet_Attribute__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Alphabet_Attribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Alphabet_Attribute__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Alphabet_Attribute__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Alphabet_Attribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Alphabet_Attribute__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Alphabet_Attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TaNameSet< AttributeCFlags >::Attributep(Idx const &)\n"
    "    TaNameSet< AttributeCFlags >::Attribute(Idx const &,AttributeCFlags const &)\n"
    "    TaNameSet< AttributeCFlags >::Attribute(std::string const &)\n"
    "    TaNameSet< AttributeCFlags >::Attribute(NameSetIterator const &)\n"
    "    TaNameSet< AttributeCFlags >::Attribute(std::string const &,AttributeCFlags const &)\n"
    "    TaNameSet< AttributeCFlags >::Attribute(NameSetIterator const &,AttributeCFlags const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Alphabet(void *obj) {
TaNameSet< AttributeCFlags > *arg1 = (TaNameSet< AttributeCFlags > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Alphabet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Alphabet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Alphabet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Alphabet_methods[]= {
    { "New", _wrap_Alphabet_New},
    { "Copy", _wrap_Alphabet_Copy},
    { "Insert", _wrap_Alphabet_Insert},
    { "Attribute", _wrap_Alphabet_Attribute},
    {0,0}
};
static swig_lua_method swig_Alphabet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Alphabet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Alphabet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Alphabet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Alphabet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Alphabet_Sf_SwigStatic = {
    "Alphabet",
    swig_Alphabet_Sf_SwigStatic_methods,
    swig_Alphabet_Sf_SwigStatic_attributes,
    swig_Alphabet_Sf_SwigStatic_constants,
    swig_Alphabet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Alphabet_bases[] = {0,0};
static const char *swig_Alphabet_base_names[] = {"NameSet *",0};
static swig_lua_class _wrap_class_Alphabet = { "Alphabet", "Alphabet", &SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,_proxy__wrap_new_Alphabet, swig_delete_Alphabet, swig_Alphabet_methods, swig_Alphabet_attributes, &swig_Alphabet_Sf_SwigStatic, swig_Alphabet_meta, swig_Alphabet_bases, swig_Alphabet_base_names };

static int _wrap_new_TransSetIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::TransSetX1EvX2Iterator",0,0)
  {
    try{
      result = (TransSetX1EvX2Iterator *)new TransSetX1EvX2Iterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = 0 ;
  TransSetX1EvX2Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::TransSetX1EvX2Iterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::TransSetX1EvX2Iterator",1,"TransSetX1EvX2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("new_TransSetIterator",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (TransSetX1EvX2Iterator *)new TransSetX1EvX2Iterator((TransSetX1EvX2Iterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2Iterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2Iterator::TransSetX1EvX2Iterator()\n"
    "    TransSetX1EvX2Iterator::TransSetX1EvX2Iterator(TransSetX1EvX2Iterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetIterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::DeRef",1,"TransSetX1EvX2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_DeRef",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = TransSetX1EvX2Iterator_DeRef((TransSetX1EvX2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::Inc",1,"TransSetX1EvX2Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_Inc",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      TransSetX1EvX2Iterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::Dec",1,"TransSetX1EvX2Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_Dec",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      TransSetX1EvX2Iterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  TransSetX1EvX2Iterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::operator ==",1,"TransSetX1EvX2Iterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2Iterator::operator ==",2,"TransSetX1EvX2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator___eq",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator___eq",2,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2Iterator const *)arg1)->operator ==((TransSetX1EvX2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::Transition",1,"TransSetX1EvX2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_Transition",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = TransSetX1EvX2Iterator_Transition((TransSetX1EvX2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::X1",1,"TransSetX1EvX2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_X1",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1EvX2Iterator_X1((TransSetX1EvX2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::Ev",1,"TransSetX1EvX2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_Ev",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1EvX2Iterator_Ev((TransSetX1EvX2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetIterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1EvX2Iterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2Iterator::X2",1,"TransSetX1EvX2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSetIterator_X2",1,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1EvX2Iterator_X2((TransSetX1EvX2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetIterator(void *obj) {
TransSetX1EvX2Iterator *arg1 = (TransSetX1EvX2Iterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetIterator_methods[]= {
    { "DeRef", _wrap_TransSetIterator_DeRef},
    { "Inc", _wrap_TransSetIterator_Inc},
    { "Dec", _wrap_TransSetIterator_Dec},
    { "__eq", _wrap_TransSetIterator___eq},
    { "Transition", _wrap_TransSetIterator_Transition},
    { "X1", _wrap_TransSetIterator_X1},
    { "Ev", _wrap_TransSetIterator_Ev},
    { "X2", _wrap_TransSetIterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetIterator_meta[] = {
    { "__eq", _wrap_TransSetIterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetIterator_Sf_SwigStatic = {
    "TransSetIterator",
    swig_TransSetIterator_Sf_SwigStatic_methods,
    swig_TransSetIterator_Sf_SwigStatic_attributes,
    swig_TransSetIterator_Sf_SwigStatic_constants,
    swig_TransSetIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetIterator_bases[] = {0};
static const char *swig_TransSetIterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetIterator = { "TransSetIterator", "TransSetIterator", &SWIGTYPE_p_TransSetX1EvX2Iterator,_proxy__wrap_new_TransSetIterator, swig_delete_TransSetIterator, swig_TransSetIterator_methods, swig_TransSetIterator_attributes, &swig_TransSetIterator_Sf_SwigStatic, swig_TransSetIterator_meta, swig_TransSetIterator_bases, swig_TransSetIterator_base_names };

static int _wrap_new_TransSetX1X2EvIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::TransSetX1X2EvIterator",0,0)
  {
    try{
      result = (TransSetX1X2EvIterator *)new TransSetX1X2EvIterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2EvIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = 0 ;
  TransSetX1X2EvIterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::TransSetX1X2EvIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::TransSetX1X2EvIterator",1,"TransSetX1X2EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("new_TransSetX1X2EvIterator",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (TransSetX1X2EvIterator *)new TransSetX1X2EvIterator((TransSetX1X2EvIterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2EvIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX1X2EvIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2EvIterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2EvIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX1X2EvIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2EvIterator::TransSetX1X2EvIterator()\n"
    "    TransSetX1X2EvIterator::TransSetX1X2EvIterator(TransSetX1X2EvIterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2EvIterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::DeRef",1,"TransSetX1X2EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_DeRef",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = TransSetX1X2EvIterator_DeRef((TransSetX1X2EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::Inc",1,"TransSetX1X2EvIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_Inc",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      TransSetX1X2EvIterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::Dec",1,"TransSetX1X2EvIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_Dec",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      TransSetX1X2EvIterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  TransSetX1X2EvIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::operator ==",1,"TransSetX1X2EvIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2EvIterator::operator ==",2,"TransSetX1X2EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator___eq",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator___eq",2,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2EvIterator const *)arg1)->operator ==((TransSetX1X2EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::Transition",1,"TransSetX1X2EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_Transition",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = TransSetX1X2EvIterator_Transition((TransSetX1X2EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::X1",1,"TransSetX1X2EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_X1",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1X2EvIterator_X1((TransSetX1X2EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::Ev",1,"TransSetX1X2EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_Ev",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1X2EvIterator_Ev((TransSetX1X2EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2EvIterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1X2EvIterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2EvIterator::X2",1,"TransSetX1X2EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2EvIterator_X2",1,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX1X2EvIterator_X2((TransSetX1X2EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetX1X2EvIterator(void *obj) {
TransSetX1X2EvIterator *arg1 = (TransSetX1X2EvIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX1X2EvIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX1X2EvIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX1X2EvIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX1X2EvIterator_methods[]= {
    { "DeRef", _wrap_TransSetX1X2EvIterator_DeRef},
    { "Inc", _wrap_TransSetX1X2EvIterator_Inc},
    { "Dec", _wrap_TransSetX1X2EvIterator_Dec},
    { "__eq", _wrap_TransSetX1X2EvIterator___eq},
    { "Transition", _wrap_TransSetX1X2EvIterator_Transition},
    { "X1", _wrap_TransSetX1X2EvIterator_X1},
    { "Ev", _wrap_TransSetX1X2EvIterator_Ev},
    { "X2", _wrap_TransSetX1X2EvIterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetX1X2EvIterator_meta[] = {
    { "__eq", _wrap_TransSetX1X2EvIterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX1X2EvIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX1X2EvIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX1X2EvIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX1X2EvIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX1X2EvIterator_Sf_SwigStatic = {
    "TransSetX1X2EvIterator",
    swig_TransSetX1X2EvIterator_Sf_SwigStatic_methods,
    swig_TransSetX1X2EvIterator_Sf_SwigStatic_attributes,
    swig_TransSetX1X2EvIterator_Sf_SwigStatic_constants,
    swig_TransSetX1X2EvIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX1X2EvIterator_bases[] = {0};
static const char *swig_TransSetX1X2EvIterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetX1X2EvIterator = { "TransSetX1X2EvIterator", "TransSetX1X2EvIterator", &SWIGTYPE_p_TransSetX1X2EvIterator,_proxy__wrap_new_TransSetX1X2EvIterator, swig_delete_TransSetX1X2EvIterator, swig_TransSetX1X2EvIterator_methods, swig_TransSetX1X2EvIterator_attributes, &swig_TransSetX1X2EvIterator_Sf_SwigStatic, swig_TransSetX1X2EvIterator_meta, swig_TransSetX1X2EvIterator_bases, swig_TransSetX1X2EvIterator_base_names };

static int _wrap_new_TransSetX2EvX1Iterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::TransSetX2EvX1Iterator",0,0)
  {
    try{
      result = (TransSetX2EvX1Iterator *)new TransSetX2EvX1Iterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1Iterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = 0 ;
  TransSetX2EvX1Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::TransSetX2EvX1Iterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::TransSetX2EvX1Iterator",1,"TransSetX2EvX1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1Iterator",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (TransSetX2EvX1Iterator *)new TransSetX2EvX1Iterator((TransSetX2EvX1Iterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1Iterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX2EvX1Iterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1Iterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1Iterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX2EvX1Iterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1Iterator::TransSetX2EvX1Iterator()\n"
    "    TransSetX2EvX1Iterator::TransSetX2EvX1Iterator(TransSetX2EvX1Iterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1Iterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::DeRef",1,"TransSetX2EvX1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_DeRef",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = TransSetX2EvX1Iterator_DeRef((TransSetX2EvX1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::Inc",1,"TransSetX2EvX1Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_Inc",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      TransSetX2EvX1Iterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::Dec",1,"TransSetX2EvX1Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_Dec",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      TransSetX2EvX1Iterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  TransSetX2EvX1Iterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::operator ==",1,"TransSetX2EvX1Iterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1Iterator::operator ==",2,"TransSetX2EvX1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator___eq",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator___eq",2,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1Iterator const *)arg1)->operator ==((TransSetX2EvX1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::Transition",1,"TransSetX2EvX1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_Transition",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = TransSetX2EvX1Iterator_Transition((TransSetX2EvX1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::X1",1,"TransSetX2EvX1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_X1",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2EvX1Iterator_X1((TransSetX2EvX1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::Ev",1,"TransSetX2EvX1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_Ev",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2EvX1Iterator_Ev((TransSetX2EvX1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1Iterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2EvX1Iterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1Iterator::X2",1,"TransSetX2EvX1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1Iterator_X2",1,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2EvX1Iterator_X2((TransSetX2EvX1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetX2EvX1Iterator(void *obj) {
TransSetX2EvX1Iterator *arg1 = (TransSetX2EvX1Iterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX2EvX1Iterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX2EvX1Iterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX2EvX1Iterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX2EvX1Iterator_methods[]= {
    { "DeRef", _wrap_TransSetX2EvX1Iterator_DeRef},
    { "Inc", _wrap_TransSetX2EvX1Iterator_Inc},
    { "Dec", _wrap_TransSetX2EvX1Iterator_Dec},
    { "__eq", _wrap_TransSetX2EvX1Iterator___eq},
    { "Transition", _wrap_TransSetX2EvX1Iterator_Transition},
    { "X1", _wrap_TransSetX2EvX1Iterator_X1},
    { "Ev", _wrap_TransSetX2EvX1Iterator_Ev},
    { "X2", _wrap_TransSetX2EvX1Iterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetX2EvX1Iterator_meta[] = {
    { "__eq", _wrap_TransSetX2EvX1Iterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX2EvX1Iterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX2EvX1Iterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX2EvX1Iterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX2EvX1Iterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX2EvX1Iterator_Sf_SwigStatic = {
    "TransSetX2EvX1Iterator",
    swig_TransSetX2EvX1Iterator_Sf_SwigStatic_methods,
    swig_TransSetX2EvX1Iterator_Sf_SwigStatic_attributes,
    swig_TransSetX2EvX1Iterator_Sf_SwigStatic_constants,
    swig_TransSetX2EvX1Iterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX2EvX1Iterator_bases[] = {0};
static const char *swig_TransSetX2EvX1Iterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetX2EvX1Iterator = { "TransSetX2EvX1Iterator", "TransSetX2EvX1Iterator", &SWIGTYPE_p_TransSetX2EvX1Iterator,_proxy__wrap_new_TransSetX2EvX1Iterator, swig_delete_TransSetX2EvX1Iterator, swig_TransSetX2EvX1Iterator_methods, swig_TransSetX2EvX1Iterator_attributes, &swig_TransSetX2EvX1Iterator_Sf_SwigStatic, swig_TransSetX2EvX1Iterator_meta, swig_TransSetX2EvX1Iterator_bases, swig_TransSetX2EvX1Iterator_base_names };

static int _wrap_new_TransSetX2X1EvIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::TransSetX2X1EvIterator",0,0)
  {
    try{
      result = (TransSetX2X1EvIterator *)new TransSetX2X1EvIterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1EvIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = 0 ;
  TransSetX2X1EvIterator *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::TransSetX2X1EvIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::TransSetX2X1EvIterator",1,"TransSetX2X1EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("new_TransSetX2X1EvIterator",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (TransSetX2X1EvIterator *)new TransSetX2X1EvIterator((TransSetX2X1EvIterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1EvIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX2X1EvIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1EvIterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1EvIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX2X1EvIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1EvIterator::TransSetX2X1EvIterator()\n"
    "    TransSetX2X1EvIterator::TransSetX2X1EvIterator(TransSetX2X1EvIterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1EvIterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::DeRef",1,"TransSetX2X1EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_DeRef",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = TransSetX2X1EvIterator_DeRef((TransSetX2X1EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::Inc",1,"TransSetX2X1EvIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_Inc",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      TransSetX2X1EvIterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::Dec",1,"TransSetX2X1EvIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_Dec",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      TransSetX2X1EvIterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  TransSetX2X1EvIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::operator ==",1,"TransSetX2X1EvIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1EvIterator::operator ==",2,"TransSetX2X1EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator___eq",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator___eq",2,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1EvIterator const *)arg1)->operator ==((TransSetX2X1EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::Transition",1,"TransSetX2X1EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_Transition",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = TransSetX2X1EvIterator_Transition((TransSetX2X1EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::X1",1,"TransSetX2X1EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_X1",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2X1EvIterator_X1((TransSetX2X1EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::Ev",1,"TransSetX2X1EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_Ev",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2X1EvIterator_Ev((TransSetX2X1EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1EvIterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2X1EvIterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1EvIterator::X2",1,"TransSetX2X1EvIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1EvIterator_X2",1,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (Idx)TransSetX2X1EvIterator_X2((TransSetX2X1EvIterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetX2X1EvIterator(void *obj) {
TransSetX2X1EvIterator *arg1 = (TransSetX2X1EvIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX2X1EvIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX2X1EvIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX2X1EvIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX2X1EvIterator_methods[]= {
    { "DeRef", _wrap_TransSetX2X1EvIterator_DeRef},
    { "Inc", _wrap_TransSetX2X1EvIterator_Inc},
    { "Dec", _wrap_TransSetX2X1EvIterator_Dec},
    { "__eq", _wrap_TransSetX2X1EvIterator___eq},
    { "Transition", _wrap_TransSetX2X1EvIterator_Transition},
    { "X1", _wrap_TransSetX2X1EvIterator_X1},
    { "Ev", _wrap_TransSetX2X1EvIterator_Ev},
    { "X2", _wrap_TransSetX2X1EvIterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetX2X1EvIterator_meta[] = {
    { "__eq", _wrap_TransSetX2X1EvIterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX2X1EvIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX2X1EvIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX2X1EvIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX2X1EvIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX2X1EvIterator_Sf_SwigStatic = {
    "TransSetX2X1EvIterator",
    swig_TransSetX2X1EvIterator_Sf_SwigStatic_methods,
    swig_TransSetX2X1EvIterator_Sf_SwigStatic_attributes,
    swig_TransSetX2X1EvIterator_Sf_SwigStatic_constants,
    swig_TransSetX2X1EvIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX2X1EvIterator_bases[] = {0};
static const char *swig_TransSetX2X1EvIterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetX2X1EvIterator = { "TransSetX2X1EvIterator", "TransSetX2X1EvIterator", &SWIGTYPE_p_TransSetX2X1EvIterator,_proxy__wrap_new_TransSetX2X1EvIterator, swig_delete_TransSetX2X1EvIterator, swig_TransSetX2X1EvIterator_methods, swig_TransSetX2X1EvIterator_attributes, &swig_TransSetX2X1EvIterator_Sf_SwigStatic, swig_TransSetX2X1EvIterator_meta, swig_TransSetX2X1EvIterator_bases, swig_TransSetX2X1EvIterator_base_names };

static int _wrap_new_TransSetEvX1X2Iterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::TransSetEvX1X2Iterator",0,0)
  {
    try{
      result = (TransSetEvX1X2Iterator *)new TransSetEvX1X2Iterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2Iterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = 0 ;
  TransSetEvX1X2Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::TransSetEvX1X2Iterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::TransSetEvX1X2Iterator",1,"TransSetEvX1X2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2Iterator",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (TransSetEvX1X2Iterator *)new TransSetEvX1X2Iterator((TransSetEvX1X2Iterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2Iterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetEvX1X2Iterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2Iterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2Iterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetEvX1X2Iterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2Iterator::TransSetEvX1X2Iterator()\n"
    "    TransSetEvX1X2Iterator::TransSetEvX1X2Iterator(TransSetEvX1X2Iterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2Iterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::DeRef",1,"TransSetEvX1X2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_DeRef",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = TransSetEvX1X2Iterator_DeRef((TransSetEvX1X2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::Inc",1,"TransSetEvX1X2Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_Inc",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      TransSetEvX1X2Iterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::Dec",1,"TransSetEvX1X2Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_Dec",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      TransSetEvX1X2Iterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  TransSetEvX1X2Iterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::operator ==",1,"TransSetEvX1X2Iterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2Iterator::operator ==",2,"TransSetEvX1X2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator___eq",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator___eq",2,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2Iterator const *)arg1)->operator ==((TransSetEvX1X2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::Transition",1,"TransSetEvX1X2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_Transition",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = TransSetEvX1X2Iterator_Transition((TransSetEvX1X2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::X1",1,"TransSetEvX1X2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_X1",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX1X2Iterator_X1((TransSetEvX1X2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::Ev",1,"TransSetEvX1X2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_Ev",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX1X2Iterator_Ev((TransSetEvX1X2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2Iterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX1X2Iterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2Iterator::X2",1,"TransSetEvX1X2Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2Iterator_X2",1,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX1X2Iterator_X2((TransSetEvX1X2Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetEvX1X2Iterator(void *obj) {
TransSetEvX1X2Iterator *arg1 = (TransSetEvX1X2Iterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetEvX1X2Iterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetEvX1X2Iterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetEvX1X2Iterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetEvX1X2Iterator_methods[]= {
    { "DeRef", _wrap_TransSetEvX1X2Iterator_DeRef},
    { "Inc", _wrap_TransSetEvX1X2Iterator_Inc},
    { "Dec", _wrap_TransSetEvX1X2Iterator_Dec},
    { "__eq", _wrap_TransSetEvX1X2Iterator___eq},
    { "Transition", _wrap_TransSetEvX1X2Iterator_Transition},
    { "X1", _wrap_TransSetEvX1X2Iterator_X1},
    { "Ev", _wrap_TransSetEvX1X2Iterator_Ev},
    { "X2", _wrap_TransSetEvX1X2Iterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetEvX1X2Iterator_meta[] = {
    { "__eq", _wrap_TransSetEvX1X2Iterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetEvX1X2Iterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetEvX1X2Iterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetEvX1X2Iterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetEvX1X2Iterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetEvX1X2Iterator_Sf_SwigStatic = {
    "TransSetEvX1X2Iterator",
    swig_TransSetEvX1X2Iterator_Sf_SwigStatic_methods,
    swig_TransSetEvX1X2Iterator_Sf_SwigStatic_attributes,
    swig_TransSetEvX1X2Iterator_Sf_SwigStatic_constants,
    swig_TransSetEvX1X2Iterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetEvX1X2Iterator_bases[] = {0};
static const char *swig_TransSetEvX1X2Iterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetEvX1X2Iterator = { "TransSetEvX1X2Iterator", "TransSetEvX1X2Iterator", &SWIGTYPE_p_TransSetEvX1X2Iterator,_proxy__wrap_new_TransSetEvX1X2Iterator, swig_delete_TransSetEvX1X2Iterator, swig_TransSetEvX1X2Iterator_methods, swig_TransSetEvX1X2Iterator_attributes, &swig_TransSetEvX1X2Iterator_Sf_SwigStatic, swig_TransSetEvX1X2Iterator_meta, swig_TransSetEvX1X2Iterator_bases, swig_TransSetEvX1X2Iterator_base_names };

static int _wrap_new_TransSetEvX2X1Iterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::TransSetEvX2X1Iterator",0,0)
  {
    try{
      result = (TransSetEvX2X1Iterator *)new TransSetEvX2X1Iterator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1Iterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = 0 ;
  TransSetEvX2X1Iterator *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::TransSetEvX2X1Iterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::TransSetEvX2X1Iterator",1,"TransSetEvX2X1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1Iterator",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (TransSetEvX2X1Iterator *)new TransSetEvX2X1Iterator((TransSetEvX2X1Iterator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1Iterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetEvX2X1Iterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1Iterator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1Iterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetEvX2X1Iterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1Iterator::TransSetEvX2X1Iterator()\n"
    "    TransSetEvX2X1Iterator::TransSetEvX2X1Iterator(TransSetEvX2X1Iterator const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1Iterator_DeRef(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::DeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::DeRef",1,"TransSetEvX2X1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_DeRef",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = TransSetEvX2X1Iterator_DeRef((TransSetEvX2X1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_Inc(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::Inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::Inc",1,"TransSetEvX2X1Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_Inc",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      TransSetEvX2X1Iterator_Inc(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_Dec(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::Dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::Dec",1,"TransSetEvX2X1Iterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_Dec",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      TransSetEvX2X1Iterator_Dec(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  TransSetEvX2X1Iterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::operator ==",1,"TransSetEvX2X1Iterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1Iterator::operator ==",2,"TransSetEvX2X1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator___eq",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator___eq",2,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1Iterator const *)arg1)->operator ==((TransSetEvX2X1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_Transition(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  Transition result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::Transition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::Transition",1,"TransSetEvX2X1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_Transition",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = TransSetEvX2X1Iterator_Transition((TransSetEvX2X1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Transition * resultptr = new Transition((const Transition &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Transition,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_X1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::X1",1,"TransSetEvX2X1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_X1",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX2X1Iterator_X1((TransSetEvX2X1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::Ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::Ev",1,"TransSetEvX2X1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_Ev",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX2X1Iterator_Ev((TransSetEvX2X1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1Iterator_X2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX2X1Iterator::X2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1Iterator::X2",1,"TransSetEvX2X1Iterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1Iterator_X2",1,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (Idx)TransSetEvX2X1Iterator_X2((TransSetEvX2X1Iterator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransSetEvX2X1Iterator(void *obj) {
TransSetEvX2X1Iterator *arg1 = (TransSetEvX2X1Iterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetEvX2X1Iterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetEvX2X1Iterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetEvX2X1Iterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetEvX2X1Iterator_methods[]= {
    { "DeRef", _wrap_TransSetEvX2X1Iterator_DeRef},
    { "Inc", _wrap_TransSetEvX2X1Iterator_Inc},
    { "Dec", _wrap_TransSetEvX2X1Iterator_Dec},
    { "__eq", _wrap_TransSetEvX2X1Iterator___eq},
    { "Transition", _wrap_TransSetEvX2X1Iterator_Transition},
    { "X1", _wrap_TransSetEvX2X1Iterator_X1},
    { "Ev", _wrap_TransSetEvX2X1Iterator_Ev},
    { "X2", _wrap_TransSetEvX2X1Iterator_X2},
    {0,0}
};
static swig_lua_method swig_TransSetEvX2X1Iterator_meta[] = {
    { "__eq", _wrap_TransSetEvX2X1Iterator___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetEvX2X1Iterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetEvX2X1Iterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetEvX2X1Iterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetEvX2X1Iterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetEvX2X1Iterator_Sf_SwigStatic = {
    "TransSetEvX2X1Iterator",
    swig_TransSetEvX2X1Iterator_Sf_SwigStatic_methods,
    swig_TransSetEvX2X1Iterator_Sf_SwigStatic_attributes,
    swig_TransSetEvX2X1Iterator_Sf_SwigStatic_constants,
    swig_TransSetEvX2X1Iterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetEvX2X1Iterator_bases[] = {0};
static const char *swig_TransSetEvX2X1Iterator_base_names[] = {0};
static swig_lua_class _wrap_class_TransSetEvX2X1Iterator = { "TransSetEvX2X1Iterator", "TransSetEvX2X1Iterator", &SWIGTYPE_p_TransSetEvX2X1Iterator,_proxy__wrap_new_TransSetEvX2X1Iterator, swig_delete_TransSetEvX2X1Iterator, swig_TransSetEvX2X1Iterator_methods, swig_TransSetEvX2X1Iterator_attributes, &swig_TransSetEvX2X1Iterator_Sf_SwigStatic, swig_TransSetEvX2X1Iterator_meta, swig_TransSetEvX2X1Iterator_bases, swig_TransSetEvX2X1Iterator_base_names };

static int _wrap_new_TransSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",0,0)
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::TransSetX1EvX2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1EvX2::TransSetX1EvX2",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSet",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)new TransSetX1EvX2((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSet(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSet__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::TransSetX1EvX2()\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetX1EvX2 const &)\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetX1X2Ev const &)\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetX2EvX1 const &)\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetX2X1Ev const &)\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetEvX1X2 const &)\n"
    "    TransSetX1EvX2::TransSetX1EvX2(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::New",1,"TransSetX1EvX2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_New",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *result = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Copy",1,"TransSetX1EvX2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Copy",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX1EvX2 *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1EvX2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1EvX2::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Name",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Name",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Name",1,"TransSetX1EvX2 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX1EvX2::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Name",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSet_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Name() const\n"
    "    TransSetX1EvX2::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Clear",1,"TransSetX1EvX2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Clear",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1EvX2::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Size",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Size",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (Idx)((TransSetX1EvX2 const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Empty",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Empty",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Valid",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Valid",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Insert",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Insert",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Erase",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Erase",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Exists",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Exists",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Begin",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Begin",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::End",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_End",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2Iterator *arg2 = 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Erase",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Erase",2,"TransSetX1EvX2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Erase",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSet_Erase",2,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetX1EvX2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Find",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Find",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseSet",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseSet",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseSet",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseSet",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::InsertSet",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::InsertSet",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_InsertSet",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_InsertSet",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::RestrictSet",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::RestrictSet",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_RestrictSet",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_RestrictSet",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  TransSetX1EvX2 result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator +",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator +",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___add",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___add",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->operator +((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2 * resultptr = new TransSetX1EvX2((const TransSetX1EvX2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  TransSetX1EvX2 result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator -",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator -",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___sub",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___sub",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->operator -((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2 * resultptr = new TransSetX1EvX2((const TransSetX1EvX2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  TransSetX1EvX2 result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator *",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator *",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___mul",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___mul",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->operator *((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2 * resultptr = new TransSetX1EvX2((const TransSetX1EvX2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator <=",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator <=",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___le",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___le",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->operator <=((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator <",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator <",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___lt",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___lt",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (bool)TransSetX1EvX2_operator_Sl_((TransSetX1EvX2 const *)arg1,(TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::operator ==",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::operator ==",2,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___eq",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet___eq",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->operator ==((TransSetX1EvX2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Detach",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Detach",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Lock",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Lock",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Insert",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Insert",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Erase",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Erase",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Find",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Find",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByX1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1Ev",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByX1Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByX2",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByEv",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByEv",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1OrX2",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByX1OrX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::RestrictStates",1,"TransSetX1EvX2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_RestrictStates",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSet_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Exists",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Exists",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1OrX2",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1Ev",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ExistsByX1Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ExistsByX1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX1EvX2 const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Insert",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1EvX2::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Insert",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1EvX2_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Insert(Transition const &)\n"
    "    TransSetX1EvX2::Insert(Idx,Idx,Idx)\n"
    "    TransSetX1EvX2::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Erase",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1EvX2::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Erase",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1EvX2_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Erase(Transition const &)\n"
    "    TransSetX1EvX2::Erase(TransSetX1EvX2Iterator const &)\n"
    "    TransSetX1EvX2::Erase(Idx,Idx,Idx)\n"
    "    TransSetX1EvX2::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX1EvX2::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EraseByEv",1,"TransSetX1EvX2 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX1EvX2::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EraseByEv",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetX1EvX2_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::EraseByEv(Idx)\n"
    "    TransSetX1EvX2::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1EvX2::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Exists",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1EvX2::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Exists",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1EvX2_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Exists(Transition const &) const\n"
    "    TransSetX1EvX2::Exists(Idx,Idx,Idx) const\n"
    "    TransSetX1EvX2::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Find",1,"TransSetX1EvX2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1EvX2::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1EvX2::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Find",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetX1EvX2_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSet_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Find(Transition const &) const\n"
    "    TransSetX1EvX2::Find(Idx,Idx,Idx) const\n"
    "    TransSetX1EvX2::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Begin",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Begin",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::End",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_End",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Begin",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Begin",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSet_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSet_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Begin() const\n"
    "    TransSetX1EvX2::Begin(Idx) const\n"
    "    TransSetX1EvX2::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::End",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_End",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSet_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSet_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::End() const\n"
    "    TransSetX1EvX2::End(Idx) const\n"
    "    TransSetX1EvX2::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::BeginByEv",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_BeginByEv",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EndByEv",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EndByEv",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX1",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_BeginByEvX1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX1",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EndByEvX1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX2",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_BeginByEvX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX2",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EndByEvX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::BeginByX2",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_BeginByX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EndByX2",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EndByX2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::BeginByX2Ev",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_BeginByX2Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("TransSetX1EvX2::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::EndByX2Ev",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_EndByX2Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1EvX2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ReSort",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ReSort",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSet_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetX1EvX2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetX1EvX2::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetX1EvX2::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetX1EvX2::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetX1EvX2::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetX1EvX2::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::States",1,"TransSetX1EvX2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_States",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetX1EvX2::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSet_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSet_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSet_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::SuccessorStates(Idx) const\n"
    "    TransSetX1EvX2::SuccessorStates(StateSet const &) const\n"
    "    TransSetX1EvX2::SuccessorStates(Idx,Idx) const\n"
    "    TransSetX1EvX2::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ActiveEvents",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetX1EvX2::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ActiveEvents",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSet_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX1EvX2::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::ActiveEvents",1,"TransSetX1EvX2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1EvX2::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_ActiveEvents",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSet_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSet_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetX1EvX2::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSet_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1EvX2::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Str",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Str",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSet_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX1EvX2 const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) 0 ;
  TransSetX1EvX2Iterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1EvX2::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1EvX2::Str",1,"TransSetX1EvX2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1EvX2::Str",2,"TransSetX1EvX2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSet_Str",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("TransSet_Str",2,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = TransSetX1EvX2_Str__SWIG_1((TransSetX1EvX2 const *)arg1,(TransSetX1EvX2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSet_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSet_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSet_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1EvX2::Str(Transition const &) const\n"
    "    TransSetX1EvX2::Str(TransSetX1EvX2Iterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSet(void *obj) {
TransSetX1EvX2 *arg1 = (TransSetX1EvX2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSet_methods[]= {
    { "New", _wrap_TransSet_New},
    { "Copy", _wrap_TransSet_Copy},
    { "Name", _wrap_TransSet_Name},
    { "Clear", _wrap_TransSet_Clear},
    { "Size", _wrap_TransSet_Size},
    { "Empty", _wrap_TransSet_Empty},
    { "Valid", _wrap_TransSet_Valid},
    { "EraseSet", _wrap_TransSet_EraseSet},
    { "InsertSet", _wrap_TransSet_InsertSet},
    { "RestrictSet", _wrap_TransSet_RestrictSet},
    { "__add", _wrap_TransSet___add},
    { "__sub", _wrap_TransSet___sub},
    { "__mul", _wrap_TransSet___mul},
    { "__le", _wrap_TransSet___le},
    { "__lt", _wrap_TransSet___lt},
    { "__eq", _wrap_TransSet___eq},
    { "Detach", _wrap_TransSet_Detach},
    { "Lock", _wrap_TransSet_Lock},
    { "EraseByX1", _wrap_TransSet_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSet_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSet_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSet_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSet_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSet_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSet_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSet_ExistsByX1},
    { "Insert", _wrap_TransSet_Insert},
    { "Erase", _wrap_TransSet_Erase},
    { "EraseByEv", _wrap_TransSet_EraseByEv},
    { "Exists", _wrap_TransSet_Exists},
    { "Find", _wrap_TransSet_Find},
    { "Begin", _wrap_TransSet_Begin},
    { "End", _wrap_TransSet_End},
    { "BeginByEv", _wrap_TransSet_BeginByEv},
    { "EndByEv", _wrap_TransSet_EndByEv},
    { "BeginByEvX1", _wrap_TransSet_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSet_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSet_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSet_EndByEvX2},
    { "BeginByX2", _wrap_TransSet_BeginByX2},
    { "EndByX2", _wrap_TransSet_EndByX2},
    { "BeginByX2Ev", _wrap_TransSet_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSet_EndByX2Ev},
    { "ReSort", _wrap_TransSet_ReSort},
    { "States", _wrap_TransSet_States},
    { "SuccessorStates", _wrap_TransSet_SuccessorStates},
    { "ActiveEvents", _wrap_TransSet_ActiveEvents},
    { "Str", _wrap_TransSet_Str},
    {0,0}
};
static swig_lua_method swig_TransSet_meta[] = {
    { "__add", _wrap_TransSet___add},
    { "__sub", _wrap_TransSet___sub},
    { "__mul", _wrap_TransSet___mul},
    { "__le", _wrap_TransSet___le},
    { "__lt", _wrap_TransSet___lt},
    { "__eq", _wrap_TransSet___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSet_Sf_SwigStatic = {
    "TransSet",
    swig_TransSet_Sf_SwigStatic_methods,
    swig_TransSet_Sf_SwigStatic_attributes,
    swig_TransSet_Sf_SwigStatic_constants,
    swig_TransSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSet_bases[] = {0,0};
static const char *swig_TransSet_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSet = { "TransSet", "TransSet", &SWIGTYPE_p_TransSetX1EvX2,_proxy__wrap_new_TransSet, swig_delete_TransSet, swig_TransSet_methods, swig_TransSet_attributes, &swig_TransSet_Sf_SwigStatic, swig_TransSet_meta, swig_TransSet_bases, swig_TransSet_base_names };

static int _wrap_new_TransSetX1X2Ev__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",0,0)
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::TransSetX1X2Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX1X2Ev::TransSetX1X2Ev",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSetX1X2Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)new TransSetX1X2Ev((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX1X2Ev(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX1X2Ev__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX1X2Ev__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX1X2Ev'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev()\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetX1EvX2 const &)\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetX1X2Ev const &)\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetX2EvX1 const &)\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetX2X1Ev const &)\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetEvX1X2 const &)\n"
    "    TransSetX1X2Ev::TransSetX1X2Ev(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::New",1,"TransSetX1X2Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_New",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Copy",1,"TransSetX1X2Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Copy",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX1X2Ev *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX1X2Ev,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Name",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Name",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Name",1,"TransSetX1X2Ev *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Name",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX1X2Ev_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Name() const\n"
    "    TransSetX1X2Ev::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Clear",1,"TransSetX1X2Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Clear",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Size",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Size",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (Idx)((TransSetX1X2Ev const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Empty",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Empty",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Valid",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Valid",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Insert",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Insert",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Erase",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Exists",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Exists",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Begin",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Begin",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::End",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_End",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2EvIterator *arg2 = 0 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Erase",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Erase",2,"TransSetX1X2EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",2,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetX1X2EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Find",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Find",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseSet",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseSet",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseSet",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseSet",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::InsertSet",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::InsertSet",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_InsertSet",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_InsertSet",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::RestrictSet",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::RestrictSet",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_RestrictSet",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_RestrictSet",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  TransSetX1X2Ev result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator +",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator +",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___add",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___add",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->operator +((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2Ev * resultptr = new TransSetX1X2Ev((const TransSetX1X2Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  TransSetX1X2Ev result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator -",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator -",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___sub",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___sub",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->operator -((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2Ev * resultptr = new TransSetX1X2Ev((const TransSetX1X2Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  TransSetX1X2Ev result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator *",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator *",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___mul",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___mul",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->operator *((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2Ev * resultptr = new TransSetX1X2Ev((const TransSetX1X2Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator <=",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator <=",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___le",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___le",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->operator <=((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator <",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator <",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___lt",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___lt",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (bool)TransSetX1X2Ev_operator_Sl_((TransSetX1X2Ev const *)arg1,(TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::operator ==",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::operator ==",2,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___eq",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev___eq",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->operator ==((TransSetX1X2Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Detach",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Detach",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Lock",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Lock",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Insert",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Insert",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Erase",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Find",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Find",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByX1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1Ev",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByX1Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX2",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByEv",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByEv",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1OrX2",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByX1OrX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::RestrictStates",1,"TransSetX1X2Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_RestrictStates",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Exists",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Exists",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1OrX2",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1Ev",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ExistsByX1Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ExistsByX1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX1X2Ev const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Insert",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Insert",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1X2Ev_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Insert(Transition const &)\n"
    "    TransSetX1X2Ev::Insert(Idx,Idx,Idx)\n"
    "    TransSetX1X2Ev::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Erase",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Erase",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1X2Ev_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2EvIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Erase(Transition const &)\n"
    "    TransSetX1X2Ev::Erase(TransSetX1X2EvIterator const &)\n"
    "    TransSetX1X2Ev::Erase(Idx,Idx,Idx)\n"
    "    TransSetX1X2Ev::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EraseByEv",1,"TransSetX1X2Ev *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EraseByEv",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetX1X2Ev_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::EraseByEv(Idx)\n"
    "    TransSetX1X2Ev::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Exists",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Exists",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX1X2Ev_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Exists(Transition const &) const\n"
    "    TransSetX1X2Ev::Exists(Idx,Idx,Idx) const\n"
    "    TransSetX1X2Ev::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Find",1,"TransSetX1X2Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX1X2Ev::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Find",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetX1X2Ev_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX1X2Ev_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Find(Transition const &) const\n"
    "    TransSetX1X2Ev::Find(Idx,Idx,Idx) const\n"
    "    TransSetX1X2Ev::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Begin",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Begin",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::End",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_End",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Begin",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Begin",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX1X2Ev_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX1X2Ev_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Begin() const\n"
    "    TransSetX1X2Ev::Begin(Idx) const\n"
    "    TransSetX1X2Ev::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::End",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_End",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX1X2Ev_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX1X2Ev_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::End() const\n"
    "    TransSetX1X2Ev::End(Idx) const\n"
    "    TransSetX1X2Ev::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEv",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_BeginByEv",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EndByEv",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EndByEv",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX1",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_BeginByEvX1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX1",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EndByEvX1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX2",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_BeginByEvX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX2",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EndByEvX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::BeginByX2",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_BeginByX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EndByX2",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EndByX2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::BeginByX2Ev",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_BeginByX2Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1X2EvIterator result;
  
  SWIG_check_num_args("TransSetX1X2Ev::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::EndByX2Ev",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_EndByX2Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1X2EvIterator * resultptr = new TransSetX1X2EvIterator((const TransSetX1X2EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1X2EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX1X2Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetX1X2Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetX1X2Ev::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetX1X2Ev::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetX1X2Ev::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetX1X2Ev::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetX1X2Ev::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::States",1,"TransSetX1X2Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_States",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetX1X2Ev::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX1X2Ev_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::SuccessorStates(Idx) const\n"
    "    TransSetX1X2Ev::SuccessorStates(StateSet const &) const\n"
    "    TransSetX1X2Ev::SuccessorStates(Idx,Idx) const\n"
    "    TransSetX1X2Ev::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ActiveEvents",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetX1X2Ev::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ActiveEvents",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX1X2Ev::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::ActiveEvents",1,"TransSetX1X2Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX1X2Ev::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_ActiveEvents",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX1X2Ev_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetX1X2Ev::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX1X2Ev_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Str",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Str",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX1X2Ev const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) 0 ;
  TransSetX1X2EvIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX1X2Ev::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX1X2Ev::Str",1,"TransSetX1X2Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX1X2Ev::Str",2,"TransSetX1X2EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Str",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2EvIterator,0))){
    SWIG_fail_ptr("TransSetX1X2Ev_Str",2,SWIGTYPE_p_TransSetX1X2EvIterator);
  }
  
  {
    try{
      result = TransSetX1X2Ev_Str__SWIG_1((TransSetX1X2Ev const *)arg1,(TransSetX1X2EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX1X2Ev_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2EvIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX1X2Ev_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX1X2Ev_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX1X2Ev::Str(Transition const &) const\n"
    "    TransSetX1X2Ev::Str(TransSetX1X2EvIterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSetX1X2Ev(void *obj) {
TransSetX1X2Ev *arg1 = (TransSetX1X2Ev *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX1X2Ev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX1X2Ev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX1X2Ev_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX1X2Ev_methods[]= {
    { "New", _wrap_TransSetX1X2Ev_New},
    { "Copy", _wrap_TransSetX1X2Ev_Copy},
    { "Name", _wrap_TransSetX1X2Ev_Name},
    { "Clear", _wrap_TransSetX1X2Ev_Clear},
    { "Size", _wrap_TransSetX1X2Ev_Size},
    { "Empty", _wrap_TransSetX1X2Ev_Empty},
    { "Valid", _wrap_TransSetX1X2Ev_Valid},
    { "EraseSet", _wrap_TransSetX1X2Ev_EraseSet},
    { "InsertSet", _wrap_TransSetX1X2Ev_InsertSet},
    { "RestrictSet", _wrap_TransSetX1X2Ev_RestrictSet},
    { "__add", _wrap_TransSetX1X2Ev___add},
    { "__sub", _wrap_TransSetX1X2Ev___sub},
    { "__mul", _wrap_TransSetX1X2Ev___mul},
    { "__le", _wrap_TransSetX1X2Ev___le},
    { "__lt", _wrap_TransSetX1X2Ev___lt},
    { "__eq", _wrap_TransSetX1X2Ev___eq},
    { "Detach", _wrap_TransSetX1X2Ev_Detach},
    { "Lock", _wrap_TransSetX1X2Ev_Lock},
    { "EraseByX1", _wrap_TransSetX1X2Ev_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSetX1X2Ev_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSetX1X2Ev_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSetX1X2Ev_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSetX1X2Ev_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSetX1X2Ev_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSetX1X2Ev_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSetX1X2Ev_ExistsByX1},
    { "Insert", _wrap_TransSetX1X2Ev_Insert},
    { "Erase", _wrap_TransSetX1X2Ev_Erase},
    { "EraseByEv", _wrap_TransSetX1X2Ev_EraseByEv},
    { "Exists", _wrap_TransSetX1X2Ev_Exists},
    { "Find", _wrap_TransSetX1X2Ev_Find},
    { "Begin", _wrap_TransSetX1X2Ev_Begin},
    { "End", _wrap_TransSetX1X2Ev_End},
    { "BeginByEv", _wrap_TransSetX1X2Ev_BeginByEv},
    { "EndByEv", _wrap_TransSetX1X2Ev_EndByEv},
    { "BeginByEvX1", _wrap_TransSetX1X2Ev_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSetX1X2Ev_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSetX1X2Ev_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSetX1X2Ev_EndByEvX2},
    { "BeginByX2", _wrap_TransSetX1X2Ev_BeginByX2},
    { "EndByX2", _wrap_TransSetX1X2Ev_EndByX2},
    { "BeginByX2Ev", _wrap_TransSetX1X2Ev_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSetX1X2Ev_EndByX2Ev},
    { "ReSort", _wrap_TransSetX1X2Ev_ReSort},
    { "States", _wrap_TransSetX1X2Ev_States},
    { "SuccessorStates", _wrap_TransSetX1X2Ev_SuccessorStates},
    { "ActiveEvents", _wrap_TransSetX1X2Ev_ActiveEvents},
    { "Str", _wrap_TransSetX1X2Ev_Str},
    {0,0}
};
static swig_lua_method swig_TransSetX1X2Ev_meta[] = {
    { "__add", _wrap_TransSetX1X2Ev___add},
    { "__sub", _wrap_TransSetX1X2Ev___sub},
    { "__mul", _wrap_TransSetX1X2Ev___mul},
    { "__le", _wrap_TransSetX1X2Ev___le},
    { "__lt", _wrap_TransSetX1X2Ev___lt},
    { "__eq", _wrap_TransSetX1X2Ev___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX1X2Ev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX1X2Ev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX1X2Ev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX1X2Ev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX1X2Ev_Sf_SwigStatic = {
    "TransSetX1X2Ev",
    swig_TransSetX1X2Ev_Sf_SwigStatic_methods,
    swig_TransSetX1X2Ev_Sf_SwigStatic_attributes,
    swig_TransSetX1X2Ev_Sf_SwigStatic_constants,
    swig_TransSetX1X2Ev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX1X2Ev_bases[] = {0,0};
static const char *swig_TransSetX1X2Ev_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSetX1X2Ev = { "TransSetX1X2Ev", "TransSetX1X2Ev", &SWIGTYPE_p_TransSetX1X2Ev,_proxy__wrap_new_TransSetX1X2Ev, swig_delete_TransSetX1X2Ev, swig_TransSetX1X2Ev_methods, swig_TransSetX1X2Ev_attributes, &swig_TransSetX1X2Ev_Sf_SwigStatic, swig_TransSetX1X2Ev_meta, swig_TransSetX1X2Ev_bases, swig_TransSetX1X2Ev_base_names };

static int _wrap_new_TransSetX2EvX1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",0,0)
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::TransSetX2EvX1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2EvX1::TransSetX2EvX1",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSetX2EvX1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)new TransSetX2EvX1((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2EvX1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX2EvX1__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2EvX1__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX2EvX1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::TransSetX2EvX1()\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetX1EvX2 const &)\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetX1X2Ev const &)\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetX2EvX1 const &)\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetX2X1Ev const &)\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetEvX1X2 const &)\n"
    "    TransSetX2EvX1::TransSetX2EvX1(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::New",1,"TransSetX2EvX1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_New",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *result = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Copy",1,"TransSetX2EvX1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Copy",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX2EvX1 *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2EvX1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2EvX1::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Name",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Name",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Name",1,"TransSetX2EvX1 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX2EvX1::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Name",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2EvX1_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Name() const\n"
    "    TransSetX2EvX1::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Clear",1,"TransSetX2EvX1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Clear",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2EvX1::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Size",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Size",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (Idx)((TransSetX2EvX1 const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Empty",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Empty",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Valid",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Valid",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Insert",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Insert",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Erase",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Exists",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Exists",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Begin",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Begin",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::End",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_End",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1Iterator *arg2 = 0 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Erase",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Erase",2,"TransSetX2EvX1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",2,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetX2EvX1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Find",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Find",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseSet",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseSet",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseSet",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseSet",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::InsertSet",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::InsertSet",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_InsertSet",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_InsertSet",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::RestrictSet",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::RestrictSet",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_RestrictSet",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_RestrictSet",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  TransSetX2EvX1 result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator +",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator +",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___add",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___add",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->operator +((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1 * resultptr = new TransSetX2EvX1((const TransSetX2EvX1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  TransSetX2EvX1 result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator -",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator -",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___sub",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___sub",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->operator -((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1 * resultptr = new TransSetX2EvX1((const TransSetX2EvX1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  TransSetX2EvX1 result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator *",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator *",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___mul",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___mul",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->operator *((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1 * resultptr = new TransSetX2EvX1((const TransSetX2EvX1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator <=",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator <=",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___le",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___le",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->operator <=((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator <",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator <",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___lt",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___lt",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (bool)TransSetX2EvX1_operator_Sl_((TransSetX2EvX1 const *)arg1,(TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::operator ==",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::operator ==",2,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___eq",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1___eq",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->operator ==((TransSetX2EvX1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Detach",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Detach",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Lock",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Lock",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Insert",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Insert",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Erase",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Find",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Find",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByX1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1Ev",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByX1Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByX2",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByEv",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByEv",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1OrX2",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByX1OrX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::RestrictStates",1,"TransSetX2EvX1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_RestrictStates",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2EvX1_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Exists",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Exists",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1OrX2",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1Ev",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ExistsByX1Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ExistsByX1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX2EvX1 const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Insert",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2EvX1::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Insert",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2EvX1_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Insert(Transition const &)\n"
    "    TransSetX2EvX1::Insert(Idx,Idx,Idx)\n"
    "    TransSetX2EvX1::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Erase",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2EvX1::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Erase",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2EvX1_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Erase(Transition const &)\n"
    "    TransSetX2EvX1::Erase(TransSetX2EvX1Iterator const &)\n"
    "    TransSetX2EvX1::Erase(Idx,Idx,Idx)\n"
    "    TransSetX2EvX1::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX2EvX1::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EraseByEv",1,"TransSetX2EvX1 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX2EvX1::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EraseByEv",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetX2EvX1_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::EraseByEv(Idx)\n"
    "    TransSetX2EvX1::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2EvX1::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Exists",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2EvX1::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Exists",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2EvX1_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Exists(Transition const &) const\n"
    "    TransSetX2EvX1::Exists(Idx,Idx,Idx) const\n"
    "    TransSetX2EvX1::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Find",1,"TransSetX2EvX1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2EvX1::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2EvX1::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Find",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetX2EvX1_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2EvX1_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Find(Transition const &) const\n"
    "    TransSetX2EvX1::Find(Idx,Idx,Idx) const\n"
    "    TransSetX2EvX1::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Begin",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Begin",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::End",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_End",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Begin",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Begin",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2EvX1_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2EvX1_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Begin() const\n"
    "    TransSetX2EvX1::Begin(Idx) const\n"
    "    TransSetX2EvX1::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::End",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_End",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2EvX1_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2EvX1_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::End() const\n"
    "    TransSetX2EvX1::End(Idx) const\n"
    "    TransSetX2EvX1::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::BeginByEv",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_BeginByEv",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EndByEv",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EndByEv",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX1",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_BeginByEvX1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX1",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EndByEvX1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX2",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_BeginByEvX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX2",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EndByEvX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::BeginByX2",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_BeginByX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EndByX2",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EndByX2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::BeginByX2Ev",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_BeginByX2Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2EvX1Iterator result;
  
  SWIG_check_num_args("TransSetX2EvX1::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::EndByX2Ev",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_EndByX2Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2EvX1Iterator * resultptr = new TransSetX2EvX1Iterator((const TransSetX2EvX1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2EvX1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2EvX1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ReSort",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetX2EvX1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetX2EvX1::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetX2EvX1::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetX2EvX1::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetX2EvX1::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetX2EvX1::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::States",1,"TransSetX2EvX1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_States",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetX2EvX1::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSetX2EvX1_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX2EvX1_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2EvX1_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::SuccessorStates(Idx) const\n"
    "    TransSetX2EvX1::SuccessorStates(StateSet const &) const\n"
    "    TransSetX2EvX1::SuccessorStates(Idx,Idx) const\n"
    "    TransSetX2EvX1::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ActiveEvents",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetX2EvX1::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ActiveEvents",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX2EvX1::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::ActiveEvents",1,"TransSetX2EvX1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2EvX1::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_ActiveEvents",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX2EvX1_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetX2EvX1::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2EvX1_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2EvX1::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Str",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Str",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX2EvX1 const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) 0 ;
  TransSetX2EvX1Iterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2EvX1::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2EvX1::Str",1,"TransSetX2EvX1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2EvX1::Str",2,"TransSetX2EvX1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Str",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1Iterator,0))){
    SWIG_fail_ptr("TransSetX2EvX1_Str",2,SWIGTYPE_p_TransSetX2EvX1Iterator);
  }
  
  {
    try{
      result = TransSetX2EvX1_Str__SWIG_1((TransSetX2EvX1 const *)arg1,(TransSetX2EvX1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2EvX1_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2EvX1_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2EvX1_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2EvX1::Str(Transition const &) const\n"
    "    TransSetX2EvX1::Str(TransSetX2EvX1Iterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSetX2EvX1(void *obj) {
TransSetX2EvX1 *arg1 = (TransSetX2EvX1 *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX2EvX1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX2EvX1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX2EvX1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX2EvX1_methods[]= {
    { "New", _wrap_TransSetX2EvX1_New},
    { "Copy", _wrap_TransSetX2EvX1_Copy},
    { "Name", _wrap_TransSetX2EvX1_Name},
    { "Clear", _wrap_TransSetX2EvX1_Clear},
    { "Size", _wrap_TransSetX2EvX1_Size},
    { "Empty", _wrap_TransSetX2EvX1_Empty},
    { "Valid", _wrap_TransSetX2EvX1_Valid},
    { "EraseSet", _wrap_TransSetX2EvX1_EraseSet},
    { "InsertSet", _wrap_TransSetX2EvX1_InsertSet},
    { "RestrictSet", _wrap_TransSetX2EvX1_RestrictSet},
    { "__add", _wrap_TransSetX2EvX1___add},
    { "__sub", _wrap_TransSetX2EvX1___sub},
    { "__mul", _wrap_TransSetX2EvX1___mul},
    { "__le", _wrap_TransSetX2EvX1___le},
    { "__lt", _wrap_TransSetX2EvX1___lt},
    { "__eq", _wrap_TransSetX2EvX1___eq},
    { "Detach", _wrap_TransSetX2EvX1_Detach},
    { "Lock", _wrap_TransSetX2EvX1_Lock},
    { "EraseByX1", _wrap_TransSetX2EvX1_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSetX2EvX1_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSetX2EvX1_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSetX2EvX1_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSetX2EvX1_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSetX2EvX1_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSetX2EvX1_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSetX2EvX1_ExistsByX1},
    { "Insert", _wrap_TransSetX2EvX1_Insert},
    { "Erase", _wrap_TransSetX2EvX1_Erase},
    { "EraseByEv", _wrap_TransSetX2EvX1_EraseByEv},
    { "Exists", _wrap_TransSetX2EvX1_Exists},
    { "Find", _wrap_TransSetX2EvX1_Find},
    { "Begin", _wrap_TransSetX2EvX1_Begin},
    { "End", _wrap_TransSetX2EvX1_End},
    { "BeginByEv", _wrap_TransSetX2EvX1_BeginByEv},
    { "EndByEv", _wrap_TransSetX2EvX1_EndByEv},
    { "BeginByEvX1", _wrap_TransSetX2EvX1_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSetX2EvX1_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSetX2EvX1_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSetX2EvX1_EndByEvX2},
    { "BeginByX2", _wrap_TransSetX2EvX1_BeginByX2},
    { "EndByX2", _wrap_TransSetX2EvX1_EndByX2},
    { "BeginByX2Ev", _wrap_TransSetX2EvX1_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSetX2EvX1_EndByX2Ev},
    { "ReSort", _wrap_TransSetX2EvX1_ReSort},
    { "States", _wrap_TransSetX2EvX1_States},
    { "SuccessorStates", _wrap_TransSetX2EvX1_SuccessorStates},
    { "ActiveEvents", _wrap_TransSetX2EvX1_ActiveEvents},
    { "Str", _wrap_TransSetX2EvX1_Str},
    {0,0}
};
static swig_lua_method swig_TransSetX2EvX1_meta[] = {
    { "__add", _wrap_TransSetX2EvX1___add},
    { "__sub", _wrap_TransSetX2EvX1___sub},
    { "__mul", _wrap_TransSetX2EvX1___mul},
    { "__le", _wrap_TransSetX2EvX1___le},
    { "__lt", _wrap_TransSetX2EvX1___lt},
    { "__eq", _wrap_TransSetX2EvX1___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX2EvX1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX2EvX1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX2EvX1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX2EvX1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX2EvX1_Sf_SwigStatic = {
    "TransSetX2EvX1",
    swig_TransSetX2EvX1_Sf_SwigStatic_methods,
    swig_TransSetX2EvX1_Sf_SwigStatic_attributes,
    swig_TransSetX2EvX1_Sf_SwigStatic_constants,
    swig_TransSetX2EvX1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX2EvX1_bases[] = {0,0};
static const char *swig_TransSetX2EvX1_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSetX2EvX1 = { "TransSetX2EvX1", "TransSetX2EvX1", &SWIGTYPE_p_TransSetX2EvX1,_proxy__wrap_new_TransSetX2EvX1, swig_delete_TransSetX2EvX1, swig_TransSetX2EvX1_methods, swig_TransSetX2EvX1_attributes, &swig_TransSetX2EvX1_Sf_SwigStatic, swig_TransSetX2EvX1_meta, swig_TransSetX2EvX1_bases, swig_TransSetX2EvX1_base_names };

static int _wrap_new_TransSetX2X1Ev__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",0,0)
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::TransSetX2X1Ev",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetX2X1Ev::TransSetX2X1Ev",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSetX2X1Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)new TransSetX2X1Ev((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetX2X1Ev(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetX2X1Ev__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetX2X1Ev__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetX2X1Ev'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev()\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetX1EvX2 const &)\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetX1X2Ev const &)\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetX2EvX1 const &)\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetX2X1Ev const &)\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetEvX1X2 const &)\n"
    "    TransSetX2X1Ev::TransSetX2X1Ev(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::New",1,"TransSetX2X1Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_New",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *result = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Copy",1,"TransSetX2X1Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Copy",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetX2X1Ev *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetX2X1Ev,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Name",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Name",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Name",1,"TransSetX2X1Ev *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Name",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2X1Ev_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Name() const\n"
    "    TransSetX2X1Ev::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Clear",1,"TransSetX2X1Ev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Clear",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Size",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Size",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (Idx)((TransSetX2X1Ev const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Empty",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Empty",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Valid",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Valid",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Insert",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Insert",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Erase",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Exists",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Exists",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Begin",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Begin",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::End",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_End",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1EvIterator *arg2 = 0 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Erase",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Erase",2,"TransSetX2X1EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",2,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetX2X1EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Find",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Find",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseSet",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseSet",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseSet",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseSet",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::InsertSet",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::InsertSet",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_InsertSet",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_InsertSet",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::RestrictSet",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::RestrictSet",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_RestrictSet",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_RestrictSet",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  TransSetX2X1Ev result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator +",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator +",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___add",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___add",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->operator +((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1Ev * resultptr = new TransSetX2X1Ev((const TransSetX2X1Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  TransSetX2X1Ev result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator -",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator -",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___sub",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___sub",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->operator -((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1Ev * resultptr = new TransSetX2X1Ev((const TransSetX2X1Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  TransSetX2X1Ev result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator *",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator *",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___mul",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___mul",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->operator *((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1Ev * resultptr = new TransSetX2X1Ev((const TransSetX2X1Ev &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1Ev,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator <=",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator <=",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___le",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___le",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->operator <=((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator <",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator <",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___lt",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___lt",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (bool)TransSetX2X1Ev_operator_Sl_((TransSetX2X1Ev const *)arg1,(TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::operator ==",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::operator ==",2,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___eq",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev___eq",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->operator ==((TransSetX2X1Ev const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Detach",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Detach",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Lock",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Lock",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Insert",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Insert",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Erase",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Find",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Find",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByX1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1Ev",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByX1Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX2",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByEv",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByEv",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1OrX2",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByX1OrX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::RestrictStates",1,"TransSetX2X1Ev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_RestrictStates",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Exists",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Exists",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1OrX2",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1Ev",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ExistsByX1Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ExistsByX1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetX2X1Ev const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Insert",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Insert",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2X1Ev_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Insert(Transition const &)\n"
    "    TransSetX2X1Ev::Insert(Idx,Idx,Idx)\n"
    "    TransSetX2X1Ev::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Erase",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Erase",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2X1Ev_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1EvIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Erase(Transition const &)\n"
    "    TransSetX2X1Ev::Erase(TransSetX2X1EvIterator const &)\n"
    "    TransSetX2X1Ev::Erase(Idx,Idx,Idx)\n"
    "    TransSetX2X1Ev::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EraseByEv",1,"TransSetX2X1Ev *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EraseByEv",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetX2X1Ev_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::EraseByEv(Idx)\n"
    "    TransSetX2X1Ev::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Exists",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Exists",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetX2X1Ev_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Exists(Transition const &) const\n"
    "    TransSetX2X1Ev::Exists(Idx,Idx,Idx) const\n"
    "    TransSetX2X1Ev::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Find",1,"TransSetX2X1Ev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetX2X1Ev::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Find",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetX2X1Ev_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetX2X1Ev_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Find(Transition const &) const\n"
    "    TransSetX2X1Ev::Find(Idx,Idx,Idx) const\n"
    "    TransSetX2X1Ev::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Begin",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Begin",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::End",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_End",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Begin",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Begin",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2X1Ev_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2X1Ev_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Begin() const\n"
    "    TransSetX2X1Ev::Begin(Idx) const\n"
    "    TransSetX2X1Ev::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::End",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_End",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetX2X1Ev_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2X1Ev_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::End() const\n"
    "    TransSetX2X1Ev::End(Idx) const\n"
    "    TransSetX2X1Ev::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEv",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_BeginByEv",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EndByEv",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EndByEv",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX1",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_BeginByEvX1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX1",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EndByEvX1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX2",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_BeginByEvX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX2",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EndByEvX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::BeginByX2",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_BeginByX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EndByX2",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EndByX2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::BeginByX2Ev",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_BeginByX2Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX2X1EvIterator result;
  
  SWIG_check_num_args("TransSetX2X1Ev::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::EndByX2Ev",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_EndByX2Ev",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX2X1EvIterator * resultptr = new TransSetX2X1EvIterator((const TransSetX2X1EvIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX2X1EvIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetX2X1Ev::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetX2X1Ev const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetX2X1Ev::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetX2X1Ev::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetX2X1Ev::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetX2X1Ev::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetX2X1Ev::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::States",1,"TransSetX2X1Ev const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_States",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetX2X1Ev::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetX2X1Ev_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::SuccessorStates(Idx) const\n"
    "    TransSetX2X1Ev::SuccessorStates(StateSet const &) const\n"
    "    TransSetX2X1Ev::SuccessorStates(Idx,Idx) const\n"
    "    TransSetX2X1Ev::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ActiveEvents",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetX2X1Ev::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ActiveEvents",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetX2X1Ev::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::ActiveEvents",1,"TransSetX2X1Ev const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetX2X1Ev::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_ActiveEvents",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetX2X1Ev_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetX2X1Ev::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetX2X1Ev_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Str",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Str",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetX2X1Ev const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) 0 ;
  TransSetX2X1EvIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetX2X1Ev::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetX2X1Ev::Str",1,"TransSetX2X1Ev const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetX2X1Ev::Str",2,"TransSetX2X1EvIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Str",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1EvIterator,0))){
    SWIG_fail_ptr("TransSetX2X1Ev_Str",2,SWIGTYPE_p_TransSetX2X1EvIterator);
  }
  
  {
    try{
      result = TransSetX2X1Ev_Str__SWIG_1((TransSetX2X1Ev const *)arg1,(TransSetX2X1EvIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetX2X1Ev_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1EvIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetX2X1Ev_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetX2X1Ev_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetX2X1Ev::Str(Transition const &) const\n"
    "    TransSetX2X1Ev::Str(TransSetX2X1EvIterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSetX2X1Ev(void *obj) {
TransSetX2X1Ev *arg1 = (TransSetX2X1Ev *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetX2X1Ev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetX2X1Ev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetX2X1Ev_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetX2X1Ev_methods[]= {
    { "New", _wrap_TransSetX2X1Ev_New},
    { "Copy", _wrap_TransSetX2X1Ev_Copy},
    { "Name", _wrap_TransSetX2X1Ev_Name},
    { "Clear", _wrap_TransSetX2X1Ev_Clear},
    { "Size", _wrap_TransSetX2X1Ev_Size},
    { "Empty", _wrap_TransSetX2X1Ev_Empty},
    { "Valid", _wrap_TransSetX2X1Ev_Valid},
    { "EraseSet", _wrap_TransSetX2X1Ev_EraseSet},
    { "InsertSet", _wrap_TransSetX2X1Ev_InsertSet},
    { "RestrictSet", _wrap_TransSetX2X1Ev_RestrictSet},
    { "__add", _wrap_TransSetX2X1Ev___add},
    { "__sub", _wrap_TransSetX2X1Ev___sub},
    { "__mul", _wrap_TransSetX2X1Ev___mul},
    { "__le", _wrap_TransSetX2X1Ev___le},
    { "__lt", _wrap_TransSetX2X1Ev___lt},
    { "__eq", _wrap_TransSetX2X1Ev___eq},
    { "Detach", _wrap_TransSetX2X1Ev_Detach},
    { "Lock", _wrap_TransSetX2X1Ev_Lock},
    { "EraseByX1", _wrap_TransSetX2X1Ev_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSetX2X1Ev_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSetX2X1Ev_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSetX2X1Ev_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSetX2X1Ev_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSetX2X1Ev_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSetX2X1Ev_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSetX2X1Ev_ExistsByX1},
    { "Insert", _wrap_TransSetX2X1Ev_Insert},
    { "Erase", _wrap_TransSetX2X1Ev_Erase},
    { "EraseByEv", _wrap_TransSetX2X1Ev_EraseByEv},
    { "Exists", _wrap_TransSetX2X1Ev_Exists},
    { "Find", _wrap_TransSetX2X1Ev_Find},
    { "Begin", _wrap_TransSetX2X1Ev_Begin},
    { "End", _wrap_TransSetX2X1Ev_End},
    { "BeginByEv", _wrap_TransSetX2X1Ev_BeginByEv},
    { "EndByEv", _wrap_TransSetX2X1Ev_EndByEv},
    { "BeginByEvX1", _wrap_TransSetX2X1Ev_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSetX2X1Ev_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSetX2X1Ev_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSetX2X1Ev_EndByEvX2},
    { "BeginByX2", _wrap_TransSetX2X1Ev_BeginByX2},
    { "EndByX2", _wrap_TransSetX2X1Ev_EndByX2},
    { "BeginByX2Ev", _wrap_TransSetX2X1Ev_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSetX2X1Ev_EndByX2Ev},
    { "ReSort", _wrap_TransSetX2X1Ev_ReSort},
    { "States", _wrap_TransSetX2X1Ev_States},
    { "SuccessorStates", _wrap_TransSetX2X1Ev_SuccessorStates},
    { "ActiveEvents", _wrap_TransSetX2X1Ev_ActiveEvents},
    { "Str", _wrap_TransSetX2X1Ev_Str},
    {0,0}
};
static swig_lua_method swig_TransSetX2X1Ev_meta[] = {
    { "__add", _wrap_TransSetX2X1Ev___add},
    { "__sub", _wrap_TransSetX2X1Ev___sub},
    { "__mul", _wrap_TransSetX2X1Ev___mul},
    { "__le", _wrap_TransSetX2X1Ev___le},
    { "__lt", _wrap_TransSetX2X1Ev___lt},
    { "__eq", _wrap_TransSetX2X1Ev___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetX2X1Ev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetX2X1Ev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetX2X1Ev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetX2X1Ev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetX2X1Ev_Sf_SwigStatic = {
    "TransSetX2X1Ev",
    swig_TransSetX2X1Ev_Sf_SwigStatic_methods,
    swig_TransSetX2X1Ev_Sf_SwigStatic_attributes,
    swig_TransSetX2X1Ev_Sf_SwigStatic_constants,
    swig_TransSetX2X1Ev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetX2X1Ev_bases[] = {0,0};
static const char *swig_TransSetX2X1Ev_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSetX2X1Ev = { "TransSetX2X1Ev", "TransSetX2X1Ev", &SWIGTYPE_p_TransSetX2X1Ev,_proxy__wrap_new_TransSetX2X1Ev, swig_delete_TransSetX2X1Ev, swig_TransSetX2X1Ev_methods, swig_TransSetX2X1Ev_attributes, &swig_TransSetX2X1Ev_Sf_SwigStatic, swig_TransSetX2X1Ev_meta, swig_TransSetX2X1Ev_bases, swig_TransSetX2X1Ev_base_names };

static int _wrap_new_TransSetEvX1X2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",0,0)
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::TransSetEvX1X2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX1X2::TransSetEvX1X2",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSetEvX1X2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)new TransSetEvX1X2((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX1X2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetEvX1X2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX1X2__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetEvX1X2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::TransSetEvX1X2()\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetX1EvX2 const &)\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetX1X2Ev const &)\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetX2EvX1 const &)\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetX2X1Ev const &)\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetEvX1X2 const &)\n"
    "    TransSetEvX1X2::TransSetEvX1X2(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::New",1,"TransSetEvX1X2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_New",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Copy",1,"TransSetEvX1X2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Copy",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetEvX1X2 *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX1X2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX1X2::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Name",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Name",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Name",1,"TransSetEvX1X2 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetEvX1X2::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Name",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX1X2_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Name() const\n"
    "    TransSetEvX1X2::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Clear",1,"TransSetEvX1X2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Clear",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX1X2::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Size",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Size",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (Idx)((TransSetEvX1X2 const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Empty",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Empty",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Valid",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Valid",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Insert",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Insert",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Erase",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Exists",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Exists",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Begin",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Begin",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::End",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_End",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2Iterator *arg2 = 0 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Erase",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Erase",2,"TransSetEvX1X2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",2,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetEvX1X2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Find",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Find",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseSet",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseSet",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseSet",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseSet",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::InsertSet",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::InsertSet",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_InsertSet",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_InsertSet",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::RestrictSet",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::RestrictSet",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_RestrictSet",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_RestrictSet",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  TransSetEvX1X2 result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator +",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator +",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___add",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___add",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->operator +((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2 * resultptr = new TransSetEvX1X2((const TransSetEvX1X2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  TransSetEvX1X2 result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator -",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator -",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___sub",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___sub",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->operator -((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2 * resultptr = new TransSetEvX1X2((const TransSetEvX1X2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  TransSetEvX1X2 result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator *",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator *",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___mul",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___mul",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->operator *((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2 * resultptr = new TransSetEvX1X2((const TransSetEvX1X2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator <=",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator <=",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___le",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___le",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->operator <=((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator <",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator <",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___lt",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___lt",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (bool)TransSetEvX1X2_operator_Sl_((TransSetEvX1X2 const *)arg1,(TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::operator ==",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::operator ==",2,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___eq",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2___eq",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->operator ==((TransSetEvX1X2 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Detach",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Detach",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Lock",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Lock",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Insert",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Insert",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Erase",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Find",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Find",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByX1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1Ev",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByX1Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByX2",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByEv",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByEv",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1OrX2",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByX1OrX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::RestrictStates",1,"TransSetEvX1X2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_RestrictStates",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX1X2_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Exists",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Exists",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1OrX2",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1Ev",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ExistsByX1Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ExistsByX1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetEvX1X2 const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Insert",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX1X2::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Insert",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX1X2_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Insert(Transition const &)\n"
    "    TransSetEvX1X2::Insert(Idx,Idx,Idx)\n"
    "    TransSetEvX1X2::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Erase",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX1X2::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Erase",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX1X2_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Erase(Transition const &)\n"
    "    TransSetEvX1X2::Erase(TransSetEvX1X2Iterator const &)\n"
    "    TransSetEvX1X2::Erase(Idx,Idx,Idx)\n"
    "    TransSetEvX1X2::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetEvX1X2::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EraseByEv",1,"TransSetEvX1X2 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetEvX1X2::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EraseByEv",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetEvX1X2_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::EraseByEv(Idx)\n"
    "    TransSetEvX1X2::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX1X2::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Exists",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX1X2::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Exists",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX1X2_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Exists(Transition const &) const\n"
    "    TransSetEvX1X2::Exists(Idx,Idx,Idx) const\n"
    "    TransSetEvX1X2::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Find",1,"TransSetEvX1X2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX1X2::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX1X2::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Find",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetEvX1X2_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX1X2_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Find(Transition const &) const\n"
    "    TransSetEvX1X2::Find(Idx,Idx,Idx) const\n"
    "    TransSetEvX1X2::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Begin",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Begin",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::End",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_End",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Begin",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Begin",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX1X2_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX1X2_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Begin() const\n"
    "    TransSetEvX1X2::Begin(Idx) const\n"
    "    TransSetEvX1X2::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::End",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_End",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX1X2_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX1X2_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::End() const\n"
    "    TransSetEvX1X2::End(Idx) const\n"
    "    TransSetEvX1X2::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::BeginByEv",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_BeginByEv",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EndByEv",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EndByEv",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX1",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_BeginByEvX1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX1",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EndByEvX1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX2",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_BeginByEvX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX2",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EndByEvX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::BeginByX2",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_BeginByX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EndByX2",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EndByX2",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::BeginByX2Ev",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_BeginByX2Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX1X2Iterator result;
  
  SWIG_check_num_args("TransSetEvX1X2::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::EndByX2Ev",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_EndByX2Ev",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX1X2Iterator * resultptr = new TransSetEvX1X2Iterator((const TransSetEvX1X2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX1X2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX1X2::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ReSort",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetEvX1X2 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetEvX1X2::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetEvX1X2::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetEvX1X2::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetEvX1X2::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetEvX1X2::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::States",1,"TransSetEvX1X2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_States",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetEvX1X2::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSetEvX1X2_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetEvX1X2_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX1X2_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::SuccessorStates(Idx) const\n"
    "    TransSetEvX1X2::SuccessorStates(StateSet const &) const\n"
    "    TransSetEvX1X2::SuccessorStates(Idx,Idx) const\n"
    "    TransSetEvX1X2::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ActiveEvents",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetEvX1X2::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ActiveEvents",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetEvX1X2::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::ActiveEvents",1,"TransSetEvX1X2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX1X2::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_ActiveEvents",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetEvX1X2_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetEvX1X2::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX1X2_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX1X2::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Str",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Str",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetEvX1X2 const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) 0 ;
  TransSetEvX1X2Iterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX1X2::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX1X2::Str",1,"TransSetEvX1X2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX1X2::Str",2,"TransSetEvX1X2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Str",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2Iterator,0))){
    SWIG_fail_ptr("TransSetEvX1X2_Str",2,SWIGTYPE_p_TransSetEvX1X2Iterator);
  }
  
  {
    try{
      result = TransSetEvX1X2_Str__SWIG_1((TransSetEvX1X2 const *)arg1,(TransSetEvX1X2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX1X2_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX1X2_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX1X2_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX1X2::Str(Transition const &) const\n"
    "    TransSetEvX1X2::Str(TransSetEvX1X2Iterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSetEvX1X2(void *obj) {
TransSetEvX1X2 *arg1 = (TransSetEvX1X2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetEvX1X2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetEvX1X2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetEvX1X2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetEvX1X2_methods[]= {
    { "New", _wrap_TransSetEvX1X2_New},
    { "Copy", _wrap_TransSetEvX1X2_Copy},
    { "Name", _wrap_TransSetEvX1X2_Name},
    { "Clear", _wrap_TransSetEvX1X2_Clear},
    { "Size", _wrap_TransSetEvX1X2_Size},
    { "Empty", _wrap_TransSetEvX1X2_Empty},
    { "Valid", _wrap_TransSetEvX1X2_Valid},
    { "EraseSet", _wrap_TransSetEvX1X2_EraseSet},
    { "InsertSet", _wrap_TransSetEvX1X2_InsertSet},
    { "RestrictSet", _wrap_TransSetEvX1X2_RestrictSet},
    { "__add", _wrap_TransSetEvX1X2___add},
    { "__sub", _wrap_TransSetEvX1X2___sub},
    { "__mul", _wrap_TransSetEvX1X2___mul},
    { "__le", _wrap_TransSetEvX1X2___le},
    { "__lt", _wrap_TransSetEvX1X2___lt},
    { "__eq", _wrap_TransSetEvX1X2___eq},
    { "Detach", _wrap_TransSetEvX1X2_Detach},
    { "Lock", _wrap_TransSetEvX1X2_Lock},
    { "EraseByX1", _wrap_TransSetEvX1X2_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSetEvX1X2_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSetEvX1X2_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSetEvX1X2_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSetEvX1X2_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSetEvX1X2_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSetEvX1X2_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSetEvX1X2_ExistsByX1},
    { "Insert", _wrap_TransSetEvX1X2_Insert},
    { "Erase", _wrap_TransSetEvX1X2_Erase},
    { "EraseByEv", _wrap_TransSetEvX1X2_EraseByEv},
    { "Exists", _wrap_TransSetEvX1X2_Exists},
    { "Find", _wrap_TransSetEvX1X2_Find},
    { "Begin", _wrap_TransSetEvX1X2_Begin},
    { "End", _wrap_TransSetEvX1X2_End},
    { "BeginByEv", _wrap_TransSetEvX1X2_BeginByEv},
    { "EndByEv", _wrap_TransSetEvX1X2_EndByEv},
    { "BeginByEvX1", _wrap_TransSetEvX1X2_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSetEvX1X2_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSetEvX1X2_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSetEvX1X2_EndByEvX2},
    { "BeginByX2", _wrap_TransSetEvX1X2_BeginByX2},
    { "EndByX2", _wrap_TransSetEvX1X2_EndByX2},
    { "BeginByX2Ev", _wrap_TransSetEvX1X2_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSetEvX1X2_EndByX2Ev},
    { "ReSort", _wrap_TransSetEvX1X2_ReSort},
    { "States", _wrap_TransSetEvX1X2_States},
    { "SuccessorStates", _wrap_TransSetEvX1X2_SuccessorStates},
    { "ActiveEvents", _wrap_TransSetEvX1X2_ActiveEvents},
    { "Str", _wrap_TransSetEvX1X2_Str},
    {0,0}
};
static swig_lua_method swig_TransSetEvX1X2_meta[] = {
    { "__add", _wrap_TransSetEvX1X2___add},
    { "__sub", _wrap_TransSetEvX1X2___sub},
    { "__mul", _wrap_TransSetEvX1X2___mul},
    { "__le", _wrap_TransSetEvX1X2___le},
    { "__lt", _wrap_TransSetEvX1X2___lt},
    { "__eq", _wrap_TransSetEvX1X2___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetEvX1X2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetEvX1X2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetEvX1X2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetEvX1X2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetEvX1X2_Sf_SwigStatic = {
    "TransSetEvX1X2",
    swig_TransSetEvX1X2_Sf_SwigStatic_methods,
    swig_TransSetEvX1X2_Sf_SwigStatic_attributes,
    swig_TransSetEvX1X2_Sf_SwigStatic_constants,
    swig_TransSetEvX1X2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetEvX1X2_bases[] = {0,0};
static const char *swig_TransSetEvX1X2_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSetEvX1X2 = { "TransSetEvX1X2", "TransSetEvX1X2", &SWIGTYPE_p_TransSetEvX1X2,_proxy__wrap_new_TransSetEvX1X2, swig_delete_TransSetEvX1X2, swig_TransSetEvX1X2_methods, swig_TransSetEvX1X2_attributes, &swig_TransSetEvX1X2_Sf_SwigStatic, swig_TransSetEvX1X2_meta, swig_TransSetEvX1X2_bases, swig_TransSetEvX1X2_base_names };

static int _wrap_new_TransSetEvX2X1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",0,0)
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1EvX2 *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetX1EvX2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetX1EvX2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX1X2Ev *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetX1X2Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetX1X2Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2EvX1 *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetX2EvX1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetX2EvX1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetX2X1Ev *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetX2X1Ev const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetX2X1Ev const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX1X2 *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetEvX1X2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetEvX1X2 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::TransSetEvX2X1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TransSetEvX2X1::TransSetEvX2X1",1,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("new_TransSetEvX2X1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)new TransSetEvX2X1((TransSetEvX2X1 const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransSetEvX2X1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransSetEvX2X1__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TransSetEvX2X1__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransSetEvX2X1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::TransSetEvX2X1()\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetX1EvX2 const &)\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetX1X2Ev const &)\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetX2EvX1 const &)\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetX2X1Ev const &)\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetEvX1X2 const &)\n"
    "    TransSetEvX2X1::TransSetEvX2X1(TransSetEvX2X1 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_New(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::New",1,"TransSetEvX2X1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_New",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *result = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Copy",1,"TransSetEvX2X1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Copy",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (TransSetEvX2X1 *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransSetEvX2X1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX2X1::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Name",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Name",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Name",1,"TransSetEvX2X1 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetEvX2X1::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Name",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX2X1_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Name() const\n"
    "    TransSetEvX2X1::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Clear",1,"TransSetEvX2X1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Clear",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Size(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TransSetEvX2X1::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Size",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Size",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (Idx)((TransSetEvX2X1 const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Empty",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Empty",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Valid(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Valid",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Valid",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Valid",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Valid",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->Valid((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Insert",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Insert",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Insert",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Insert",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Insert((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Erase",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Erase",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->Erase((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Exists",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Exists",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Exists",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Exists",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->Exists((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Begin",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Begin",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Begin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_End__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::End",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_End",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->End();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1Iterator *arg2 = 0 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Erase",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Erase",2,"TransSetEvX2X1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",2,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = (arg1)->Erase((TransSetEvX2X1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Find",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Find",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Find",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Find",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Find((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseSet",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseSet",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseSet",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseSet",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      (arg1)->EraseSet((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_InsertSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::InsertSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::InsertSet",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::InsertSet",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_InsertSet",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_InsertSet",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      (arg1)->InsertSet((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_RestrictSet(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::RestrictSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::RestrictSet",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::RestrictSet",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_RestrictSet",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_RestrictSet",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      (arg1)->RestrictSet((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___add(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  TransSetEvX2X1 result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator +",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator +",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___add",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___add",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->operator +((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1 * resultptr = new TransSetEvX2X1((const TransSetEvX2X1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___sub(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  TransSetEvX2X1 result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator -",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator -",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___sub",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___sub",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->operator -((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1 * resultptr = new TransSetEvX2X1((const TransSetEvX2X1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___mul(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  TransSetEvX2X1 result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator *",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator *",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___mul",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___mul",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->operator *((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1 * resultptr = new TransSetEvX2X1((const TransSetEvX2X1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___le(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator <=",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator <=",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___le",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___le",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->operator <=((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___lt(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator <",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator <",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___lt",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___lt",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (bool)TransSetEvX2X1_operator_Sl_((TransSetEvX2X1 const *)arg1,(TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1___eq(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::operator ==",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::operator ==",2,"TransSetEvX2X1 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___eq",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1___eq",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->operator ==((TransSetEvX2X1 const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Detach(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::Detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Detach",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Detach",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->Detach();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Lock(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::Lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Lock",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Lock",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->Lock();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Insert",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Insert",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::Insert",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Insert",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Insert(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Erase",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Erase",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::Erase",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->Erase(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Find",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Find",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::Find",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Find",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Find(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByX1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1Ev",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByX1Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->EraseByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByX2",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByEv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByEv",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByEv",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1OrX2",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByX1OrX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->EraseByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::RestrictStates",1,"TransSetEvX2X1 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_RestrictStates",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX2X1_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Exists",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Exists",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::Exists",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Exists",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->Exists(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ExistsByX1OrX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::ExistsByX1OrX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1OrX2",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1OrX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ExistsByX1OrX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->ExistsByX1OrX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ExistsByX1Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::ExistsByX1Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1Ev",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ExistsByX1Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->ExistsByX1Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ExistsByX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::ExistsByX1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::ExistsByX1",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ExistsByX1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TransSetEvX2X1 const *)arg1)->ExistsByX1(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Insert",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Insert",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX2X1::Insert",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Insert",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Insert",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX2X1_Insert__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Insert__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Insert__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Insert(Transition const &)\n"
    "    TransSetEvX2X1::Insert(Idx,Idx,Idx)\n"
    "    TransSetEvX2X1::Insert(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Erase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Erase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Erase",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Erase",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX2X1::Erase",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Erase",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Erase",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX2X1_Erase__SWIG_3(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Erase(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Erase__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Erase__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Erase__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Erase__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Erase(Transition const &)\n"
    "    TransSetEvX2X1::Erase(TransSetEvX2X1Iterator const &)\n"
    "    TransSetEvX2X1::Erase(Idx,Idx,Idx)\n"
    "    TransSetEvX2X1::Erase(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_EraseByEv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TransSetEvX2X1::EraseByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EraseByEv",1,"TransSetEvX2X1 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TransSetEvX2X1::EraseByEv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EraseByEv",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      TransSetEvX2X1_EraseByEv__SWIG_1(arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EraseByEv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_EraseByEv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_EraseByEv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_EraseByEv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::EraseByEv(Idx)\n"
    "    TransSetEvX2X1::EraseByEv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("TransSetEvX2X1::Exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Exists",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Exists",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX2X1::Exists",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Exists",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Exists",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)TransSetEvX2X1_Exists__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Exists(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Exists__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Exists__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Exists__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Exists(Transition const &) const\n"
    "    TransSetEvX2X1::Exists(Idx,Idx,Idx) const\n"
    "    TransSetEvX2X1::Exists(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  Idx arg4 ;
  std::string temp3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Find",1,"TransSetEvX2X1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Find",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TransSetEvX2X1::Find",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TransSetEvX2X1::Find",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Find",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = TransSetEvX2X1_Find__SWIG_2(arg1,arg2,(std::string const &)*arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Find__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Find__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransSetEvX2X1_Find__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Find(Transition const &) const\n"
    "    TransSetEvX2X1::Find(Idx,Idx,Idx) const\n"
    "    TransSetEvX2X1::Find(Idx,std::string const &,Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Begin",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Begin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Begin",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Begin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_End__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::End",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::End",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::End",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_End",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->End(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Begin",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::Begin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::Begin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Begin",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Begin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX2X1_Begin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX2X1_Begin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Begin() const\n"
    "    TransSetEvX2X1::Begin(Idx) const\n"
    "    TransSetEvX2X1::Begin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_End__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::End",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::End",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::End",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::End",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_End",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->End(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_End(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TransSetEvX2X1_End__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_End__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX2X1_End__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_End'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::End() const\n"
    "    TransSetEvX2X1::End(Idx) const\n"
    "    TransSetEvX2X1::End(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_BeginByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::BeginByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::BeginByEv",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::BeginByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_BeginByEv",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->BeginByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EndByEv(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::EndByEv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EndByEv",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EndByEv",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EndByEv",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->EndByEv(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_BeginByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::BeginByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX1",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_BeginByEvX1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->BeginByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EndByEvX1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::EndByEvX1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX1",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX1",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX1",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EndByEvX1",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->EndByEvX1(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_BeginByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::BeginByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX2",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::BeginByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_BeginByEvX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->BeginByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EndByEvX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::EndByEvX2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX2",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX2",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::EndByEvX2",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EndByEvX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->EndByEvX2(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_BeginByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::BeginByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::BeginByX2",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::BeginByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_BeginByX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->BeginByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EndByX2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::EndByX2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EndByX2",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EndByX2",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EndByX2",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->EndByX2(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_BeginByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::BeginByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::BeginByX2Ev",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::BeginByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::BeginByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_BeginByX2Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->BeginByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_EndByX2Ev(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetEvX2X1Iterator result;
  
  SWIG_check_num_args("TransSetEvX2X1::EndByX2Ev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::EndByX2Ev",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::EndByX2Ev",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::EndByX2Ev",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_EndByX2Ev",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->EndByX2Ev(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetEvX2X1Iterator * resultptr = new TransSetEvX2X1Iterator((const TransSetEvX2X1Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetEvX2X1Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("TransSetEvX2X1::ReSort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ReSort",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::ReSort",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ReSort",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((TransSetEvX2X1 const *)arg1)->ReSort(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ReSort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ReSort__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_ReSort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::ReSort(TransSetX1EvX2 &) const\n"
    "    TransSetEvX2X1::ReSort(TransSetX1X2Ev &) const\n"
    "    TransSetEvX2X1::ReSort(TransSetX2EvX1 &) const\n"
    "    TransSetEvX2X1::ReSort(TransSetX2X1Ev &) const\n"
    "    TransSetEvX2X1::ReSort(TransSetEvX1X2 &) const\n"
    "    TransSetEvX2X1::ReSort(TransSetEvX2X1 &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_States(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::States",1,"TransSetEvX2X1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_States",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->States();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  StateSet *arg2 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->SuccessorStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_SuccessorStates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_SuccessorStates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  StateSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  StateSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",2,"StateSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TransSetEvX2X1::SuccessorStates",3,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",2,SWIGTYPE_p_IndexSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("TransSetEvX2X1_SuccessorStates",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->SuccessorStates((StateSet const &)*arg2,(EventSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_SuccessorStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetEvX2X1_SuccessorStates__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransSetEvX2X1_SuccessorStates__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::SuccessorStates(Idx) const\n"
    "    TransSetEvX2X1::SuccessorStates(StateSet const &) const\n"
    "    TransSetEvX2X1::SuccessorStates(Idx,Idx) const\n"
    "    TransSetEvX2X1::SuccessorStates(StateSet const &,EventSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_ActiveEvents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  SymbolTable *arg3 = (SymbolTable *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::ActiveEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ActiveEvents",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::ActiveEvents",2,"Idx");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TransSetEvX2X1::ActiveEvents",3,"SymbolTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ActiveEvents",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SymbolTable,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ActiveEvents",3,SWIGTYPE_p_SymbolTable);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->ActiveEvents(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ActiveEvents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("TransSetEvX2X1::ActiveEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::ActiveEvents",1,"TransSetEvX2X1 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransSetEvX2X1::ActiveEvents",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_ActiveEvents",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->ActiveEvents(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_ActiveEvents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_ActiveEvents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SymbolTable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransSetEvX2X1_ActiveEvents__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_ActiveEvents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::ActiveEvents(Idx,SymbolTable *) const\n"
    "    TransSetEvX2X1::ActiveEvents(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransSetEvX2X1_Str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX2X1::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Str",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Str",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Str",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Str",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((TransSetEvX2X1 const *)arg1)->Str((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) 0 ;
  TransSetEvX2X1Iterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("TransSetEvX2X1::Str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransSetEvX2X1::Str",1,"TransSetEvX2X1 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransSetEvX2X1::Str",2,"TransSetEvX2X1Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Str",1,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1Iterator,0))){
    SWIG_fail_ptr("TransSetEvX2X1_Str",2,SWIGTYPE_p_TransSetEvX2X1Iterator);
  }
  
  {
    try{
      result = TransSetEvX2X1_Str__SWIG_1((TransSetEvX2X1 const *)arg1,(TransSetEvX2X1Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransSetEvX2X1_Str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Str__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransSetEvX2X1_Str__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransSetEvX2X1_Str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TransSetEvX2X1::Str(Transition const &) const\n"
    "    TransSetEvX2X1::Str(TransSetEvX2X1Iterator const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransSetEvX2X1(void *obj) {
TransSetEvX2X1 *arg1 = (TransSetEvX2X1 *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransSetEvX2X1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransSetEvX2X1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransSetEvX2X1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransSetEvX2X1_methods[]= {
    { "New", _wrap_TransSetEvX2X1_New},
    { "Copy", _wrap_TransSetEvX2X1_Copy},
    { "Name", _wrap_TransSetEvX2X1_Name},
    { "Clear", _wrap_TransSetEvX2X1_Clear},
    { "Size", _wrap_TransSetEvX2X1_Size},
    { "Empty", _wrap_TransSetEvX2X1_Empty},
    { "Valid", _wrap_TransSetEvX2X1_Valid},
    { "EraseSet", _wrap_TransSetEvX2X1_EraseSet},
    { "InsertSet", _wrap_TransSetEvX2X1_InsertSet},
    { "RestrictSet", _wrap_TransSetEvX2X1_RestrictSet},
    { "__add", _wrap_TransSetEvX2X1___add},
    { "__sub", _wrap_TransSetEvX2X1___sub},
    { "__mul", _wrap_TransSetEvX2X1___mul},
    { "__le", _wrap_TransSetEvX2X1___le},
    { "__lt", _wrap_TransSetEvX2X1___lt},
    { "__eq", _wrap_TransSetEvX2X1___eq},
    { "Detach", _wrap_TransSetEvX2X1_Detach},
    { "Lock", _wrap_TransSetEvX2X1_Lock},
    { "EraseByX1", _wrap_TransSetEvX2X1_EraseByX1},
    { "EraseByX1Ev", _wrap_TransSetEvX2X1_EraseByX1Ev},
    { "EraseByX2", _wrap_TransSetEvX2X1_EraseByX2},
    { "EraseByX1OrX2", _wrap_TransSetEvX2X1_EraseByX1OrX2},
    { "RestrictStates", _wrap_TransSetEvX2X1_RestrictStates},
    { "ExistsByX1OrX2", _wrap_TransSetEvX2X1_ExistsByX1OrX2},
    { "ExistsByX1Ev", _wrap_TransSetEvX2X1_ExistsByX1Ev},
    { "ExistsByX1", _wrap_TransSetEvX2X1_ExistsByX1},
    { "Insert", _wrap_TransSetEvX2X1_Insert},
    { "Erase", _wrap_TransSetEvX2X1_Erase},
    { "EraseByEv", _wrap_TransSetEvX2X1_EraseByEv},
    { "Exists", _wrap_TransSetEvX2X1_Exists},
    { "Find", _wrap_TransSetEvX2X1_Find},
    { "Begin", _wrap_TransSetEvX2X1_Begin},
    { "End", _wrap_TransSetEvX2X1_End},
    { "BeginByEv", _wrap_TransSetEvX2X1_BeginByEv},
    { "EndByEv", _wrap_TransSetEvX2X1_EndByEv},
    { "BeginByEvX1", _wrap_TransSetEvX2X1_BeginByEvX1},
    { "EndByEvX1", _wrap_TransSetEvX2X1_EndByEvX1},
    { "BeginByEvX2", _wrap_TransSetEvX2X1_BeginByEvX2},
    { "EndByEvX2", _wrap_TransSetEvX2X1_EndByEvX2},
    { "BeginByX2", _wrap_TransSetEvX2X1_BeginByX2},
    { "EndByX2", _wrap_TransSetEvX2X1_EndByX2},
    { "BeginByX2Ev", _wrap_TransSetEvX2X1_BeginByX2Ev},
    { "EndByX2Ev", _wrap_TransSetEvX2X1_EndByX2Ev},
    { "ReSort", _wrap_TransSetEvX2X1_ReSort},
    { "States", _wrap_TransSetEvX2X1_States},
    { "SuccessorStates", _wrap_TransSetEvX2X1_SuccessorStates},
    { "ActiveEvents", _wrap_TransSetEvX2X1_ActiveEvents},
    { "Str", _wrap_TransSetEvX2X1_Str},
    {0,0}
};
static swig_lua_method swig_TransSetEvX2X1_meta[] = {
    { "__add", _wrap_TransSetEvX2X1___add},
    { "__sub", _wrap_TransSetEvX2X1___sub},
    { "__mul", _wrap_TransSetEvX2X1___mul},
    { "__le", _wrap_TransSetEvX2X1___le},
    { "__lt", _wrap_TransSetEvX2X1___lt},
    { "__eq", _wrap_TransSetEvX2X1___eq},
    {0,0}
};

static swig_lua_attribute swig_TransSetEvX2X1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransSetEvX2X1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransSetEvX2X1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransSetEvX2X1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransSetEvX2X1_Sf_SwigStatic = {
    "TransSetEvX2X1",
    swig_TransSetEvX2X1_Sf_SwigStatic_methods,
    swig_TransSetEvX2X1_Sf_SwigStatic_attributes,
    swig_TransSetEvX2X1_Sf_SwigStatic_constants,
    swig_TransSetEvX2X1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransSetEvX2X1_bases[] = {0,0};
static const char *swig_TransSetEvX2X1_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_TransSetEvX2X1 = { "TransSetEvX2X1", "TransSetEvX2X1", &SWIGTYPE_p_TransSetEvX2X1,_proxy__wrap_new_TransSetEvX2X1, swig_delete_TransSetEvX2X1, swig_TransSetEvX2X1_methods, swig_TransSetEvX2X1_attributes, &swig_TransSetEvX2X1_Sf_SwigStatic, swig_TransSetEvX2X1_meta, swig_TransSetEvX2X1_bases, swig_TransSetEvX2X1_base_names };

static int _wrap_new_Generator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Generator",0,0)
  {
    try{
      result = (Generator *)new Generator();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Generator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Generator::Generator",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("new_Generator",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Generator *)new Generator((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Generator",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Generator::Generator",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (Generator *)new Generator((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Generator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Generator__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Generator__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Generator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::Generator()\n"
    "    Generator::Generator(Generator const &)\n"
    "    Generator::Generator(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_New(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::New",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_New",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Generator *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Copy(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Copy",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Copy",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Generator *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Version__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Version",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Version",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::Version",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::Version",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Version",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      result = (Generator *)Generator_Version__SWIG_0((Generator const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Version__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("Generator::Version",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Version",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::Version",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Version",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Generator *)Generator_Version__SWIG_1((Generator const *)arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Version(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_Version__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_Version__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_Version'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::Version(std::string const &,std::string const &) const\n"
    "    Generator::Version(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Name",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Name",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Name",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Name",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_Name__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_Name__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::Name(std::string const &)\n"
    "    Generator::Name() const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_EventIndex(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::EventIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EventIndex",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::EventIndex",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EventIndex",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)((Generator const *)arg1)->EventIndex((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::EventName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EventName",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::EventName",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EventName",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->EventName(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Generator::EventName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EventName",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::EventName",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::EventName",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EventName",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->EventName(arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventName(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_EventName__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_EventName__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_EventName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::EventName(Idx) const\n"
    "    Generator::EventName(Idx,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_UniqueEventName(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::UniqueEventName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::UniqueEventName",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::UniqueEventName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_UniqueEventName",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((Generator const *)arg1)->UniqueEventName((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventRename__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("Generator::EventRename",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EventRename",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::EventRename",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::EventRename",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EventRename",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      result = (bool)(arg1)->EventRename(arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventRename__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("Generator::EventRename",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EventRename",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::EventRename",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::EventRename",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EventRename",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      result = (bool)(arg1)->EventRename((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EventRename(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_EventRename__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_EventRename__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_EventRename'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::EventRename(Idx,std::string const &)\n"
    "    Generator::EventRename(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_StateIndex(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::StateIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateIndex",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::StateIndex",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateIndex",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)((Generator const *)arg1)->StateIndex((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StateName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::StateName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateName",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::StateName",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateName",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->StateName(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StateName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Generator::StateName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateName",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::StateName",2,"Idx");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::StateName",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateName",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->StateName(arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StateName(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_StateName__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_StateName__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_StateName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::StateName(Idx) const\n"
    "    Generator::StateName(Idx,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_UniqueStateName(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::UniqueStateName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::UniqueStateName",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::UniqueStateName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_UniqueStateName",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((Generator const *)arg1)->UniqueStateName((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClearStateNames(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearStateNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearStateNames",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearStateNames",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->ClearStateNames();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrStateName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::ClrStateName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrStateName",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrStateName",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrStateName",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrStateName(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrStateName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::ClrStateName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrStateName",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ClrStateName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrStateName",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrStateName((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrStateName(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrStateName__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrStateName__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ClrStateName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ClrStateName(Idx)\n"
    "    Generator::ClrStateName(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_StateNamesEnabled__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::StateNamesEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateNamesEnabled",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateNamesEnabled",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->StateNamesEnabled();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StateNamesEnabled__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Generator::StateNamesEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateNamesEnabled",1,"Generator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Generator::StateNamesEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateNamesEnabled",1,SWIGTYPE_p_Generator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try{
      (arg1)->StateNamesEnabled(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StateNamesEnabled(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_StateNamesEnabled__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_StateNamesEnabled__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_StateNamesEnabled'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::StateNamesEnabled() const\n"
    "    Generator::StateNamesEnabled(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_SetDefaultStateNames(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::SetDefaultStateNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetDefaultStateNames",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetDefaultStateNames",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->SetDefaultStateNames();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EnforceStateNames(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::EnforceStateNames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EnforceStateNames",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::EnforceStateNames",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EnforceStateNames",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->EnforceStateNames((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::EStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EStr",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::EStr",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EStr",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->EStr(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  std::string result;
  
  SWIG_check_num_args("Generator::SStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SStr",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SStr",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SStr",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->SStr(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::TStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TStr",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TStr",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TStr",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_TStr",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TStr((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  NameSetIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::EStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::EStr",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::EStr",2,"NameSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_EStr",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSetIterator,0))){
    SWIG_fail_ptr("Generator_EStr",2,SWIGTYPE_p_NameSetIterator);
  }
  
  {
    try{
      result = Generator_EStr__SWIG_1((Generator const *)arg1,(NameSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_EStr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_EStr__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_EStr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_EStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::EStr(Idx) const\n"
    "    Generator::EStr(NameSetIterator const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_SStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::SStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SStr",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::SStr",2,"IndexSetIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SStr",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("Generator_SStr",2,SWIGTYPE_p_IndexSetIterator);
  }
  
  {
    try{
      result = Generator_SStr__SWIG_1((Generator const *)arg1,(IndexSetIterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SStr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_SStr__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SStr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_SStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::SStr(Idx) const\n"
    "    Generator::SStr(IndexSetIterator const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_TStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2Iterator *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::TStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TStr",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TStr",2,"TransSetX1EvX2Iterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TStr",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("Generator_TStr",2,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  
  {
    try{
      result = Generator_TStr__SWIG_1((Generator const *)arg1,(TransSetX1EvX2Iterator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TStr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TStr__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TStr__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_TStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::TStr(Transition const &) const\n"
    "    Generator::TStr(TransSetX1EvX2Iterator const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_GraphWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Generator::GraphWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::GraphWrite",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::GraphWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::GraphWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_GraphWrite",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      Generator_GraphWrite__SWIG_0((Generator const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_GraphWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::GraphWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::GraphWrite",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::GraphWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_GraphWrite",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      Generator_GraphWrite__SWIG_0((Generator const *)arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_GraphWrite(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_GraphWrite__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_GraphWrite__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_GraphWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::GraphWrite(std::string const &,std::string const &) const\n"
    "    Generator::GraphWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_WriteAlphabet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::WriteAlphabet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteAlphabet",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteAlphabet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AlphabetToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::AlphabetToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AlphabetToString",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AlphabetToString",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->AlphabetToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteAlphabet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenWriter *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::WriteAlphabet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteAlphabet",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::WriteAlphabet",2,"TokenWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenWriter,0))){
    SWIG_fail_ptr("Generator_WriteAlphabet",2,SWIGTYPE_p_TokenWriter);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteAlphabet(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteAlphabet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_WriteAlphabet__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TokenWriter, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_WriteAlphabet__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_WriteAlphabet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::WriteAlphabet() const\n"
    "    Generator::WriteAlphabet(TokenWriter &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_StateSetToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::StateSetToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StateSetToString",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::StateSetToString",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StateSetToString",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_StateSetToString",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->StateSetToString((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteStateSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenWriter *arg2 = 0 ;
  StateSet *arg3 = 0 ;
  
  SWIG_check_num_args("Generator::WriteStateSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteStateSet",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::WriteStateSet",2,"TokenWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Generator::WriteStateSet",3,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteStateSet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenWriter,0))){
    SWIG_fail_ptr("Generator_WriteStateSet",2,SWIGTYPE_p_TokenWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_WriteStateSet",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteStateSet(*arg2,(StateSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteStateSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::WriteStateSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteStateSet",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::WriteStateSet",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteStateSet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_WriteStateSet",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteStateSet((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteStateSet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_WriteStateSet__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TokenWriter, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Generator_WriteStateSet__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_WriteStateSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::WriteStateSet(TokenWriter &,StateSet const &) const\n"
    "    Generator::WriteStateSet(StateSet const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_DWriteStateSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenWriter *arg2 = 0 ;
  StateSet *arg3 = 0 ;
  
  SWIG_check_num_args("Generator::DWriteStateSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DWriteStateSet",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::DWriteStateSet",2,"TokenWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Generator::DWriteStateSet",3,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DWriteStateSet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenWriter,0))){
    SWIG_fail_ptr("Generator_DWriteStateSet",2,SWIGTYPE_p_TokenWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_DWriteStateSet",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((Generator const *)arg1)->DWriteStateSet(*arg2,(StateSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StatesToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::StatesToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StatesToString",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StatesToString",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->StatesToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStatesToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::MarkedStatesToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStatesToString",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStatesToString",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->MarkedStatesToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStatesToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::InitStatesToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStatesToString",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStatesToString",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->InitStatesToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteTransRel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::WriteTransRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteTransRel",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteTransRel",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteTransRel();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelToString(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Generator::TransRelToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelToString",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelToString",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TransRelToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteTransRel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenWriter *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::WriteTransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::WriteTransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::WriteTransRel",2,"TokenWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_WriteTransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenWriter,0))){
    SWIG_fail_ptr("Generator_WriteTransRel",2,SWIGTYPE_p_TokenWriter);
  }
  
  {
    try{
      ((Generator const *)arg1)->WriteTransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_WriteTransRel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_WriteTransRel__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TokenWriter, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_WriteTransRel__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_WriteTransRel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::WriteTransRel() const\n"
    "    Generator::WriteTransRel(TokenWriter &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_DWriteTransRel(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenWriter *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::DWriteTransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DWriteTransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::DWriteTransRel",2,"TokenWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DWriteTransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenWriter,0))){
    SWIG_fail_ptr("Generator_DWriteTransRel",2,SWIGTYPE_p_TokenWriter);
  }
  
  {
    try{
      ((Generator const *)arg1)->DWriteTransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DotWrite(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::DotWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DotWrite",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::DotWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DotWrite",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((Generator const *)arg1)->DotWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DDotWrite(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::DDotWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DDotWrite",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::DDotWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DDotWrite",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((Generator const *)arg1)->DDotWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ReadStateSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TokenReader *arg2 = 0 ;
  std::string *arg3 = 0 ;
  StateSet *arg4 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Generator::ReadStateSet",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ReadStateSet",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ReadStateSet",2,"TokenReader &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::ReadStateSet",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Generator::ReadStateSet",4,"StateSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ReadStateSet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TokenReader,0))){
    SWIG_fail_ptr("Generator_ReadStateSet",2,SWIGTYPE_p_TokenReader);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_ReadStateSet",4,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      ((Generator const *)arg1)->ReadStateSet(*arg2,(std::string const &)*arg3,*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Valid(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Valid",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Valid",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)(arg1)->Valid();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Clear",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Clear",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClearStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearStates",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->ClearStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Size(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Size",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Size",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AlphabetSize(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::AlphabetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AlphabetSize",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AlphabetSize",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->AlphabetSize();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelSize(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::TransRelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelSize",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelSize",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->TransRelSize();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStatesSize(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InitStatesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStatesSize",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStatesSize",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->InitStatesSize();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStatesSize(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::MarkedStatesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStatesSize",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStatesSize",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->MarkedStatesSize();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Empty",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Empty",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AlphabetEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::AlphabetEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AlphabetEmpty",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AlphabetEmpty",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->AlphabetEmpty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::TransRelEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelEmpty",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelEmpty",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->TransRelEmpty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStatesEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::InitStatesEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStatesEmpty",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStatesEmpty",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->InitStatesEmpty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStatesEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::MarkedStatesEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStatesEmpty",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStatesEmpty",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->MarkedStatesEmpty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_UsedEvents(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("Generator::UsedEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::UsedEvents",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_UsedEvents",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->UsedEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_UnusedEvents(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("Generator::UnusedEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::UnusedEvents",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_UnusedEvents",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->UnusedEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ActiveEventSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  EventSet result;
  
  SWIG_check_num_args("Generator::ActiveEventSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ActiveEventSet",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ActiveEventSet",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ActiveEventSet",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->ActiveEventSet(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ActiveTransSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  TransSet result;
  
  SWIG_check_num_args("Generator::ActiveTransSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ActiveTransSet",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ActiveTransSet",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ActiveTransSet",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->ActiveTransSet(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSet * resultptr = new TransSet((const TransSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::TransRelStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelStates",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TransRelStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SuccessorStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::SuccessorStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SuccessorStates",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SuccessorStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SuccessorStates",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->SuccessorStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SuccessorStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::SuccessorStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SuccessorStates",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SuccessorStates",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::SuccessorStates",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SuccessorStates",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((Generator const *)arg1)->SuccessorStates(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SuccessorStates(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SuccessorStates__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_SuccessorStates__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_SuccessorStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::SuccessorStates(Idx) const\n"
    "    Generator::SuccessorStates(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_SuccessorState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx result;
  
  SWIG_check_num_args("Generator::SuccessorState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SuccessorState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SuccessorState",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::SuccessorState",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SuccessorState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (Idx)((Generator const *)arg1)->SuccessorState(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AlphabetBegin(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  NameSetIterator result;
  
  SWIG_check_num_args("Generator::AlphabetBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AlphabetBegin",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AlphabetBegin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->AlphabetBegin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AlphabetEnd(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  NameSetIterator result;
  
  SWIG_check_num_args("Generator::AlphabetEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AlphabetEnd",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AlphabetEnd",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->AlphabetEnd();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsEvent",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsEvent",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsEvent",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ExistsEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsEvent",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ExistsEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ExistsEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ExistsEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ExistsEvent(Idx) const\n"
    "    Generator::ExistsEvent(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_FindEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  NameSetIterator result;
  
  SWIG_check_num_args("Generator::FindEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindEvent",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::FindEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindEvent",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->FindEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  NameSetIterator result;
  
  SWIG_check_num_args("Generator::FindEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindEvent",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::FindEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindEvent",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((Generator const *)arg1)->FindEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    NameSetIterator * resultptr = new NameSetIterator((const NameSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_FindEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_FindEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_FindEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::FindEvent(Idx) const\n"
    "    Generator::FindEvent(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_Alphabet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("Generator::Alphabet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Alphabet",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Alphabet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = Generator_Alphabet((Generator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StatesBegin(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::StatesBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StatesBegin",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StatesBegin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->StatesBegin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_StatesEnd(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::StatesEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::StatesEnd",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_StatesEnd",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->StatesEnd();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsState",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ExistsState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ExistsState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ExistsState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ExistsState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ExistsState(Idx) const\n"
    "    Generator::ExistsState(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_FindState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::FindState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::FindState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->FindState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::FindState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindState",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::FindState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((Generator const *)arg1)->FindState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_FindState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_FindState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_FindState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::FindState(Idx) const\n"
    "    Generator::FindState(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_States(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::States",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_States",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = Generator_States((Generator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InitState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitState",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitState",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->InitState();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStatesBegin(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::InitStatesBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStatesBegin",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStatesBegin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->InitStatesBegin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStatesEnd(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::InitStatesEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStatesEnd",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStatesEnd",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->InitStatesEnd();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsInitState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsInitState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsInitState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsInitState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindInitState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::FindInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindInitState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::FindInitState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindInitState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->FindInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InitStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::InitStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InitStates",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InitStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = Generator_InitStates((Generator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStatesBegin(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::MarkedStatesBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStatesBegin",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStatesBegin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->MarkedStatesBegin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStatesEnd(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::MarkedStatesEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStatesEnd",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStatesEnd",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->MarkedStatesEnd();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsMarkedState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsMarkedState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsMarkedState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindMarkedState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::FindMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindMarkedState",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::FindMarkedState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->FindMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MarkedStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::MarkedStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MarkedStates",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MarkedStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = Generator_MarkedStates((Generator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelBegin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelBegin",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelBegin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TransRelBegin();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelEnd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelEnd",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelEnd",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TransRelEnd();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelBegin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelBegin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelBegin",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::TransRelBegin",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelBegin",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->TransRelBegin(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelEnd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelEnd",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::TransRelEnd",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelEnd",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = ((Generator const *)arg1)->TransRelEnd(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelBegin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelBegin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelBegin",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::TransRelBegin",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::TransRelBegin",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelBegin",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((Generator const *)arg1)->TransRelBegin(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelBegin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_TransRelBegin__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_TransRelBegin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_TransRelBegin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_TransRelBegin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::TransRelBegin() const\n"
    "    Generator::TransRelBegin(Idx) const\n"
    "    Generator::TransRelBegin(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_TransRelEnd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::TransRelEnd",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRelEnd",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::TransRelEnd",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::TransRelEnd",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRelEnd",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = ((Generator const *)arg1)->TransRelEnd(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRelEnd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_TransRelEnd__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_TransRelEnd__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_TransRelEnd__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_TransRelEnd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::TransRelEnd() const\n"
    "    Generator::TransRelEnd(Idx) const\n"
    "    Generator::TransRelEnd(Idx,Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_FindTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::FindTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindTransition",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::FindTransition",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::FindTransition",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Generator::FindTransition",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindTransition",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  {
    try{
      result = ((Generator const *)arg1)->FindTransition((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::FindTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindTransition",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::FindTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::FindTransition",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Generator::FindTransition",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = ((Generator const *)arg1)->FindTransition(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::FindTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::FindTransition",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::FindTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_FindTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_FindTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->FindTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_FindTransition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_FindTransition__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_FindTransition__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_FindTransition__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_FindTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::FindTransition(std::string const &,std::string const &,std::string const &) const\n"
    "    Generator::FindTransition(Idx,Idx,Idx) const\n"
    "    Generator::FindTransition(Transition const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ExistsTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsTransition",1,"Generator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ExistsTransition",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::ExistsTransition",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Generator::ExistsTransition",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsTransition((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsTransition",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::ExistsTransition",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Generator::ExistsTransition",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsTransition(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsTransition",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ExistsTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsTransition__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsTransition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsTransition",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::ExistsTransition",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsTransition(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsTransition__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::ExistsTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ExistsTransition",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ExistsTransition",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ExistsTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((Generator const *)arg1)->ExistsTransition(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ExistsTransition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_ExistsTransition__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ExistsTransition__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_ExistsTransition__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_ExistsTransition__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_ExistsTransition__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ExistsTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ExistsTransition(std::string const &,std::string const &,std::string const &) const\n"
    "    Generator::ExistsTransition(Idx,Idx,Idx) const\n"
    "    Generator::ExistsTransition(Transition const &) const\n"
    "    Generator::ExistsTransition(Idx,Idx) const\n"
    "    Generator::ExistsTransition(Idx) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_TransRel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2 result;
  
  SWIG_check_num_args("Generator::TransRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = Generator_TransRel__SWIG_0((Generator const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2 * resultptr = new TransSetX1EvX2((const TransSetX1EvX2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2 *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetX1EvX2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1EvX2,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetX1EvX2);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetEvX1X2 *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetEvX1X2 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX1X2,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetEvX1X2);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetEvX2X1 *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetEvX2X1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetEvX2X1,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetEvX2X1);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX2EvX1 *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetX2EvX1 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2EvX1,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetX2EvX1);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX2X1Ev *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetX2X1Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX2X1Ev,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetX2X1Ev);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1X2Ev *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::TransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TransRel",1,"Generator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::TransRel",2,"TransSetX1X2Ev &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSetX1X2Ev,0))){
    SWIG_fail_ptr("Generator_TransRel",2,SWIGTYPE_p_TransSetX1X2Ev);
  }
  
  {
    try{
      ((Generator const *)arg1)->TransRel(*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TransRel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_TransRel__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX1X2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetEvX2X1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2EvX1, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX2X1Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1X2Ev, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_TransRel__SWIG_6(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_TransRel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::TransRel() const\n"
    "    Generator::TransRel(TransSetX1EvX2 &) const\n"
    "    Generator::TransRel(TransSetEvX1X2 &) const\n"
    "    Generator::TransRel(TransSetEvX2X1 &) const\n"
    "    Generator::TransRel(TransSetX2EvX1 &) const\n"
    "    Generator::TransRel(TransSetX2X1Ev &) const\n"
    "    Generator::TransRel(TransSetX1X2Ev &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_InsEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::InsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsEvent",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::InsEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsEvent",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsEvent",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::InsEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsEvent",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_InsEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::InsEvent(Idx)\n"
    "    Generator::InsEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_InsEvents(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InsEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsEvents",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InsEvents",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsEvents",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Generator_InsEvents",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->InsEvents((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelEvent",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::DelEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelEvent",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->DelEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelEvent",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::DelEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelEvent",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->DelEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_DelEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_DelEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_DelEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::DelEvent(Idx)\n"
    "    Generator::DelEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_DelEvents(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::DelEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelEvents",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::DelEvents",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelEvents",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Generator_DelEvents",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->DelEvents((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelEventFromAlphabet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelEventFromAlphabet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelEventFromAlphabet",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::DelEventFromAlphabet",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelEventFromAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->DelEventFromAlphabet(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectAlphabet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectAlphabet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectAlphabet",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectAlphabet",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Generator_InjectAlphabet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->InjectAlphabet((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_RestrictAlphabet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::RestrictAlphabet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::RestrictAlphabet",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::RestrictAlphabet",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_RestrictAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Generator_RestrictAlphabet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->RestrictAlphabet((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsState",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsState",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsState();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::InsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::InsState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::InsState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_InsState__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsState__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsState__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_InsState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::InsState()\n"
    "    Generator::InsState(Idx)\n"
    "    Generator::InsState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_InsStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InsStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InsStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InsStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InsStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::DelState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->DelState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::DelState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)(arg1)->DelState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_DelState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_DelState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_DelState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::DelState(Idx)\n"
    "    Generator::DelState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_DelStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::DelStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::DelStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_DelStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->DelStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelStateFromStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::DelStateFromStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelStateFromStates",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::DelStateFromStates",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelStateFromStates",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->DelStateFromStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelStateFromStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator arg2 ;
  IndexSetIterator *argp2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::DelStateFromStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::DelStateFromStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::DelStateFromStates",2,"IndexSetIterator");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_DelStateFromStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("Generator_DelStateFromStates",2,SWIGTYPE_p_IndexSetIterator);
  }
  arg2 = *argp2;
  
  {
    try{
      result = (arg1)->DelStateFromStates(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_DelStateFromStates(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_DelStateFromStates__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_DelStateFromStates__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_DelStateFromStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::DelStateFromStates(Idx)\n"
    "    Generator::DelStateFromStates(IndexSetIterator)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_RestrictStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::RestrictStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::RestrictStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::RestrictStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_RestrictStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_RestrictStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->RestrictStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectState(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::InjectState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::InjectState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InjectState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InjectStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InjectStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsInitState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsInitState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsInitState",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsInitState",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsInitState();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsInitState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::InsInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsInitState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::InsInitState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsInitState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsInitState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsInitState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::InsInitState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsInitState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsInitState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsInitState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_InsInitState__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsInitState__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsInitState__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_InsInitState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::InsInitState()\n"
    "    Generator::InsInitState(Idx)\n"
    "    Generator::InsInitState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_InsInitStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InsInitStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsInitStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InsInitStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsInitStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InsInitStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InsInitStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetInitState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::SetInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetInitState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SetInitState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetInitState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetInitState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::SetInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetInitState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::SetInitState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetInitState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetInitState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetInitState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SetInitState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SetInitState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_SetInitState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::SetInitState(Idx)\n"
    "    Generator::SetInitState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClrInitState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::ClrInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrInitState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrInitState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrInitState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrInitState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::ClrInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrInitState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ClrInitState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrInitState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrInitState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrInitState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator arg2 ;
  IndexSetIterator *argp2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::ClrInitState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrInitState",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ClrInitState",2,"IndexSetIterator");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrInitState",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("Generator_ClrInitState",2,SWIGTYPE_p_IndexSetIterator);
  }
  arg2 = *argp2;
  
  {
    try{
      result = (arg1)->ClrInitState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrInitState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_ClrInitState__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrInitState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrInitState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ClrInitState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ClrInitState(Idx)\n"
    "    Generator::ClrInitState(std::string const &)\n"
    "    Generator::ClrInitState(IndexSetIterator)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClearInitStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearInitStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearInitStates",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearInitStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->ClearInitStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectInitStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectInitStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectInitStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectInitStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectInitStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InjectInitStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InjectInitStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsMarkedState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsMarkedState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsMarkedState",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsMarkedState();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsMarkedState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("Generator::InsMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsMarkedState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::InsMarkedState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsMarkedState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::InsMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsMarkedState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::InsMarkedState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsMarkedState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InsMarkedState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_InsMarkedState__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsMarkedState__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_InsMarkedState__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_InsMarkedState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::InsMarkedState()\n"
    "    Generator::InsMarkedState(Idx)\n"
    "    Generator::InsMarkedState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_InsMarkedStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InsMarkedStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InsMarkedStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InsMarkedStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InsMarkedStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InsMarkedStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InsMarkedStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetMarkedState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::SetMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetMarkedState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SetMarkedState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetMarkedState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::SetMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetMarkedState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::SetMarkedState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetMarkedState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetMarkedState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SetMarkedState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_SetMarkedState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_SetMarkedState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::SetMarkedState(Idx)\n"
    "    Generator::SetMarkedState(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClrMarkedState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::ClrMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrMarkedState",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrMarkedState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrMarkedState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Generator::ClrMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrMarkedState",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::ClrMarkedState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrMarkedState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrMarkedState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  IndexSetIterator arg2 ;
  IndexSetIterator *argp2 ;
  IndexSetIterator result;
  
  SWIG_check_num_args("Generator::ClrMarkedState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrMarkedState",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ClrMarkedState",2,"IndexSetIterator");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrMarkedState",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_IndexSetIterator,0))){
    SWIG_fail_ptr("Generator_ClrMarkedState",2,SWIGTYPE_p_IndexSetIterator);
  }
  arg2 = *argp2;
  
  {
    try{
      result = (arg1)->ClrMarkedState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    IndexSetIterator * resultptr = new IndexSetIterator((const IndexSetIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSetIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrMarkedState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSetIterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_ClrMarkedState__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrMarkedState__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrMarkedState__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ClrMarkedState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ClrMarkedState(Idx)\n"
    "    Generator::ClrMarkedState(std::string const &)\n"
    "    Generator::ClrMarkedState(IndexSetIterator)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClearMarkedStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearMarkedStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearMarkedStates",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearMarkedStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->ClearMarkedStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectMarkedStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectMarkedStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectMarkedStates",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectMarkedStates",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectMarkedStates",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("Generator_InjectMarkedStates",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->InjectMarkedStates((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("Generator::SetTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetTransition",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::SetTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::SetTransition",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Generator::SetTransition",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->SetTransition(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  bool result;
  
  SWIG_check_num_args("Generator::SetTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetTransition",1,"Generator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Generator::SetTransition",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Generator::SetTransition",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Generator::SetTransition",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetTransition",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  {
    try{
      result = (bool)(arg1)->SetTransition((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::SetTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetTransition",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::SetTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_SetTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->SetTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetTransition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_SetTransition__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_SetTransition__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_SetTransition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_SetTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::SetTransition(Idx,Idx,Idx)\n"
    "    Generator::SetTransition(std::string const &,std::string const &,std::string const &)\n"
    "    Generator::SetTransition(Transition const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClrTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  
  SWIG_check_num_args("Generator::ClrTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrTransition",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::ClrTransition",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Generator::ClrTransition",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrTransition",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      (arg1)->ClrTransition(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::ClrTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrTransition",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ClrTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_ClrTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      (arg1)->ClrTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSetX1EvX2Iterator arg2 ;
  TransSetX1EvX2Iterator *argp2 ;
  TransSetX1EvX2Iterator result;
  
  SWIG_check_num_args("Generator::ClrTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrTransition",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::ClrTransition",2,"TransSetX1EvX2Iterator");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TransSetX1EvX2Iterator,0))){
    SWIG_fail_ptr("Generator_ClrTransition",2,SWIGTYPE_p_TransSetX1EvX2Iterator);
  }
  arg2 = *argp2;
  
  {
    try{
      result = (arg1)->ClrTransition(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TransSetX1EvX2Iterator * resultptr = new TransSetX1EvX2Iterator((const TransSetX1EvX2Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TransSetX1EvX2Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrTransition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_ClrTransition__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TransSetX1EvX2Iterator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_ClrTransition__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Generator_ClrTransition__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ClrTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ClrTransition(Idx,Idx,Idx)\n"
    "    Generator::ClrTransition(Transition const &)\n"
    "    Generator::ClrTransition(TransSetX1EvX2Iterator)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClrTransitions__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  
  SWIG_check_num_args("Generator::ClrTransitions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrTransitions",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrTransitions",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Generator::ClrTransitions",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrTransitions",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      (arg1)->ClrTransitions(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrTransitions__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("Generator::ClrTransitions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClrTransitions",1,"Generator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::ClrTransitions",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClrTransitions",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrTransitions(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClrTransitions(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_ClrTransitions__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_ClrTransitions__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_ClrTransitions'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::ClrTransitions(Idx,Idx)\n"
    "    Generator::ClrTransitions(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_ClearTransRel(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearTransRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearTransRel",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearTransRel",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->ClearTransRel();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectTransition(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Transition *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectTransition",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectTransition",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("Generator_InjectTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      (arg1)->InjectTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_InjectTransRel(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  TransSet *arg2 = 0 ;
  
  SWIG_check_num_args("Generator::InjectTransRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::InjectTransRel",1,"Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Generator::InjectTransRel",2,"TransSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_InjectTransRel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TransSet,0))){
    SWIG_fail_ptr("Generator_InjectTransRel",2,SWIGTYPE_p_TransSet);
  }
  
  {
    try{
      (arg1)->InjectTransRel((TransSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_AccessibleSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::AccessibleSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::AccessibleSet",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_AccessibleSet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->AccessibleSet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Accessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Accessible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Accessible",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Accessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)(arg1)->Accessible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_IsAccessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::IsAccessible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::IsAccessible",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_IsAccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->IsAccessible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_CoaccessibleSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::CoaccessibleSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::CoaccessibleSet",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_CoaccessibleSet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->CoaccessibleSet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Coaccessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Coaccessible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Coaccessible",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Coaccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)(arg1)->Coaccessible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_IsCoaccessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::IsCoaccessible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::IsCoaccessible",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_IsCoaccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->IsCoaccessible();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TrimSet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::TrimSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TrimSet",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TrimSet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TrimSet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Trim(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Trim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Trim",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Trim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)(arg1)->Trim();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_IsTrim(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::IsTrim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::IsTrim",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_IsTrim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->IsTrim();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_BlockingStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::BlockingStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::BlockingStates",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_BlockingStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->BlockingStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_Complete(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::Complete",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::Complete",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_Complete",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)(arg1)->Complete();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_IsComplete(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::IsComplete",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::IsComplete",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_IsComplete",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->IsComplete();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_TerminalStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  StateSet result;
  
  SWIG_check_num_args("Generator::TerminalStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::TerminalStates",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_TerminalStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = ((Generator const *)arg1)->TerminalStates();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    StateSet * resultptr = new StateSet((const StateSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IndexSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_IsDeterministic(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Generator::IsDeterministic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::IsDeterministic",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_IsDeterministic",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)((Generator const *)arg1)->IsDeterministic();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_SetMinStateIndexMap(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::SetMinStateIndexMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::SetMinStateIndexMap",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_SetMinStateIndexMap",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      ((Generator const *)arg1)->SetMinStateIndexMap();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_ClearMinStateIndexMap(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::ClearMinStateIndexMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::ClearMinStateIndexMap",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_ClearMinStateIndexMap",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      ((Generator const *)arg1)->ClearMinStateIndexMap();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MinStateIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx arg2 ;
  Idx result;
  
  SWIG_check_num_args("Generator::MinStateIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MinStateIndex",1,"Generator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Generator::MinStateIndex",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MinStateIndex",1,SWIGTYPE_p_Generator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (Idx)((Generator const *)arg1)->MinStateIndex(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MinStateIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::MinStateIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MinStateIndex",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MinStateIndex",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->MinStateIndex();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MinStateIndex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Generator_MinStateIndex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Generator_MinStateIndex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_MinStateIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Generator::MinStateIndex(Idx) const\n"
    "    Generator::MinStateIndex()\n");
  lua_error(L);return 0;
}


static int _wrap_Generator_MaxStateIndex(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  Idx result;
  
  SWIG_check_num_args("Generator::MaxStateIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MaxStateIndex",1,"Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MaxStateIndex",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (Idx)((Generator const *)arg1)->MaxStateIndex();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_MinimizeAlphabet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = (Generator *) 0 ;
  
  SWIG_check_num_args("Generator::MinimizeAlphabet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Generator::MinimizeAlphabet",1,"Generator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Generator_MinimizeAlphabet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->MinimizeAlphabet();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Generator(void *obj) {
Generator *arg1 = (Generator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Generator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Generator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Generator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Generator_methods[]= {
    { "New", _wrap_Generator_New},
    { "Copy", _wrap_Generator_Copy},
    { "Version", _wrap_Generator_Version},
    { "Name", _wrap_Generator_Name},
    { "EventIndex", _wrap_Generator_EventIndex},
    { "EventName", _wrap_Generator_EventName},
    { "UniqueEventName", _wrap_Generator_UniqueEventName},
    { "EventRename", _wrap_Generator_EventRename},
    { "StateIndex", _wrap_Generator_StateIndex},
    { "StateName", _wrap_Generator_StateName},
    { "UniqueStateName", _wrap_Generator_UniqueStateName},
    { "ClearStateNames", _wrap_Generator_ClearStateNames},
    { "ClrStateName", _wrap_Generator_ClrStateName},
    { "StateNamesEnabled", _wrap_Generator_StateNamesEnabled},
    { "SetDefaultStateNames", _wrap_Generator_SetDefaultStateNames},
    { "EnforceStateNames", _wrap_Generator_EnforceStateNames},
    { "EStr", _wrap_Generator_EStr},
    { "SStr", _wrap_Generator_SStr},
    { "TStr", _wrap_Generator_TStr},
    { "GraphWrite", _wrap_Generator_GraphWrite},
    { "AlphabetToString", _wrap_Generator_AlphabetToString},
    { "WriteAlphabet", _wrap_Generator_WriteAlphabet},
    { "StateSetToString", _wrap_Generator_StateSetToString},
    { "WriteStateSet", _wrap_Generator_WriteStateSet},
    { "DWriteStateSet", _wrap_Generator_DWriteStateSet},
    { "StatesToString", _wrap_Generator_StatesToString},
    { "MarkedStatesToString", _wrap_Generator_MarkedStatesToString},
    { "InitStatesToString", _wrap_Generator_InitStatesToString},
    { "TransRelToString", _wrap_Generator_TransRelToString},
    { "WriteTransRel", _wrap_Generator_WriteTransRel},
    { "DWriteTransRel", _wrap_Generator_DWriteTransRel},
    { "DotWrite", _wrap_Generator_DotWrite},
    { "DDotWrite", _wrap_Generator_DDotWrite},
    { "ReadStateSet", _wrap_Generator_ReadStateSet},
    { "Valid", _wrap_Generator_Valid},
    { "Clear", _wrap_Generator_Clear},
    { "ClearStates", _wrap_Generator_ClearStates},
    { "Size", _wrap_Generator_Size},
    { "AlphabetSize", _wrap_Generator_AlphabetSize},
    { "TransRelSize", _wrap_Generator_TransRelSize},
    { "InitStatesSize", _wrap_Generator_InitStatesSize},
    { "MarkedStatesSize", _wrap_Generator_MarkedStatesSize},
    { "Empty", _wrap_Generator_Empty},
    { "AlphabetEmpty", _wrap_Generator_AlphabetEmpty},
    { "TransRelEmpty", _wrap_Generator_TransRelEmpty},
    { "InitStatesEmpty", _wrap_Generator_InitStatesEmpty},
    { "MarkedStatesEmpty", _wrap_Generator_MarkedStatesEmpty},
    { "UsedEvents", _wrap_Generator_UsedEvents},
    { "UnusedEvents", _wrap_Generator_UnusedEvents},
    { "ActiveEventSet", _wrap_Generator_ActiveEventSet},
    { "ActiveTransSet", _wrap_Generator_ActiveTransSet},
    { "TransRelStates", _wrap_Generator_TransRelStates},
    { "SuccessorStates", _wrap_Generator_SuccessorStates},
    { "SuccessorState", _wrap_Generator_SuccessorState},
    { "AlphabetBegin", _wrap_Generator_AlphabetBegin},
    { "AlphabetEnd", _wrap_Generator_AlphabetEnd},
    { "ExistsEvent", _wrap_Generator_ExistsEvent},
    { "FindEvent", _wrap_Generator_FindEvent},
    { "Alphabet", _wrap_Generator_Alphabet},
    { "StatesBegin", _wrap_Generator_StatesBegin},
    { "StatesEnd", _wrap_Generator_StatesEnd},
    { "ExistsState", _wrap_Generator_ExistsState},
    { "FindState", _wrap_Generator_FindState},
    { "States", _wrap_Generator_States},
    { "InitState", _wrap_Generator_InitState},
    { "InitStatesBegin", _wrap_Generator_InitStatesBegin},
    { "InitStatesEnd", _wrap_Generator_InitStatesEnd},
    { "ExistsInitState", _wrap_Generator_ExistsInitState},
    { "FindInitState", _wrap_Generator_FindInitState},
    { "InitStates", _wrap_Generator_InitStates},
    { "MarkedStatesBegin", _wrap_Generator_MarkedStatesBegin},
    { "MarkedStatesEnd", _wrap_Generator_MarkedStatesEnd},
    { "ExistsMarkedState", _wrap_Generator_ExistsMarkedState},
    { "FindMarkedState", _wrap_Generator_FindMarkedState},
    { "MarkedStates", _wrap_Generator_MarkedStates},
    { "TransRelBegin", _wrap_Generator_TransRelBegin},
    { "TransRelEnd", _wrap_Generator_TransRelEnd},
    { "FindTransition", _wrap_Generator_FindTransition},
    { "ExistsTransition", _wrap_Generator_ExistsTransition},
    { "TransRel", _wrap_Generator_TransRel},
    { "InsEvent", _wrap_Generator_InsEvent},
    { "InsEvents", _wrap_Generator_InsEvents},
    { "DelEvent", _wrap_Generator_DelEvent},
    { "DelEvents", _wrap_Generator_DelEvents},
    { "DelEventFromAlphabet", _wrap_Generator_DelEventFromAlphabet},
    { "InjectAlphabet", _wrap_Generator_InjectAlphabet},
    { "RestrictAlphabet", _wrap_Generator_RestrictAlphabet},
    { "InsState", _wrap_Generator_InsState},
    { "InsStates", _wrap_Generator_InsStates},
    { "DelState", _wrap_Generator_DelState},
    { "DelStates", _wrap_Generator_DelStates},
    { "DelStateFromStates", _wrap_Generator_DelStateFromStates},
    { "RestrictStates", _wrap_Generator_RestrictStates},
    { "InjectState", _wrap_Generator_InjectState},
    { "InjectStates", _wrap_Generator_InjectStates},
    { "InsInitState", _wrap_Generator_InsInitState},
    { "InsInitStates", _wrap_Generator_InsInitStates},
    { "SetInitState", _wrap_Generator_SetInitState},
    { "ClrInitState", _wrap_Generator_ClrInitState},
    { "ClearInitStates", _wrap_Generator_ClearInitStates},
    { "InjectInitStates", _wrap_Generator_InjectInitStates},
    { "InsMarkedState", _wrap_Generator_InsMarkedState},
    { "InsMarkedStates", _wrap_Generator_InsMarkedStates},
    { "SetMarkedState", _wrap_Generator_SetMarkedState},
    { "ClrMarkedState", _wrap_Generator_ClrMarkedState},
    { "ClearMarkedStates", _wrap_Generator_ClearMarkedStates},
    { "InjectMarkedStates", _wrap_Generator_InjectMarkedStates},
    { "SetTransition", _wrap_Generator_SetTransition},
    { "ClrTransition", _wrap_Generator_ClrTransition},
    { "ClrTransitions", _wrap_Generator_ClrTransitions},
    { "ClearTransRel", _wrap_Generator_ClearTransRel},
    { "InjectTransition", _wrap_Generator_InjectTransition},
    { "InjectTransRel", _wrap_Generator_InjectTransRel},
    { "AccessibleSet", _wrap_Generator_AccessibleSet},
    { "Accessible", _wrap_Generator_Accessible},
    { "IsAccessible", _wrap_Generator_IsAccessible},
    { "CoaccessibleSet", _wrap_Generator_CoaccessibleSet},
    { "Coaccessible", _wrap_Generator_Coaccessible},
    { "IsCoaccessible", _wrap_Generator_IsCoaccessible},
    { "TrimSet", _wrap_Generator_TrimSet},
    { "Trim", _wrap_Generator_Trim},
    { "IsTrim", _wrap_Generator_IsTrim},
    { "BlockingStates", _wrap_Generator_BlockingStates},
    { "Complete", _wrap_Generator_Complete},
    { "IsComplete", _wrap_Generator_IsComplete},
    { "TerminalStates", _wrap_Generator_TerminalStates},
    { "IsDeterministic", _wrap_Generator_IsDeterministic},
    { "SetMinStateIndexMap", _wrap_Generator_SetMinStateIndexMap},
    { "ClearMinStateIndexMap", _wrap_Generator_ClearMinStateIndexMap},
    { "MinStateIndex", _wrap_Generator_MinStateIndex},
    { "MaxStateIndex", _wrap_Generator_MaxStateIndex},
    { "MinimizeAlphabet", _wrap_Generator_MinimizeAlphabet},
    {0,0}
};
static swig_lua_method swig_Generator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Generator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Generator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Generator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Generator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Generator_Sf_SwigStatic = {
    "Generator",
    swig_Generator_Sf_SwigStatic_methods,
    swig_Generator_Sf_SwigStatic_attributes,
    swig_Generator_Sf_SwigStatic_constants,
    swig_Generator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Generator_bases[] = {0,0};
static const char *swig_Generator_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_Generator = { "Generator", "Generator", &SWIGTYPE_p_Generator,_proxy__wrap_new_Generator, swig_delete_Generator, swig_Generator_methods, swig_Generator_attributes, &swig_Generator_Sf_SwigStatic, swig_Generator_meta, swig_Generator_bases, swig_Generator_base_names };

static int _wrap_new_System__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",0,0)
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)new TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_System__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("new_System",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)new TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_System__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("new_System",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)new TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_System__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)new TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_System(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_System__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_System__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_System__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_System__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_System'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator()\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator(Generator const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TcGenerator(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_New(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::New",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::New",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_New",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)(arg1)->New();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Copy",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Copy",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)(arg1)->Copy();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Version__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Version",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Version__SWIG_0((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Version__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Version",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *)TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Version__SWIG_1((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Version(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Version__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_System_Version__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Version'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version(std::string const &,std::string const &) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Version(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClearAttributes(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearAttributes",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClearAttributes",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->ClearAttributes();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_UpdateAttributes(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UpdateAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UpdateAttributes",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_UpdateAttributes",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (bool)(arg1)->UpdateAttributes();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_States(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  TaIndexSet< AttributeVoid > result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::States",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::States",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_States",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__States((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TaIndexSet< AttributeVoid > * resultptr = new TaIndexSet< AttributeVoid >((const TaIndexSet< AttributeVoid > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TaIndexSetT_AttributeVoid_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Alphabet(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  TaNameSet< AttributeCFlags > result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Alphabet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Alphabet",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Alphabet",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__Alphabet((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TaNameSet< AttributeCFlags > * resultptr = new TaNameSet< AttributeCFlags >((const TaNameSet< AttributeCFlags > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_TransRel(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  SwigValueWrapper< TaTransSet< AttributeVoid > > result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransRel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_TransRel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = TcGenerator_Sl_AttributeVoid_Sc_AttributeVoid_Sc_AttributeCFlags_Sc_AttributeVoid_Sg__TransRel((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    TaTransSet< AttributeVoid > * resultptr = new TaTransSet< AttributeVoid >((const TaTransSet< AttributeVoid > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TaTransSetT_AttributeVoid_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClearEventAttributes(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearEventAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearEventAttributes",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClearEventAttributes",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->ClearEventAttributes();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvents",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_InsEvents",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->InsEvents((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeCFlags *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,"Idx");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("System_InsEvent",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (bool)(arg1)->InsEvent(arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  AttributeCFlags *arg3 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("System_InsEvent",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsEvent((std::string const &)*arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_InsEvent__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_InsEvent__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent(Idx,AttributeCFlags const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsEvent(std::string const &,AttributeCFlags const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrEventAttribute(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrEventAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrEventAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrEventAttribute",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrEventAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrEventAttribute(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_EventAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeCFlags *arg3 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttribute",2,"Idx");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttribute",3,"AttributeCFlags const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_EventAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeCFlags,0))){
    SWIG_fail_ptr("System_EventAttribute",3,SWIGTYPE_p_AttributeCFlags);
  }
  
  {
    try{
      (arg1)->EventAttribute(arg2,(AttributeCFlags const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_EventAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_EventAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (AttributeCFlags *)(arg1)->EventAttributep(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_EventAttribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  AttributeCFlags *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_EventAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (AttributeCFlags *)(arg1)->EventAttributep((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeCFlags,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_EventAttribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_EventAttribute__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_EventAttribute__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeCFlags, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_EventAttribute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_EventAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttribute(Idx,AttributeCFlags const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::EventAttributep(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClearStateAttributes(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearStateAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearStateAttributes",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClearStateAttributes",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->ClearStateAttributes();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsState();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)(arg1)->InsState(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsState((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  AttributeVoid *arg2 = 0 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_InsState",2,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsState((AttributeVoid const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  AttributeVoid *arg3 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",3,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_InsState",3,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = (Idx)(arg1)->InsState((std::string const &)*arg2,(AttributeVoid const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeVoid *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",2,"Idx");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState",3,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsState",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_InsState",3,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = (bool)(arg1)->InsState(arg2,(AttributeVoid const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsState(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_System_InsState__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_InsState__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsState__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsState__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_InsState__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_InsState__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState()\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState(AttributeVoid const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState(std::string const &,AttributeVoid const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsState(Idx,AttributeVoid const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrStateAttribute(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrStateAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrStateAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrStateAttribute",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrStateAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrStateAttribute(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_StateAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeVoid *arg3 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttribute",2,"Idx");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttribute",3,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_StateAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_StateAttribute",3,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      (arg1)->StateAttribute(arg2,(AttributeVoid const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_StateAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  AttributeVoid *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttributep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttributep",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttributep",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_StateAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (AttributeVoid *)(arg1)->StateAttributep(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeVoid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_StateAttribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_StateAttribute__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_StateAttribute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_StateAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttribute(Idx,AttributeVoid const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::StateAttributep(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClearTransAttributes(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearTransAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearTransAttributes",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClearTransAttributes",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->ClearTransAttributes();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx arg4 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",3,"Idx");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",4,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetTransition",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Idx)lua_tonumber(L, 4);
  {
    try{
      result = (bool)(arg1)->SetTransition(arg2,arg3,arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetTransition",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  {
    try{
      result = (bool)(arg1)->SetTransition((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Transition *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetTransition",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("System_SetTransition",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (bool)(arg1)->SetTransition((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetTransition__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Transition *arg2 = 0 ;
  AttributeVoid *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",2,"Transition const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition",3,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetTransition",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("System_SetTransition",2,SWIGTYPE_p_Transition);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_SetTransition",3,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      result = (bool)(arg1)->SetTransition((Transition const &)*arg2,(AttributeVoid const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetTransition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetTransition__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_SetTransition__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_System_SetTransition__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_System_SetTransition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition(Idx,Idx,Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition(std::string const &,std::string const &,std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition(Transition const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetTransition(Transition const &,AttributeVoid const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrTransAttribute(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Transition *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrTransAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrTransAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrTransAttribute",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrTransAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("System_ClrTransAttribute",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      (arg1)->ClrTransAttribute((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_TransAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Transition *arg2 = 0 ;
  AttributeVoid *arg3 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttribute",2,"Transition const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttribute",3,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_TransAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("System_TransAttribute",2,SWIGTYPE_p_Transition);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_TransAttribute",3,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      (arg1)->TransAttribute((Transition const &)*arg2,(AttributeVoid const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_TransAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Transition *arg2 = 0 ;
  AttributeVoid *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttributep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttributep",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttributep",2,"Transition const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_TransAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Transition,0))){
    SWIG_fail_ptr("System_TransAttribute",2,SWIGTYPE_p_Transition);
  }
  
  {
    try{
      result = (AttributeVoid *)(arg1)->TransAttributep((Transition const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeVoid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_TransAttribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_TransAttribute__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Transition, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_System_TransAttribute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_TransAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttribute(Transition const &,AttributeVoid const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::TransAttributep(Transition const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClearGlobalAttribute(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearGlobalAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClearGlobalAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClearGlobalAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->ClearGlobalAttribute();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_GlobalAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  AttributeVoid *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttribute",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttribute",2,"AttributeVoid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_GlobalAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AttributeVoid,0))){
    SWIG_fail_ptr("System_GlobalAttribute",2,SWIGTYPE_p_AttributeVoid);
  }
  
  {
    try{
      (arg1)->GlobalAttribute((AttributeVoid const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_GlobalAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  AttributeVoid *result = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttributep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttributep",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_GlobalAttribute",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = (AttributeVoid *)(arg1)->GlobalAttributep();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttributeVoid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_GlobalAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_System_GlobalAttribute__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AttributeVoid, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_GlobalAttribute__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_GlobalAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttribute(AttributeVoid const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::GlobalAttributep()\n");
  lua_error(L);return 0;
}


static int _wrap_System_InsControllableEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsControllableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsControllableEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsControllableEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsControllableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsControllableEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsControllableEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsControllableEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsControllableEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsControllableEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsControllableEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_InsUncontrollableEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUncontrollableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsUncontrollableEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUncontrollableEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUncontrollableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsUncontrollableEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUncontrollableEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUncontrollableEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUncontrollableEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsUncontrollableEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUncontrollableEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_SetControllable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetControllable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetControllable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetControllable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetControllable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_SetControllable",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->SetControllable((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetControllable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetControllable__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetControllable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetControllable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetControllable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetControllable(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrControllable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrControllable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrControllable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrControllable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrControllable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrControllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_ClrControllable",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->ClrControllable((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrControllable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_ClrControllable__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrControllable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrControllable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_ClrControllable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrControllable(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_Controllable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Controllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Controllable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Controllable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Controllable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Controllable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Controllable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Controllable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Controllable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Controllable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable(Idx) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Controllable(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_ControllableEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ControllableEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ControllableEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ControllableEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->ControllableEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_UncontrollableEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UncontrollableEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UncontrollableEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_UncontrollableEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->UncontrollableEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsObservableEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsObservableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsObservableEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsObservableEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsObservableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsObservableEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsObservableEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsObservableEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsObservableEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsObservableEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsObservableEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_InsUnobservableEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUnobservableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsUnobservableEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUnobservableEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUnobservableEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsUnobservableEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUnobservableEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUnobservableEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUnobservableEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsUnobservableEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnobservableEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_SetObservable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetObservable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetObservable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetObservable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetObservable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_SetObservable",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->SetObservable((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetObservable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetObservable__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetObservable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetObservable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetObservable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetObservable(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrObservable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrObservable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrObservable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrObservable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrObservable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrObservable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_ClrObservable",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->ClrObservable((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrObservable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_ClrObservable__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrObservable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrObservable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_ClrObservable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrObservable(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_Observable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Observable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Observable(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Observable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Observable",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Observable((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Observable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Observable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Observable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Observable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable(Idx) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Observable(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_ObservableEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ObservableEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ObservableEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ObservableEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->ObservableEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_UnobservableEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UnobservableEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UnobservableEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_UnobservableEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->UnobservableEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsForcibleEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsForcibleEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsForcibleEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsForcibleEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsForcibleEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsForcibleEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsForcibleEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsForcibleEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsForcibleEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsForcibleEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsForcibleEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_InsUnforcibleEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUnforcibleEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsUnforcibleEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUnforcibleEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsUnforcibleEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsUnforcibleEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsUnforcibleEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUnforcibleEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsUnforcibleEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsUnforcibleEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsUnforcibleEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_SetForcible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetForcible(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetForcible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetForcible((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetForcible__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_SetForcible",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->SetForcible((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetForcible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetForcible__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetForcible__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetForcible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetForcible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetForcible(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_ClrForcible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->ClrForcible(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrForcible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->ClrForcible((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrForcible__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ClrForcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_ClrForcible",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->ClrForcible((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_ClrForcible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_ClrForcible__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrForcible__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_ClrForcible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_ClrForcible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ClrForcible(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_Forcible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Forcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Forcible(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Forcible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Forcible",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Forcible((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Forcible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Forcible__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Forcible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Forcible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible(Idx) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Forcible(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_ForcibleEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ForcibleEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::ForcibleEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_ForcibleEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->ForcibleEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_UnforcibleEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UnforcibleEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::UnforcibleEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_UnforcibleEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->UnforcibleEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsHighlevelEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsHighlevelEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsHighlevelEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsHighlevelEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsHighlevelEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsHighlevelEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsHighlevelEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsHighlevelEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsHighlevelEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsHighlevelEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsHighlevelEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_InsLowlevelEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsLowlevelEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->InsLowlevelEvent(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsLowlevelEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Idx result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_InsLowlevelEvent",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (Idx)(arg1)->InsLowlevelEvent((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_InsLowlevelEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsLowlevelEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_InsLowlevelEvent__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_InsLowlevelEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::InsLowlevelEvent(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_SetHighlevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetHighlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetHighlevel(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetHighlevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetHighlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetHighlevel((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetHighlevel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetHighlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_SetHighlevel",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->SetHighlevel((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetHighlevel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetHighlevel__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetHighlevel__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetHighlevel__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetHighlevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetHighlevel(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_SetLowlevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetLowlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->SetLowlevel(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetLowlevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetLowlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->SetLowlevel((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetLowlevel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_SetLowlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("System_SetLowlevel",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->SetLowlevel((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_SetLowlevel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_System_SetLowlevel__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetLowlevel__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_SetLowlevel__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_SetLowlevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel(Idx)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel(std::string const &)\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::SetLowlevel(EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_System_Highlevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Highlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Highlevel(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Highlevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Highlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Highlevel((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Highlevel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Highlevel__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Highlevel__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Highlevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel(Idx) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Highlevel(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_Lowlevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  Idx arg2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Lowlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Lowlevel(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Lowlevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_Lowlevel",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (bool)((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->Lowlevel((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_Lowlevel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Lowlevel__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_System_Lowlevel__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'System_Lowlevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel(Idx) const\n"
    "    TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::Lowlevel(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_System_HighlevelEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::HighlevelEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::HighlevelEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_HighlevelEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->HighlevelEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_System_LowlevelEvents(lua_State* L) {
  int SWIG_arg = 0;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) 0 ;
  EventSet result;
  
  SWIG_check_num_args("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::LowlevelEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid >::LowlevelEvents",1,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("System_LowlevelEvents",1,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      result = ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const *)arg1)->LowlevelEvents();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    EventSet * resultptr = new EventSet((const EventSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NameSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_System(void *obj) {
TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg1 = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) obj;
delete arg1;
}
static int _proxy__wrap_new_System(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_System);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_System_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_System_methods[]= {
    { "New", _wrap_System_New},
    { "Copy", _wrap_System_Copy},
    { "Version", _wrap_System_Version},
    { "ClearAttributes", _wrap_System_ClearAttributes},
    { "UpdateAttributes", _wrap_System_UpdateAttributes},
    { "States", _wrap_System_States},
    { "Alphabet", _wrap_System_Alphabet},
    { "TransRel", _wrap_System_TransRel},
    { "ClearEventAttributes", _wrap_System_ClearEventAttributes},
    { "InsEvents", _wrap_System_InsEvents},
    { "InsEvent", _wrap_System_InsEvent},
    { "ClrEventAttribute", _wrap_System_ClrEventAttribute},
    { "EventAttribute", _wrap_System_EventAttribute},
    { "ClearStateAttributes", _wrap_System_ClearStateAttributes},
    { "InsState", _wrap_System_InsState},
    { "ClrStateAttribute", _wrap_System_ClrStateAttribute},
    { "StateAttribute", _wrap_System_StateAttribute},
    { "ClearTransAttributes", _wrap_System_ClearTransAttributes},
    { "SetTransition", _wrap_System_SetTransition},
    { "ClrTransAttribute", _wrap_System_ClrTransAttribute},
    { "TransAttribute", _wrap_System_TransAttribute},
    { "ClearGlobalAttribute", _wrap_System_ClearGlobalAttribute},
    { "GlobalAttribute", _wrap_System_GlobalAttribute},
    { "InsControllableEvent", _wrap_System_InsControllableEvent},
    { "InsUncontrollableEvent", _wrap_System_InsUncontrollableEvent},
    { "SetControllable", _wrap_System_SetControllable},
    { "ClrControllable", _wrap_System_ClrControllable},
    { "Controllable", _wrap_System_Controllable},
    { "ControllableEvents", _wrap_System_ControllableEvents},
    { "UncontrollableEvents", _wrap_System_UncontrollableEvents},
    { "InsObservableEvent", _wrap_System_InsObservableEvent},
    { "InsUnobservableEvent", _wrap_System_InsUnobservableEvent},
    { "SetObservable", _wrap_System_SetObservable},
    { "ClrObservable", _wrap_System_ClrObservable},
    { "Observable", _wrap_System_Observable},
    { "ObservableEvents", _wrap_System_ObservableEvents},
    { "UnobservableEvents", _wrap_System_UnobservableEvents},
    { "InsForcibleEvent", _wrap_System_InsForcibleEvent},
    { "InsUnforcibleEvent", _wrap_System_InsUnforcibleEvent},
    { "SetForcible", _wrap_System_SetForcible},
    { "ClrForcible", _wrap_System_ClrForcible},
    { "Forcible", _wrap_System_Forcible},
    { "ForcibleEvents", _wrap_System_ForcibleEvents},
    { "UnforcibleEvents", _wrap_System_UnforcibleEvents},
    { "InsHighlevelEvent", _wrap_System_InsHighlevelEvent},
    { "InsLowlevelEvent", _wrap_System_InsLowlevelEvent},
    { "SetHighlevel", _wrap_System_SetHighlevel},
    { "SetLowlevel", _wrap_System_SetLowlevel},
    { "Highlevel", _wrap_System_Highlevel},
    { "Lowlevel", _wrap_System_Lowlevel},
    { "HighlevelEvents", _wrap_System_HighlevelEvents},
    { "LowlevelEvents", _wrap_System_LowlevelEvents},
    {0,0}
};
static swig_lua_method swig_System_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_System_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_System_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_System_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_System_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_System_Sf_SwigStatic = {
    "System",
    swig_System_Sf_SwigStatic_methods,
    swig_System_Sf_SwigStatic_attributes,
    swig_System_Sf_SwigStatic_constants,
    swig_System_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_System_bases[] = {0,0};
static const char *swig_System_base_names[] = {"Generator *",0};
static swig_lua_class _wrap_class_System = { "System", "System", &SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,_proxy__wrap_new_System, swig_delete_System, swig_System_methods, swig_System_attributes, &swig_System_Sf_SwigStatic, swig_System_meta, swig_System_bases, swig_System_base_names };

static int _wrap_new_EventSetVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::TBaseVector",0,0)
  {
    try{
      result = (TBaseVector< EventSet > *)new TBaseVector< EventSet >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_NameSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSetVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = 0 ;
  TBaseVector< EventSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::TBaseVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::TBaseVector",1,"TBaseVector< EventSet > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("new_EventSetVector",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = (TBaseVector< EventSet > *)new TBaseVector< EventSet >((TBaseVector< EventSet > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_NameSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSetVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TBaseVector< EventSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::TBaseVector",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::TBaseVector",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::TBaseVector",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TBaseVector< EventSet > *)new TBaseVector< EventSet >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_NameSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSetVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TBaseVector< EventSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::TBaseVector",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::TBaseVector",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TBaseVector< EventSet > *)new TBaseVector< EventSet >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_NameSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventSetVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EventSetVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventSetVector__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EventSetVector__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_EventSetVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EventSetVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::TBaseVector()\n"
    "    TBaseVector< EventSet >::TBaseVector(TBaseVector< EventSet > const &)\n"
    "    TBaseVector< EventSet >::TBaseVector(std::string const &,std::string const &)\n"
    "    TBaseVector< EventSet >::TBaseVector(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Assign(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Assign",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Assign",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Type result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Copy",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Copy",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_EventSet_Sg__Copy((TBaseVector< NameSet > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Clear",1,"TBaseVector< EventSet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Clear",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Write",1,"TBaseVector< EventSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Write",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Write",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< EventSet >::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Write",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Write",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EventSetVector_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Write(Type const *) const\n"
    "    TBaseVector< EventSet >::Write() const\n"
    "    TBaseVector< EventSet >::Write(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< EventSet >::Write(std::string const &,std::string const &) const\n"
    "    TBaseVector< EventSet >::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((TBaseVector< EventSet > const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((TBaseVector< EventSet > const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::ToString",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = ((TBaseVector< EventSet > const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventSetVector_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::ToString(std::string const &,Type const *) const\n"
    "    TBaseVector< EventSet >::ToString(std::string const &) const\n"
    "    TBaseVector< EventSet >::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",1,"TBaseVector< EventSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EventSetVector_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::DWrite(Type const *) const\n"
    "    TBaseVector< EventSet >::DWrite() const\n"
    "    TBaseVector< EventSet >::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< EventSet >::DWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< EventSet >::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::SWrite",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_SWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",1,"TBaseVector< EventSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",1,"TBaseVector< EventSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< EventSet > const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EventSetVector_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::XWrite(Type const *) const\n"
    "    TBaseVector< EventSet >::XWrite() const\n"
    "    TBaseVector< EventSet >::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< EventSet >::XWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< EventSet >::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Read",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< EventSet >::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Read",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Read",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EventSetVector_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Read(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< EventSet >::Read(std::string const &,std::string const &)\n"
    "    TBaseVector< EventSet >::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("EventSetVector_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EventSetVector_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::FromString(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< EventSet >::FromString(std::string const &,std::string const &)\n"
    "    TBaseVector< EventSet >::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector___tostring(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::__str__",1,"TBaseVector< EventSet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector___tostring",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_EventSet_Sg____str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Name",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Name",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< EventSet > const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Name",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Name",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Name() const\n"
    "    TBaseVector< EventSet >::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Size",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Size",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = (Idx)((TBaseVector< EventSet > const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Size",1,"TBaseVector< EventSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Size",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Size",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Size(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventSetVector_Size__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_Size__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Size() const\n"
    "    TBaseVector< EventSet >::Size(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Empty",1,"TBaseVector< EventSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Empty",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  {
    try{
      result = (bool)((TBaseVector< EventSet > const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_At__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::At",1,"TBaseVector< EventSet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::At",2,"TBaseVector< NameSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_At",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (NameSet *) &((TBaseVector< EventSet > const *)arg1)->At((TBaseVector< NameSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_At__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::At",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::At",2,"TBaseVector< NameSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_At",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (NameSet *) &(arg1)->At((TBaseVector< NameSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_At(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_At__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_At__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_At'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::At(TBaseVector< NameSet >::Position const &) const\n"
    "    TBaseVector< EventSet >::At(TBaseVector< NameSet >::Position const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  unsigned int arg2 ;
  NameSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::__getitem__",1,"TBaseVector< EventSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector___getitem",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try{
      result = (NameSet *) &TBaseVector_Sl_EventSet_Sg____getitem__(arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  unsigned int arg2 ;
  NameSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::__setitem__",1,"TBaseVector< EventSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::__setitem__",3,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector___setitem",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetVector___setitem",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      TBaseVector_Sl_EventSet_Sg____setitem__(arg1,arg2,(NameSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  NameSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",2,"TBaseVector< NameSet >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",3,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetVector_Replace",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->Replace((TBaseVector< NameSet >::Position const &)*arg2,(NameSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",2,"TBaseVector< NameSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Replace((TBaseVector< NameSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Replace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventSetVector_Replace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_Replace__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Replace(TBaseVector< NameSet >::Position const &,NameSet const &)\n"
    "    TBaseVector< EventSet >::Replace(TBaseVector< NameSet >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Erase(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Erase",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Erase",2,"TBaseVector< NameSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Erase",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_Erase",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      (arg1)->Erase((TBaseVector< NameSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  NameSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",2,"TBaseVector< NameSet >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",3,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetVector_Insert",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->Insert((TBaseVector< NameSet >::Position const &)*arg2,(NameSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",2,"TBaseVector< NameSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::Insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Insert((TBaseVector< NameSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventSetVector_Insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_Insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Insert(TBaseVector< NameSet >::Position const &,NameSet const &)\n"
    "    TBaseVector< EventSet >::Insert(TBaseVector< NameSet >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_PushBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  NameSet *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::PushBack",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::PushBack",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetVector_PushBack",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->PushBack((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_PushBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::PushBack",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::PushBack",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->PushBack((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_PushBack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_PushBack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_PushBack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_PushBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::PushBack(NameSet const &)\n"
    "    TBaseVector< EventSet >::PushBack(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_Append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  NameSet *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Append",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Append",2,"NameSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Append",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetVector_Append",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->Append((NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::Append",1,"TBaseVector< EventSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::Append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_Append",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Append((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_Append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_Append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventSetVector_Append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_Append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::Append(NameSet const &)\n"
    "    TBaseVector< EventSet >::Append(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventSetVector_FilenameAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::FilenameAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::FilenameAt",1,"TBaseVector< EventSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::FilenameAt",2,"TBaseVector< NameSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< EventSet >::FilenameAt",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FilenameAt((TBaseVector< NameSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_FilenameAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) 0 ;
  TBaseVector< NameSet >::Position *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< EventSet >::FilenameAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< EventSet >::FilenameAt",1,"TBaseVector< EventSet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< EventSet >::FilenameAt",2,"TBaseVector< NameSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("EventSetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("EventSetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< EventSet > const *)arg1)->FilenameAt((TBaseVector< NameSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetVector_FilenameAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventSetVector_FilenameAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_EventSetVector_FilenameAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventSetVector_FilenameAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< EventSet >::FilenameAt(TBaseVector< NameSet >::Position const &,std::string const &)\n"
    "    TBaseVector< EventSet >::FilenameAt(TBaseVector< NameSet >::Position const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_EventSetVector(void *obj) {
TBaseVector< EventSet > *arg1 = (TBaseVector< EventSet > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventSetVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventSetVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventSetVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventSetVector_methods[]= {
    { "Assign", _wrap_EventSetVector_Assign},
    { "Copy", _wrap_EventSetVector_Copy},
    { "Clear", _wrap_EventSetVector_Clear},
    { "Write", _wrap_EventSetVector_Write},
    { "ToString", _wrap_EventSetVector_ToString},
    { "DWrite", _wrap_EventSetVector_DWrite},
    { "SWrite", _wrap_EventSetVector_SWrite},
    { "XWrite", _wrap_EventSetVector_XWrite},
    { "Read", _wrap_EventSetVector_Read},
    { "FromString", _wrap_EventSetVector_FromString},
    { "__tostring", _wrap_EventSetVector___tostring},
    { "Name", _wrap_EventSetVector_Name},
    { "Size", _wrap_EventSetVector_Size},
    { "Empty", _wrap_EventSetVector_Empty},
    { "At", _wrap_EventSetVector_At},
    { "__getitem", _wrap_EventSetVector___getitem},
    { "__setitem", _wrap_EventSetVector___setitem},
    { "Replace", _wrap_EventSetVector_Replace},
    { "Erase", _wrap_EventSetVector_Erase},
    { "Insert", _wrap_EventSetVector_Insert},
    { "PushBack", _wrap_EventSetVector_PushBack},
    { "Append", _wrap_EventSetVector_Append},
    { "FilenameAt", _wrap_EventSetVector_FilenameAt},
    {0,0}
};
static swig_lua_method swig_EventSetVector_meta[] = {
    { "__tostring", _wrap_EventSetVector___tostring},
    { "__getitem", _wrap_EventSetVector___getitem},
    { "__setitem", _wrap_EventSetVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_EventSetVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventSetVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventSetVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventSetVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventSetVector_Sf_SwigStatic = {
    "EventSetVector",
    swig_EventSetVector_Sf_SwigStatic_methods,
    swig_EventSetVector_Sf_SwigStatic_attributes,
    swig_EventSetVector_Sf_SwigStatic_constants,
    swig_EventSetVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventSetVector_bases[] = {0,0};
static const char *swig_EventSetVector_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_EventSetVector = { "EventSetVector", "EventSetVector", &SWIGTYPE_p_TBaseVectorT_NameSet_t,_proxy__wrap_new_EventSetVector, swig_delete_EventSetVector, swig_EventSetVector_methods, swig_EventSetVector_attributes, &swig_EventSetVector_Sf_SwigStatic, swig_EventSetVector_meta, swig_EventSetVector_bases, swig_EventSetVector_base_names };

static int _wrap_new_AlphabetVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::TBaseVector",0,0)
  {
    try{
      result = (TBaseVector< Alphabet > *)new TBaseVector< Alphabet >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlphabetVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = 0 ;
  TBaseVector< Alphabet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::TBaseVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::TBaseVector",1,"TBaseVector< Alphabet > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("new_AlphabetVector",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = (TBaseVector< Alphabet > *)new TBaseVector< Alphabet >((TBaseVector< Alphabet > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlphabetVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TBaseVector< Alphabet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::TBaseVector",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::TBaseVector",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::TBaseVector",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TBaseVector< Alphabet > *)new TBaseVector< Alphabet >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlphabetVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TBaseVector< Alphabet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::TBaseVector",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::TBaseVector",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TBaseVector< Alphabet > *)new TBaseVector< Alphabet >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlphabetVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AlphabetVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AlphabetVector__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AlphabetVector__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AlphabetVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AlphabetVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::TBaseVector()\n"
    "    TBaseVector< Alphabet >::TBaseVector(TBaseVector< Alphabet > const &)\n"
    "    TBaseVector< Alphabet >::TBaseVector(std::string const &,std::string const &)\n"
    "    TBaseVector< Alphabet >::TBaseVector(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Assign(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Assign",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Assign",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Type result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Copy",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Copy",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_Alphabet_Sg__Copy((TBaseVector< TaNameSet< AttributeCFlags > > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Clear",1,"TBaseVector< Alphabet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Clear",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",1,"TBaseVector< Alphabet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Write",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Write",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Write",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Write",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Write",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AlphabetVector_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Write(Type const *) const\n"
    "    TBaseVector< Alphabet >::Write() const\n"
    "    TBaseVector< Alphabet >::Write(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Alphabet >::Write(std::string const &,std::string const &) const\n"
    "    TBaseVector< Alphabet >::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((TBaseVector< Alphabet > const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((TBaseVector< Alphabet > const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::ToString",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = ((TBaseVector< Alphabet > const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AlphabetVector_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::ToString(std::string const &,Type const *) const\n"
    "    TBaseVector< Alphabet >::ToString(std::string const &) const\n"
    "    TBaseVector< Alphabet >::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",1,"TBaseVector< Alphabet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AlphabetVector_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::DWrite(Type const *) const\n"
    "    TBaseVector< Alphabet >::DWrite() const\n"
    "    TBaseVector< Alphabet >::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Alphabet >::DWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< Alphabet >::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::SWrite",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_SWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",1,"TBaseVector< Alphabet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",1,"TBaseVector< Alphabet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Alphabet > const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AlphabetVector_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::XWrite(Type const *) const\n"
    "    TBaseVector< Alphabet >::XWrite() const\n"
    "    TBaseVector< Alphabet >::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Alphabet >::XWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< Alphabet >::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Read",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Read",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Read",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AlphabetVector_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Read(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< Alphabet >::Read(std::string const &,std::string const &)\n"
    "    TBaseVector< Alphabet >::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AlphabetVector_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AlphabetVector_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::FromString(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< Alphabet >::FromString(std::string const &,std::string const &)\n"
    "    TBaseVector< Alphabet >::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector___tostring(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::__str__",1,"TBaseVector< Alphabet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector___tostring",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_Alphabet_Sg____str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Name",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Name",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< Alphabet > const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Name",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Name",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Name() const\n"
    "    TBaseVector< Alphabet >::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Size",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Size",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = (Idx)((TBaseVector< Alphabet > const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Size",1,"TBaseVector< Alphabet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Size",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Size",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Size(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AlphabetVector_Size__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_Size__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Size() const\n"
    "    TBaseVector< Alphabet >::Size(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Empty",1,"TBaseVector< Alphabet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Empty",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  {
    try{
      result = (bool)((TBaseVector< Alphabet > const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_At__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::At",1,"TBaseVector< Alphabet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::At",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_At",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *) &((TBaseVector< Alphabet > const *)arg1)->At((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_At__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::At",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::At",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_At",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (TaNameSet< AttributeCFlags > *) &(arg1)->At((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_At(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_At__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_At__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_At'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::At(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &) const\n"
    "    TBaseVector< Alphabet >::At(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  unsigned int arg2 ;
  TaNameSet< AttributeCFlags > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::__getitem__",1,"TBaseVector< Alphabet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector___getitem",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try{
      result = (TaNameSet< AttributeCFlags > *) &TBaseVector_Sl_Alphabet_Sg____getitem__(arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  unsigned int arg2 ;
  TaNameSet< AttributeCFlags > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::__setitem__",1,"TBaseVector< Alphabet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::__setitem__",3,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector___setitem",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("AlphabetVector___setitem",3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      TBaseVector_Sl_Alphabet_Sg____setitem__(arg1,arg2,(TaNameSet< AttributeCFlags > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  TaNameSet< AttributeCFlags > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",3,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("AlphabetVector_Replace",3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      (arg1)->Replace((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2,(TaNameSet< AttributeCFlags > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Replace((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Replace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AlphabetVector_Replace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_Replace__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Replace(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &,TaNameSet< AttributeCFlags > const &)\n"
    "    TBaseVector< Alphabet >::Replace(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Erase(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Erase",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Erase",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Erase",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_Erase",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      (arg1)->Erase((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  TaNameSet< AttributeCFlags > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",3,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("AlphabetVector_Insert",3,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      (arg1)->Insert((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2,(TaNameSet< AttributeCFlags > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::Insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Insert((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AlphabetVector_Insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_Insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Insert(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &,TaNameSet< AttributeCFlags > const &)\n"
    "    TBaseVector< Alphabet >::Insert(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_PushBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TaNameSet< AttributeCFlags > *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::PushBack",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::PushBack",2,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("AlphabetVector_PushBack",2,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      (arg1)->PushBack((TaNameSet< AttributeCFlags > const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_PushBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::PushBack",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::PushBack",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->PushBack((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_PushBack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_PushBack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_PushBack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_PushBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::PushBack(TaNameSet< AttributeCFlags > const &)\n"
    "    TBaseVector< Alphabet >::PushBack(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_Append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TaNameSet< AttributeCFlags > *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Append",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Append",2,"TaNameSet< AttributeCFlags > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Append",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t,0))){
    SWIG_fail_ptr("AlphabetVector_Append",2,SWIGTYPE_p_TaNameSetT_AttributeCFlags_t);
  }
  
  {
    try{
      (arg1)->Append((TaNameSet< AttributeCFlags > const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::Append",1,"TBaseVector< Alphabet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::Append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_Append",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Append((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_Append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TaNameSetT_AttributeCFlags_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_Append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AlphabetVector_Append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_Append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::Append(TaNameSet< AttributeCFlags > const &)\n"
    "    TBaseVector< Alphabet >::Append(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetVector_FilenameAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::FilenameAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::FilenameAt",1,"TBaseVector< Alphabet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::FilenameAt",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Alphabet >::FilenameAt",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FilenameAt((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_FilenameAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) 0 ;
  TBaseVector< TaNameSet< AttributeCFlags > >::Position *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Alphabet >::FilenameAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Alphabet >::FilenameAt",1,"TBaseVector< Alphabet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Alphabet >::FilenameAt",2,"TBaseVector< TaNameSet< AttributeCFlags > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,0))){
    SWIG_fail_ptr("AlphabetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("AlphabetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< Alphabet > const *)arg1)->FilenameAt((TBaseVector< TaNameSet< AttributeCFlags > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetVector_FilenameAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetVector_FilenameAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AlphabetVector_FilenameAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetVector_FilenameAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Alphabet >::FilenameAt(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &,std::string const &)\n"
    "    TBaseVector< Alphabet >::FilenameAt(TBaseVector< TaNameSet< AttributeCFlags > >::Position const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_AlphabetVector(void *obj) {
TBaseVector< Alphabet > *arg1 = (TBaseVector< Alphabet > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AlphabetVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AlphabetVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AlphabetVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AlphabetVector_methods[]= {
    { "Assign", _wrap_AlphabetVector_Assign},
    { "Copy", _wrap_AlphabetVector_Copy},
    { "Clear", _wrap_AlphabetVector_Clear},
    { "Write", _wrap_AlphabetVector_Write},
    { "ToString", _wrap_AlphabetVector_ToString},
    { "DWrite", _wrap_AlphabetVector_DWrite},
    { "SWrite", _wrap_AlphabetVector_SWrite},
    { "XWrite", _wrap_AlphabetVector_XWrite},
    { "Read", _wrap_AlphabetVector_Read},
    { "FromString", _wrap_AlphabetVector_FromString},
    { "__tostring", _wrap_AlphabetVector___tostring},
    { "Name", _wrap_AlphabetVector_Name},
    { "Size", _wrap_AlphabetVector_Size},
    { "Empty", _wrap_AlphabetVector_Empty},
    { "At", _wrap_AlphabetVector_At},
    { "__getitem", _wrap_AlphabetVector___getitem},
    { "__setitem", _wrap_AlphabetVector___setitem},
    { "Replace", _wrap_AlphabetVector_Replace},
    { "Erase", _wrap_AlphabetVector_Erase},
    { "Insert", _wrap_AlphabetVector_Insert},
    { "PushBack", _wrap_AlphabetVector_PushBack},
    { "Append", _wrap_AlphabetVector_Append},
    { "FilenameAt", _wrap_AlphabetVector_FilenameAt},
    {0,0}
};
static swig_lua_method swig_AlphabetVector_meta[] = {
    { "__tostring", _wrap_AlphabetVector___tostring},
    { "__getitem", _wrap_AlphabetVector___getitem},
    { "__setitem", _wrap_AlphabetVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_AlphabetVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AlphabetVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AlphabetVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AlphabetVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AlphabetVector_Sf_SwigStatic = {
    "AlphabetVector",
    swig_AlphabetVector_Sf_SwigStatic_methods,
    swig_AlphabetVector_Sf_SwigStatic_attributes,
    swig_AlphabetVector_Sf_SwigStatic_constants,
    swig_AlphabetVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AlphabetVector_bases[] = {0,0};
static const char *swig_AlphabetVector_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_AlphabetVector = { "AlphabetVector", "AlphabetVector", &SWIGTYPE_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,_proxy__wrap_new_AlphabetVector, swig_delete_AlphabetVector, swig_AlphabetVector_methods, swig_AlphabetVector_attributes, &swig_AlphabetVector_Sf_SwigStatic, swig_AlphabetVector_meta, swig_AlphabetVector_bases, swig_AlphabetVector_base_names };

static int _wrap_new_GeneratorVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::TBaseVector",0,0)
  {
    try{
      result = (TBaseVector< Generator > *)new TBaseVector< Generator >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_Generator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeneratorVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = 0 ;
  TBaseVector< Generator > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::TBaseVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TBaseVector< Generator >::TBaseVector",1,"TBaseVector< Generator > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("new_GeneratorVector",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = (TBaseVector< Generator > *)new TBaseVector< Generator >((TBaseVector< Generator > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_Generator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeneratorVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TBaseVector< Generator > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::TBaseVector",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< Generator >::TBaseVector",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::TBaseVector",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TBaseVector< Generator > *)new TBaseVector< Generator >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_Generator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeneratorVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TBaseVector< Generator > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::TBaseVector",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< Generator >::TBaseVector",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TBaseVector< Generator > *)new TBaseVector< Generator >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_Generator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeneratorVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GeneratorVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GeneratorVector__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_GeneratorVector__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_GeneratorVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GeneratorVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::TBaseVector()\n"
    "    TBaseVector< Generator >::TBaseVector(TBaseVector< Generator > const &)\n"
    "    TBaseVector< Generator >::TBaseVector(std::string const &,std::string const &)\n"
    "    TBaseVector< Generator >::TBaseVector(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Assign(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Assign",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Assign",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Type result;
  
  SWIG_check_num_args("TBaseVector< Generator >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Copy",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Copy",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_Generator_Sg__Copy((TBaseVector< Generator > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Clear",1,"TBaseVector< Generator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Clear",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Write",1,"TBaseVector< Generator > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Write",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Write",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Write",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Write",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Generator >::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Write",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Write",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Write",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Write",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Write",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GeneratorVector_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Write(Type const *) const\n"
    "    TBaseVector< Generator >::Write() const\n"
    "    TBaseVector< Generator >::Write(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Generator >::Write(std::string const &,std::string const &) const\n"
    "    TBaseVector< Generator >::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Generator >::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::ToString",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TBaseVector< Generator >::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_ToString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((TBaseVector< Generator > const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Generator >::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::ToString",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_ToString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((TBaseVector< Generator > const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Generator >::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::ToString",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_ToString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = ((TBaseVector< Generator > const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GeneratorVector_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::ToString(std::string const &,Type const *) const\n"
    "    TBaseVector< Generator >::ToString(std::string const &) const\n"
    "    TBaseVector< Generator >::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",1,"TBaseVector< Generator > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GeneratorVector_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::DWrite(Type const *) const\n"
    "    TBaseVector< Generator >::DWrite() const\n"
    "    TBaseVector< Generator >::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Generator >::DWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< Generator >::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::SWrite",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_SWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",1,"TBaseVector< Generator > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",1,"TBaseVector< Generator > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< Generator > const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GeneratorVector_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::XWrite(Type const *) const\n"
    "    TBaseVector< Generator >::XWrite() const\n"
    "    TBaseVector< Generator >::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< Generator >::XWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< Generator >::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Read",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Generator >::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Read",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Read",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Read",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Read",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Read",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GeneratorVector_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Read(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< Generator >::Read(std::string const &,std::string const &)\n"
    "    TBaseVector< Generator >::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::FromString",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< Generator >::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_FromString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("GeneratorVector_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::FromString",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_FromString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::FromString",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_FromString",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GeneratorVector_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::FromString(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< Generator >::FromString(std::string const &,std::string const &)\n"
    "    TBaseVector< Generator >::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector___tostring(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< Generator >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::__str__",1,"TBaseVector< Generator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector___tostring",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_Generator_Sg____str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Name",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Name",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< Generator > const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Name",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Name",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Name() const\n"
    "    TBaseVector< Generator >::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TBaseVector< Generator >::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Size",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Size",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = (Idx)((TBaseVector< Generator > const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Size",1,"TBaseVector< Generator > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Size",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Size",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Size(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorVector_Size__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_Size__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Size() const\n"
    "    TBaseVector< Generator >::Size(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TBaseVector< Generator >::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Empty",1,"TBaseVector< Generator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Empty",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = (bool)((TBaseVector< Generator > const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_At__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::At",1,"TBaseVector< Generator > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::At",2,"TBaseVector< Generator >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_At",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (Generator *) &((TBaseVector< Generator > const *)arg1)->At((TBaseVector< Generator >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_At__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::At",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::At",2,"TBaseVector< Generator >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_At",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (Generator *) &(arg1)->At((TBaseVector< Generator >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_At(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_At__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_At__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_At'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::At(TBaseVector< Generator >::Position const &) const\n"
    "    TBaseVector< Generator >::At(TBaseVector< Generator >::Position const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  unsigned int arg2 ;
  Generator *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::__getitem__",1,"TBaseVector< Generator > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Generator >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector___getitem",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try{
      result = (Generator *) &TBaseVector_Sl_Generator_Sg____getitem__(arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Generator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  unsigned int arg2 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::__setitem__",1,"TBaseVector< Generator > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< Generator >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Generator >::__setitem__",3,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector___setitem",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("GeneratorVector___setitem",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      TBaseVector_Sl_Generator_Sg____setitem__(arg1,arg2,(Generator const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Replace",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Replace",2,"TBaseVector< Generator >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Replace",3,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Replace",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("GeneratorVector_Replace",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->Replace((TBaseVector< Generator >::Position const &)*arg2,(Generator const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Replace",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Replace",2,"TBaseVector< Generator >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Replace",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Replace((TBaseVector< Generator >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Replace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GeneratorVector_Replace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_Replace__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Replace(TBaseVector< Generator >::Position const &,Generator const &)\n"
    "    TBaseVector< Generator >::Replace(TBaseVector< Generator >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Erase(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Erase",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Erase",2,"TBaseVector< Generator >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Erase",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_Erase",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      (arg1)->Erase((TBaseVector< Generator >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Insert",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Insert",2,"TBaseVector< Generator >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Insert",3,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Insert",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("GeneratorVector_Insert",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->Insert((TBaseVector< Generator >::Position const &)*arg2,(Generator const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Insert",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Insert",2,"TBaseVector< Generator >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::Insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Insert",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Insert((TBaseVector< Generator >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GeneratorVector_Insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_Insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Insert(TBaseVector< Generator >::Position const &,Generator const &)\n"
    "    TBaseVector< Generator >::Insert(TBaseVector< Generator >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_PushBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::PushBack",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::PushBack",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("GeneratorVector_PushBack",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->PushBack((Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_PushBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::PushBack",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::PushBack",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->PushBack((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_PushBack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_PushBack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_PushBack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_PushBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::PushBack(Generator const &)\n"
    "    TBaseVector< Generator >::PushBack(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_Append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Append",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Append",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Append",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("GeneratorVector_Append",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      (arg1)->Append((Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::Append",1,"TBaseVector< Generator > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< Generator >::Append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_Append",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Append((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_Append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_Append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorVector_Append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_Append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::Append(Generator const &)\n"
    "    TBaseVector< Generator >::Append(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorVector_FilenameAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::FilenameAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::FilenameAt",1,"TBaseVector< Generator > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::FilenameAt",2,"TBaseVector< Generator >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< Generator >::FilenameAt",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FilenameAt((TBaseVector< Generator >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_FilenameAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) 0 ;
  TBaseVector< Generator >::Position *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< Generator >::FilenameAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< Generator >::FilenameAt",1,"TBaseVector< Generator > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< Generator >::FilenameAt",2,"TBaseVector< Generator >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("GeneratorVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("GeneratorVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< Generator > const *)arg1)->FilenameAt((TBaseVector< Generator >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorVector_FilenameAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeneratorVector_FilenameAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorVector_FilenameAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorVector_FilenameAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< Generator >::FilenameAt(TBaseVector< Generator >::Position const &,std::string const &)\n"
    "    TBaseVector< Generator >::FilenameAt(TBaseVector< Generator >::Position const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_GeneratorVector(void *obj) {
TBaseVector< Generator > *arg1 = (TBaseVector< Generator > *) obj;
delete arg1;
}
static int _proxy__wrap_new_GeneratorVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GeneratorVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GeneratorVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GeneratorVector_methods[]= {
    { "Assign", _wrap_GeneratorVector_Assign},
    { "Copy", _wrap_GeneratorVector_Copy},
    { "Clear", _wrap_GeneratorVector_Clear},
    { "Write", _wrap_GeneratorVector_Write},
    { "ToString", _wrap_GeneratorVector_ToString},
    { "DWrite", _wrap_GeneratorVector_DWrite},
    { "SWrite", _wrap_GeneratorVector_SWrite},
    { "XWrite", _wrap_GeneratorVector_XWrite},
    { "Read", _wrap_GeneratorVector_Read},
    { "FromString", _wrap_GeneratorVector_FromString},
    { "__tostring", _wrap_GeneratorVector___tostring},
    { "Name", _wrap_GeneratorVector_Name},
    { "Size", _wrap_GeneratorVector_Size},
    { "Empty", _wrap_GeneratorVector_Empty},
    { "At", _wrap_GeneratorVector_At},
    { "__getitem", _wrap_GeneratorVector___getitem},
    { "__setitem", _wrap_GeneratorVector___setitem},
    { "Replace", _wrap_GeneratorVector_Replace},
    { "Erase", _wrap_GeneratorVector_Erase},
    { "Insert", _wrap_GeneratorVector_Insert},
    { "PushBack", _wrap_GeneratorVector_PushBack},
    { "Append", _wrap_GeneratorVector_Append},
    { "FilenameAt", _wrap_GeneratorVector_FilenameAt},
    {0,0}
};
static swig_lua_method swig_GeneratorVector_meta[] = {
    { "__tostring", _wrap_GeneratorVector___tostring},
    { "__getitem", _wrap_GeneratorVector___getitem},
    { "__setitem", _wrap_GeneratorVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_GeneratorVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GeneratorVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GeneratorVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GeneratorVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GeneratorVector_Sf_SwigStatic = {
    "GeneratorVector",
    swig_GeneratorVector_Sf_SwigStatic_methods,
    swig_GeneratorVector_Sf_SwigStatic_attributes,
    swig_GeneratorVector_Sf_SwigStatic_constants,
    swig_GeneratorVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GeneratorVector_bases[] = {0,0};
static const char *swig_GeneratorVector_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_GeneratorVector = { "GeneratorVector", "GeneratorVector", &SWIGTYPE_p_TBaseVectorT_Generator_t,_proxy__wrap_new_GeneratorVector, swig_delete_GeneratorVector, swig_GeneratorVector_methods, swig_GeneratorVector_attributes, &swig_GeneratorVector_Sf_SwigStatic, swig_GeneratorVector_meta, swig_GeneratorVector_bases, swig_GeneratorVector_base_names };

static int _wrap_new_SystemVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::TBaseVector",0,0)
  {
    try{
      result = (TBaseVector< System > *)new TBaseVector< System >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SystemVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = 0 ;
  TBaseVector< System > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::TBaseVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TBaseVector< System >::TBaseVector",1,"TBaseVector< System > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("new_SystemVector",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = (TBaseVector< System > *)new TBaseVector< System >((TBaseVector< System > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SystemVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TBaseVector< System > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::TBaseVector",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< System >::TBaseVector",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::TBaseVector",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TBaseVector< System > *)new TBaseVector< System >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SystemVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TBaseVector< System > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::TBaseVector",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< System >::TBaseVector",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TBaseVector< System > *)new TBaseVector< System >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SystemVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SystemVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SystemVector__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SystemVector__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SystemVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SystemVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::TBaseVector()\n"
    "    TBaseVector< System >::TBaseVector(TBaseVector< System > const &)\n"
    "    TBaseVector< System >::TBaseVector(std::string const &,std::string const &)\n"
    "    TBaseVector< System >::TBaseVector(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Assign(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Assign",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Assign",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Type result;
  
  SWIG_check_num_args("TBaseVector< System >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Copy",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Copy",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_System_Sg__Copy((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Clear",1,"TBaseVector< System > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Clear",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Write",1,"TBaseVector< System > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< System >::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Write",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Write",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Write",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Write",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< System >::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Write",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Write",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Write",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< System > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Write",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Write",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< System > const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SystemVector_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Write(Type const *) const\n"
    "    TBaseVector< System >::Write() const\n"
    "    TBaseVector< System >::Write(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< System >::Write(std::string const &,std::string const &) const\n"
    "    TBaseVector< System >::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< System >::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::ToString",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TBaseVector< System >::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((TBaseVector< System > const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< System >::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::ToString",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((TBaseVector< System > const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< System >::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::ToString",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_ToString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = ((TBaseVector< System > const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SystemVector_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::ToString(std::string const &,Type const *) const\n"
    "    TBaseVector< System >::ToString(std::string const &) const\n"
    "    TBaseVector< System >::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::DWrite",1,"TBaseVector< System > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< System >::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::DWrite",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::DWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< System >::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::DWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< System > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::DWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< System > const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SystemVector_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::DWrite(Type const *) const\n"
    "    TBaseVector< System >::DWrite() const\n"
    "    TBaseVector< System >::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< System >::DWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< System >::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::SWrite",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_SWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::XWrite",1,"TBaseVector< System > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< System >::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::XWrite",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::XWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< System >::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< System > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::XWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< System > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::XWrite",1,"TBaseVector< System > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< System > const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SystemVector_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::XWrite(Type const *) const\n"
    "    TBaseVector< System >::XWrite() const\n"
    "    TBaseVector< System >::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< System >::XWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< System >::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Read",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< System >::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Read",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Read",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Read",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Read",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Read",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SystemVector_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Read(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< System >::Read(std::string const &,std::string const &)\n"
    "    TBaseVector< System >::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::FromString",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< System >::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("SystemVector_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::FromString",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::FromString",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_FromString",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SystemVector_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::FromString(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< System >::FromString(std::string const &,std::string const &)\n"
    "    TBaseVector< System >::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector___tostring(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< System >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::__str__",1,"TBaseVector< System > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector___tostring",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_System_Sg____str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Name",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Name",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< System > const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Name",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Name",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Name() const\n"
    "    TBaseVector< System >::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TBaseVector< System >::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Size",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Size",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = (Idx)((TBaseVector< System > const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TBaseVector< System >::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Size",1,"TBaseVector< System > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< System >::Size",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Size",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Size(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemVector_Size__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_Size__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Size() const\n"
    "    TBaseVector< System >::Size(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TBaseVector< System >::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Empty",1,"TBaseVector< System > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Empty",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  {
    try{
      result = (bool)((TBaseVector< System > const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_At__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::At",1,"TBaseVector< System > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::At",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_At",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) &((TBaseVector< System > const *)arg1)->At((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_At__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::At",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::At",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_At",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) &(arg1)->At((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_At(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_At__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_At__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_At'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::At(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &) const\n"
    "    TBaseVector< System >::At(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  unsigned int arg2 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::__getitem__",1,"TBaseVector< System > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< System >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector___getitem",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try{
      result = (TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) &TBaseVector_Sl_System_Sg____getitem__(arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  unsigned int arg2 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::__setitem__",1,"TBaseVector< System > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< System >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< System >::__setitem__",3,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector___setitem",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("SystemVector___setitem",3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      TBaseVector_Sl_System_Sg____setitem__(arg1,arg2,(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Replace",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Replace",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< System >::Replace",3,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Replace",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("SystemVector_Replace",3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->Replace((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2,(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Replace",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Replace",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Replace",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Replace((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Replace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SystemVector_Replace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_Replace__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Replace(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &,TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)\n"
    "    TBaseVector< System >::Replace(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Erase(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Erase",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Erase",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Erase",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_Erase",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      (arg1)->Erase((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Insert",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Insert",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< System >::Insert",3,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Insert",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("SystemVector_Insert",3,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->Insert((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2,(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Insert",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Insert",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::Insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Insert",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Insert((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SystemVector_Insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_Insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Insert(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &,TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)\n"
    "    TBaseVector< System >::Insert(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_PushBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::PushBack",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::PushBack",2,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("SystemVector_PushBack",2,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->PushBack((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_PushBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::PushBack",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::PushBack",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->PushBack((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_PushBack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_PushBack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_PushBack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_PushBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::PushBack(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)\n"
    "    TBaseVector< System >::PushBack(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_Append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Append",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::Append",2,"TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Append",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,0))){
    SWIG_fail_ptr("SystemVector_Append",2,SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t);
  }
  
  {
    try{
      (arg1)->Append((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< System >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::Append",1,"TBaseVector< System > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< System >::Append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_Append",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Append((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_Append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_Append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SystemVector_Append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_Append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::Append(TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > const &)\n"
    "    TBaseVector< System >::Append(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SystemVector_FilenameAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< System >::FilenameAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::FilenameAt",1,"TBaseVector< System > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::FilenameAt",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< System >::FilenameAt",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FilenameAt((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_FilenameAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< System > *arg1 = (TBaseVector< System > *) 0 ;
  TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< System >::FilenameAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< System >::FilenameAt",1,"TBaseVector< System > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< System >::FilenameAt",2,"TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,0))){
    SWIG_fail_ptr("SystemVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("SystemVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< System > const *)arg1)->FilenameAt((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemVector_FilenameAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SystemVector_FilenameAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SystemVector_FilenameAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemVector_FilenameAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< System >::FilenameAt(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &,std::string const &)\n"
    "    TBaseVector< System >::FilenameAt(TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_SystemVector(void *obj) {
TBaseVector< System > *arg1 = (TBaseVector< System > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SystemVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SystemVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SystemVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SystemVector_methods[]= {
    { "Assign", _wrap_SystemVector_Assign},
    { "Copy", _wrap_SystemVector_Copy},
    { "Clear", _wrap_SystemVector_Clear},
    { "Write", _wrap_SystemVector_Write},
    { "ToString", _wrap_SystemVector_ToString},
    { "DWrite", _wrap_SystemVector_DWrite},
    { "SWrite", _wrap_SystemVector_SWrite},
    { "XWrite", _wrap_SystemVector_XWrite},
    { "Read", _wrap_SystemVector_Read},
    { "FromString", _wrap_SystemVector_FromString},
    { "__tostring", _wrap_SystemVector___tostring},
    { "Name", _wrap_SystemVector_Name},
    { "Size", _wrap_SystemVector_Size},
    { "Empty", _wrap_SystemVector_Empty},
    { "At", _wrap_SystemVector_At},
    { "__getitem", _wrap_SystemVector___getitem},
    { "__setitem", _wrap_SystemVector___setitem},
    { "Replace", _wrap_SystemVector_Replace},
    { "Erase", _wrap_SystemVector_Erase},
    { "Insert", _wrap_SystemVector_Insert},
    { "PushBack", _wrap_SystemVector_PushBack},
    { "Append", _wrap_SystemVector_Append},
    { "FilenameAt", _wrap_SystemVector_FilenameAt},
    {0,0}
};
static swig_lua_method swig_SystemVector_meta[] = {
    { "__tostring", _wrap_SystemVector___tostring},
    { "__getitem", _wrap_SystemVector___getitem},
    { "__setitem", _wrap_SystemVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_SystemVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SystemVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SystemVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SystemVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SystemVector_Sf_SwigStatic = {
    "SystemVector",
    swig_SystemVector_Sf_SwigStatic_methods,
    swig_SystemVector_Sf_SwigStatic_attributes,
    swig_SystemVector_Sf_SwigStatic_constants,
    swig_SystemVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SystemVector_bases[] = {0,0};
static const char *swig_SystemVector_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_SystemVector = { "SystemVector", "SystemVector", &SWIGTYPE_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,_proxy__wrap_new_SystemVector, swig_delete_SystemVector, swig_SystemVector_methods, swig_SystemVector_attributes, &swig_SystemVector_Sf_SwigStatic, swig_SystemVector_meta, swig_SystemVector_bases, swig_SystemVector_base_names };

static int _wrap_new_IndexSetVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::TBaseVector",0,0)
  {
    try{
      result = (TBaseVector< IndexSet > *)new TBaseVector< IndexSet >();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_IndexSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = 0 ;
  TBaseVector< IndexSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::TBaseVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::TBaseVector",1,"TBaseVector< IndexSet > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("new_IndexSetVector",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = (TBaseVector< IndexSet > *)new TBaseVector< IndexSet >((TBaseVector< IndexSet > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_IndexSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TBaseVector< IndexSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::TBaseVector",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::TBaseVector",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::TBaseVector",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = (TBaseVector< IndexSet > *)new TBaseVector< IndexSet >((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_IndexSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TBaseVector< IndexSet > *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::TBaseVector",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::TBaseVector",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try{
      result = (TBaseVector< IndexSet > *)new TBaseVector< IndexSet >((std::string const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TBaseVectorT_IndexSet_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexSetVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IndexSetVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IndexSetVector__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IndexSetVector__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IndexSetVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IndexSetVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::TBaseVector()\n"
    "    TBaseVector< IndexSet >::TBaseVector(TBaseVector< IndexSet > const &)\n"
    "    TBaseVector< IndexSet >::TBaseVector(std::string const &,std::string const &)\n"
    "    TBaseVector< IndexSet >::TBaseVector(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Assign(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Type *arg2 = 0 ;
  Type *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Assign",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Assign",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Assign",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_Assign",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = (Type *) &(arg1)->Assign((Type const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Copy(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Type result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Copy",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Copy",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_IndexSet_Sg__Copy((TBaseVector< IndexSet > const *)arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Clear",1,"TBaseVector< IndexSet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Clear",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",1,"TBaseVector< IndexSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_Write",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->Write((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->Write();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_Write",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->Write((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Write",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->Write((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_Write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_Write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IndexSetVector_Write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Write(Type const *) const\n"
    "    TBaseVector< IndexSet >::Write() const\n"
    "    TBaseVector< IndexSet >::Write(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< IndexSet >::Write(std::string const &,std::string const &) const\n"
    "    TBaseVector< IndexSet >::Write(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_ToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  Type *arg3 = (Type *) 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::ToString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",3,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_ToString",3,SWIGTYPE_p_Type);
  }
  
  {
    try{
      result = ((TBaseVector< IndexSet > const *)arg1)->ToString((std::string const &)*arg2,(Type const *)arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_ToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      result = ((TBaseVector< IndexSet > const *)arg1)->ToString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_ToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::ToString",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_ToString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = ((TBaseVector< IndexSet > const *)arg1)->ToString();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_ToString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_ToString__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_ToString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IndexSetVector_ToString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_ToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::ToString(std::string const &,Type const *) const\n"
    "    TBaseVector< IndexSet >::ToString(std::string const &) const\n"
    "    TBaseVector< IndexSet >::ToString() const\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_DWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",1,"TBaseVector< IndexSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->DWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_DWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::DWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->DWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_DWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::DWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_DWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::DWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->DWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_DWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::DWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::DWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_DWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->DWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_DWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_DWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_DWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_DWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_DWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IndexSetVector_DWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_DWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::DWrite(Type const *) const\n"
    "    TBaseVector< IndexSet >::DWrite() const\n"
    "    TBaseVector< IndexSet >::DWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< IndexSet >::DWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< IndexSet >::DWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_SWrite(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::SWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::SWrite",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_SWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->SWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Type *arg2 = (Type *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",1,"TBaseVector< IndexSet > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",2,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",2,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->XWrite((Type const *)arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::XWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->XWrite();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::XWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::XWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->XWrite((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::XWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",1,"TBaseVector< IndexSet > const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::XWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_XWrite",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      ((TBaseVector< IndexSet > const *)arg1)->XWrite((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_XWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_XWrite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_XWrite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_XWrite__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_XWrite__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IndexSetVector_XWrite__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_XWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::XWrite(Type const *) const\n"
    "    TBaseVector< IndexSet >::XWrite() const\n"
    "    TBaseVector< IndexSet >::XWrite(std::string const &,std::string const &,Type const *) const\n"
    "    TBaseVector< IndexSet >::XWrite(std::string const &,std::string const &) const\n"
    "    TBaseVector< IndexSet >::XWrite(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_Read",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Read((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Read",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Read",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Read((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_Read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_Read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IndexSetVector_Read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Read(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< IndexSet >::Read(std::string const &,std::string const &)\n"
    "    TBaseVector< IndexSet >::Read(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_FromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Type *arg4 = (Type *) 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::FromString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",4,"Type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("IndexSetVector_FromString",4,SWIGTYPE_p_Type);
  }
  
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3,(Type const *)arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_FromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_FromString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::FromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::FromString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_FromString",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_FromString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_FromString__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_FromString__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IndexSetVector_FromString__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_FromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::FromString(std::string const &,std::string const &,Type const *)\n"
    "    TBaseVector< IndexSet >::FromString(std::string const &,std::string const &)\n"
    "    TBaseVector< IndexSet >::FromString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector___tostring(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::__str__",1,"TBaseVector< IndexSet > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector___tostring",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = TBaseVector_Sl_IndexSet_Sg____str__(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Name",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Name",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< IndexSet > const *)arg1)->Name();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Name",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Name",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Name((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_Name__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_Name__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Name() const\n"
    "    TBaseVector< IndexSet >::Name(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Idx result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Size",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Size",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = (Idx)((TBaseVector< IndexSet > const *)arg1)->Size();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  Idx arg2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Size",1,"TBaseVector< IndexSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Size",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Size",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      (arg1)->Size(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IndexSetVector_Size__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_Size__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Size() const\n"
    "    TBaseVector< IndexSet >::Size(Idx)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Empty(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  bool result;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Empty",1,"TBaseVector< IndexSet > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Empty",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  {
    try{
      result = (bool)((TBaseVector< IndexSet > const *)arg1)->Empty();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_At__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::At",1,"TBaseVector< IndexSet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::At",2,"TBaseVector< IndexSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_At",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (IndexSet *) &((TBaseVector< IndexSet > const *)arg1)->At((TBaseVector< IndexSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_At__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::At",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::At",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::At",2,"TBaseVector< IndexSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_At",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_At",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (IndexSet *) &(arg1)->At((TBaseVector< IndexSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_At(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_At__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_At__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_At'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::At(TBaseVector< IndexSet >::Position const &) const\n"
    "    TBaseVector< IndexSet >::At(TBaseVector< IndexSet >::Position const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  unsigned int arg2 ;
  IndexSet *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::__getitem__",1,"TBaseVector< IndexSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector___getitem",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try{
      result = (IndexSet *) &TBaseVector_Sl_IndexSet_Sg____getitem__(arg1,arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  unsigned int arg2 ;
  IndexSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::__setitem__",1,"TBaseVector< IndexSet > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::__setitem__",3,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector___setitem",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSetVector___setitem",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      TBaseVector_Sl_IndexSet_Sg____setitem__(arg1,arg2,(IndexSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  IndexSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",2,"TBaseVector< IndexSet >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",3,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSetVector_Replace",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->Replace((TBaseVector< IndexSet >::Position const &)*arg2,(IndexSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",2,"TBaseVector< IndexSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Replace",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_Replace",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Replace((TBaseVector< IndexSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Replace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IndexSetVector_Replace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_Replace__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Replace(TBaseVector< IndexSet >::Position const &,IndexSet const &)\n"
    "    TBaseVector< IndexSet >::Replace(TBaseVector< IndexSet >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Erase(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Erase",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Erase",2,"TBaseVector< IndexSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Erase",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_Erase",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      (arg1)->Erase((TBaseVector< IndexSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  IndexSet *arg3 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",2,"TBaseVector< IndexSet >::Position const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",3,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSetVector_Insert",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->Insert((TBaseVector< IndexSet >::Position const &)*arg2,(IndexSet const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",2,"TBaseVector< IndexSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::Insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Insert",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_Insert",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->Insert((TBaseVector< IndexSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IndexSetVector_Insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_Insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Insert(TBaseVector< IndexSet >::Position const &,IndexSet const &)\n"
    "    TBaseVector< IndexSet >::Insert(TBaseVector< IndexSet >::Position const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_PushBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  IndexSet *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::PushBack",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::PushBack",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSetVector_PushBack",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->PushBack((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_PushBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::PushBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::PushBack",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::PushBack",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_PushBack",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->PushBack((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_PushBack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_PushBack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_PushBack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_PushBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::PushBack(IndexSet const &)\n"
    "    TBaseVector< IndexSet >::PushBack(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_Append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  IndexSet *arg2 = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Append",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Append",2,"IndexSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Append",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("IndexSetVector_Append",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->Append((IndexSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::Append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::Append",1,"TBaseVector< IndexSet > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::Append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_Append",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try{
      (arg1)->Append((std::string const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_Append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_Append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexSetVector_Append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_Append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::Append(IndexSet const &)\n"
    "    TBaseVector< IndexSet >::Append(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexSetVector_FilenameAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::FilenameAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::FilenameAt",1,"TBaseVector< IndexSet > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::FilenameAt",2,"TBaseVector< IndexSet >::Position const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TBaseVector< IndexSet >::FilenameAt",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try{
      (arg1)->FilenameAt((TBaseVector< IndexSet >::Position const &)*arg2,(std::string const &)*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_FilenameAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) 0 ;
  TBaseVector< IndexSet >::Position *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TBaseVector< IndexSet >::FilenameAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TBaseVector< IndexSet >::FilenameAt",1,"TBaseVector< IndexSet > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TBaseVector< IndexSet >::FilenameAt",2,"TBaseVector< IndexSet >::Position const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_IndexSet_t,0))){
    SWIG_fail_ptr("IndexSetVector_FilenameAt",1,SWIGTYPE_p_TBaseVectorT_IndexSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t__size_type,0))){
    SWIG_fail_ptr("IndexSetVector_FilenameAt",2,SWIGTYPE_p_std__vectorT_int_t__size_type);
  }
  
  {
    try{
      result = (std::string *) &((TBaseVector< IndexSet > const *)arg1)->FilenameAt((TBaseVector< IndexSet >::Position const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexSetVector_FilenameAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IndexSetVector_FilenameAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_IndexSet_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t__size_type, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IndexSetVector_FilenameAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexSetVector_FilenameAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TBaseVector< IndexSet >::FilenameAt(TBaseVector< IndexSet >::Position const &,std::string const &)\n"
    "    TBaseVector< IndexSet >::FilenameAt(TBaseVector< IndexSet >::Position const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_IndexSetVector(void *obj) {
TBaseVector< IndexSet > *arg1 = (TBaseVector< IndexSet > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexSetVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexSetVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexSetVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexSetVector_methods[]= {
    { "Assign", _wrap_IndexSetVector_Assign},
    { "Copy", _wrap_IndexSetVector_Copy},
    { "Clear", _wrap_IndexSetVector_Clear},
    { "Write", _wrap_IndexSetVector_Write},
    { "ToString", _wrap_IndexSetVector_ToString},
    { "DWrite", _wrap_IndexSetVector_DWrite},
    { "SWrite", _wrap_IndexSetVector_SWrite},
    { "XWrite", _wrap_IndexSetVector_XWrite},
    { "Read", _wrap_IndexSetVector_Read},
    { "FromString", _wrap_IndexSetVector_FromString},
    { "__tostring", _wrap_IndexSetVector___tostring},
    { "Name", _wrap_IndexSetVector_Name},
    { "Size", _wrap_IndexSetVector_Size},
    { "Empty", _wrap_IndexSetVector_Empty},
    { "At", _wrap_IndexSetVector_At},
    { "__getitem", _wrap_IndexSetVector___getitem},
    { "__setitem", _wrap_IndexSetVector___setitem},
    { "Replace", _wrap_IndexSetVector_Replace},
    { "Erase", _wrap_IndexSetVector_Erase},
    { "Insert", _wrap_IndexSetVector_Insert},
    { "PushBack", _wrap_IndexSetVector_PushBack},
    { "Append", _wrap_IndexSetVector_Append},
    { "FilenameAt", _wrap_IndexSetVector_FilenameAt},
    {0,0}
};
static swig_lua_method swig_IndexSetVector_meta[] = {
    { "__tostring", _wrap_IndexSetVector___tostring},
    { "__getitem", _wrap_IndexSetVector___getitem},
    { "__setitem", _wrap_IndexSetVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_IndexSetVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexSetVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexSetVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexSetVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexSetVector_Sf_SwigStatic = {
    "IndexSetVector",
    swig_IndexSetVector_Sf_SwigStatic_methods,
    swig_IndexSetVector_Sf_SwigStatic_attributes,
    swig_IndexSetVector_Sf_SwigStatic_constants,
    swig_IndexSetVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexSetVector_bases[] = {0,0};
static const char *swig_IndexSetVector_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_IndexSetVector = { "IndexSetVector", "IndexSetVector", &SWIGTYPE_p_TBaseVectorT_IndexSet_t,_proxy__wrap_new_IndexSetVector, swig_delete_IndexSetVector, swig_IndexSetVector_methods, swig_IndexSetVector_attributes, &swig_IndexSetVector_Sf_SwigStatic, swig_IndexSetVector_meta, swig_IndexSetVector_bases, swig_IndexSetVector_base_names };

static int _wrap_Version__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Generator *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("faudes_gen_version",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("faudes_gen_version",1,"Generator const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("faudes_gen_version",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("faudes_gen_version",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Version",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Version",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      faudes_gen_version((Generator const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Generator *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("faudes_gen_version",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("faudes_gen_version",1,"Generator const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("faudes_gen_version",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("faudes_gen_version",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("faudes_gen_version",4,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Version",1,SWIGTYPE_p_Generator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Version",4,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      faudes_gen_version((Generator const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Version__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Version__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Version__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Version'\n"
    "  Possible C/C++ prototypes are:\n"
    "    faudes_version(void)\n"
    "    faudes_gen_version(Generator const &,std::string const &,Generator &)\n"
    "    faudes_gen_version(Generator const &,std::string const &,std::string const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_LanguageConcatenateNonDet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageConcatenateNonDet",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageConcatenateNonDet",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageConcatenateNonDet",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageConcatenateNonDet",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenateNonDet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenateNonDet",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenateNonDet",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageConcatenateNonDet((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageUnionNonDet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageUnionNonDet",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageUnionNonDet",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageUnionNonDet",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageUnionNonDet",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnionNonDet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnionNonDet",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnionNonDet",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageUnionNonDet((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KleeneClosureNonDet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("KleeneClosureNonDet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KleeneClosureNonDet",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("KleeneClosureNonDet",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      KleeneClosureNonDet(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectNonDet(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("ProjectNonDet",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ProjectNonDet",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ProjectNonDet",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("ProjectNonDet",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("ProjectNonDet",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      ProjectNonDet(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectNonDetScc(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("ProjectNonDetScc",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ProjectNonDetScc",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ProjectNonDetScc",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("ProjectNonDetScc",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("ProjectNonDetScc",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      ProjectNonDetScc(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetUnion(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("faudes_set_union",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("faudes_set_union",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("faudes_set_union",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("faudes_set_union",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetUnion",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetUnion",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetUnion",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      faudes_set_union((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetIntersection(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("faudes_set_intersection",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("faudes_set_intersection",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("faudes_set_intersection",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("faudes_set_intersection",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetIntersection",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetIntersection",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetIntersection",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      faudes_set_intersection((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSetDifference(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("faudes_set_difference",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("faudes_set_difference",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("faudes_set_difference",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("faudes_set_difference",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetDifference",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetDifference",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EventSetDifference",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      faudes_set_difference((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProductCompositionMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *result = 0 ;
  
  SWIG_check_num_args("ProductCompositionMap::ProductCompositionMap",0,0)
  {
    try{
      result = (ProductCompositionMap *)new ProductCompositionMap();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProductCompositionMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProductCompositionMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *arg1 = 0 ;
  ProductCompositionMap *result = 0 ;
  
  SWIG_check_num_args("ProductCompositionMap::ProductCompositionMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ProductCompositionMap::ProductCompositionMap",1,"ProductCompositionMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("new_ProductCompositionMap",1,SWIGTYPE_p_ProductCompositionMap);
  }
  
  {
    try{
      result = (ProductCompositionMap *)new ProductCompositionMap((ProductCompositionMap const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProductCompositionMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProductCompositionMap(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ProductCompositionMap__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ProductCompositionMap, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ProductCompositionMap__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ProductCompositionMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProductCompositionMap::ProductCompositionMap()\n"
    "    ProductCompositionMap::ProductCompositionMap(ProductCompositionMap const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProductCompositionMap_CompState(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *arg1 = (ProductCompositionMap *) 0 ;
  Idx arg2 ;
  Idx arg3 ;
  Idx result;
  
  SWIG_check_num_args("ProductCompositionMap::CompState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProductCompositionMap::CompState",1,"ProductCompositionMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProductCompositionMap::CompState",2,"Idx");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ProductCompositionMap::CompState",3,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("ProductCompositionMap_CompState",1,SWIGTYPE_p_ProductCompositionMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  {
    try{
      result = (Idx)((ProductCompositionMap const *)arg1)->CompState(arg2,arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProductCompositionMap_Arg1State(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *arg1 = (ProductCompositionMap *) 0 ;
  Idx arg2 ;
  Idx result;
  
  SWIG_check_num_args("ProductCompositionMap::Arg1State",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProductCompositionMap::Arg1State",1,"ProductCompositionMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProductCompositionMap::Arg1State",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("ProductCompositionMap_Arg1State",1,SWIGTYPE_p_ProductCompositionMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (Idx)((ProductCompositionMap const *)arg1)->Arg1State(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProductCompositionMap_Arg2State(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *arg1 = (ProductCompositionMap *) 0 ;
  Idx arg2 ;
  Idx result;
  
  SWIG_check_num_args("ProductCompositionMap::Arg2State",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProductCompositionMap::Arg2State",1,"ProductCompositionMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProductCompositionMap::Arg2State",2,"Idx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("ProductCompositionMap_Arg2State",1,SWIGTYPE_p_ProductCompositionMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Idx)lua_tonumber(L, 2);
  {
    try{
      result = (Idx)((ProductCompositionMap const *)arg1)->Arg2State(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProductCompositionMap_ToString(lua_State* L) {
  int SWIG_arg = 0;
  ProductCompositionMap *arg1 = (ProductCompositionMap *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ProductCompositionMap::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProductCompositionMap::ToString",1,"ProductCompositionMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("ProductCompositionMap_ToString",1,SWIGTYPE_p_ProductCompositionMap);
  }
  
  {
    try{
      result = ProductCompositionMap_ToString(arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ProductCompositionMap(void *obj) {
ProductCompositionMap *arg1 = (ProductCompositionMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_ProductCompositionMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ProductCompositionMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ProductCompositionMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ProductCompositionMap_methods[]= {
    { "CompState", _wrap_ProductCompositionMap_CompState},
    { "Arg1State", _wrap_ProductCompositionMap_Arg1State},
    { "Arg2State", _wrap_ProductCompositionMap_Arg2State},
    { "ToString", _wrap_ProductCompositionMap_ToString},
    {0,0}
};
static swig_lua_method swig_ProductCompositionMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ProductCompositionMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ProductCompositionMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ProductCompositionMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ProductCompositionMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ProductCompositionMap_SwigStatic = {
    "ProductCompositionMap",
    swig_ProductCompositionMap_SwigStatic_methods,
    swig_ProductCompositionMap_SwigStatic_attributes,
    swig_ProductCompositionMap_SwigStatic_constants,
    swig_ProductCompositionMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ProductCompositionMap_bases[] = {0,0};
static const char *swig_ProductCompositionMap_base_names[] = {"Type *",0};
static swig_lua_class _wrap_class_ProductCompositionMap = { "ProductCompositionMap", "ProductCompositionMap", &SWIGTYPE_p_ProductCompositionMap,_proxy__wrap_new_ProductCompositionMap, swig_delete_ProductCompositionMap, swig_ProductCompositionMap_methods, swig_ProductCompositionMap_attributes, &swig_ProductCompositionMap_SwigStatic, swig_ProductCompositionMap_meta, swig_ProductCompositionMap_bases, swig_ProductCompositionMap_base_names };

static int _wrap_new_SccFilter(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *result = 0 ;
  
  SWIG_check_num_args("SccFilter::SccFilter",0,0)
  {
    try{
      result = (SccFilter *)new SccFilter();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SccFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_Clear(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  
  SWIG_check_num_args("SccFilter::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::Clear",1,"SccFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_Clear",1,SWIGTYPE_p_SccFilter);
  }
  
  {
    try{
      (arg1)->Clear();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_StatesAvoid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("SccFilter::StatesAvoid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::StatesAvoid",1,"SccFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SccFilter::StatesAvoid",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_StatesAvoid",1,SWIGTYPE_p_SccFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("SccFilter_StatesAvoid",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->StatesAvoid((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_StatesRequire__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  StateSet *arg2 = 0 ;
  
  SWIG_check_num_args("SccFilter::StatesRequire",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::StatesRequire",1,"SccFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SccFilter::StatesRequire",2,"StateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_StatesRequire",1,SWIGTYPE_p_SccFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("SccFilter_StatesRequire",2,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      (arg1)->StatesRequire((StateSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_EventsAvoid(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SccFilter::EventsAvoid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::EventsAvoid",1,"SccFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SccFilter::EventsAvoid",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_EventsAvoid",1,SWIGTYPE_p_SccFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("SccFilter_EventsAvoid",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      (arg1)->EventsAvoid((EventSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_IgnoreTrivial(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SccFilter::IgnoreTrivial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::IgnoreTrivial",1,"SccFilter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SccFilter::IgnoreTrivial",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_IgnoreTrivial",1,SWIGTYPE_p_SccFilter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try{
      (arg1)->IgnoreTrivial(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_FindFirst(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SccFilter::FindFirst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::FindFirst",1,"SccFilter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SccFilter::FindFirst",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_FindFirst",1,SWIGTYPE_p_SccFilter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try{
      (arg1)->FindFirst(arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_StatesAvoid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  StateSet *result = 0 ;
  
  SWIG_check_num_args("SccFilter::StatesAvoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::StatesAvoid",1,"SccFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_StatesAvoid",1,SWIGTYPE_p_SccFilter);
  }
  
  {
    try{
      result = (StateSet *) &((SccFilter const *)arg1)->StatesAvoid();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_StatesAvoid(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SccFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SccFilter_StatesAvoid__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SccFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SccFilter_StatesAvoid__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SccFilter_StatesAvoid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SccFilter::StatesAvoid(StateSet const &)\n"
    "    SccFilter::StatesAvoid() const\n");
  lua_error(L);return 0;
}


static int _wrap_SccFilter_StatesRequire__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SccFilter *arg1 = (SccFilter *) 0 ;
  StateSet *result = 0 ;
  
  SWIG_check_num_args("SccFilter::StatesRequire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SccFilter::StatesRequire",1,"SccFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("SccFilter_StatesRequire",1,SWIGTYPE_p_SccFilter);
  }
  
  {
    try{
      result = (StateSet *) &((SccFilter const *)arg1)->StatesRequire();
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IndexSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SccFilter_StatesRequire(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SccFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SccFilter_StatesRequire__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SccFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SccFilter_StatesRequire__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SccFilter_StatesRequire'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SccFilter::StatesRequire(StateSet const &)\n"
    "    SccFilter::StatesRequire() const\n");
  lua_error(L);return 0;
}


static void swig_delete_SccFilter(void *obj) {
SccFilter *arg1 = (SccFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SccFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SccFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SccFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SccFilter_methods[]= {
    { "Clear", _wrap_SccFilter_Clear},
    { "EventsAvoid", _wrap_SccFilter_EventsAvoid},
    { "IgnoreTrivial", _wrap_SccFilter_IgnoreTrivial},
    { "FindFirst", _wrap_SccFilter_FindFirst},
    { "StatesAvoid", _wrap_SccFilter_StatesAvoid},
    { "StatesRequire", _wrap_SccFilter_StatesRequire},
    {0,0}
};
static swig_lua_method swig_SccFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SccFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SccFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SccFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SccFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SccFilter_Sf_SwigStatic = {
    "SccFilter",
    swig_SccFilter_Sf_SwigStatic_methods,
    swig_SccFilter_Sf_SwigStatic_attributes,
    swig_SccFilter_Sf_SwigStatic_constants,
    swig_SccFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SccFilter_bases[] = {0};
static const char *swig_SccFilter_base_names[] = {0};
static swig_lua_class _wrap_class_SccFilter = { "SccFilter", "SccFilter", &SWIGTYPE_p_SccFilter,_proxy__wrap_new_SccFilter, swig_delete_SccFilter, swig_SccFilter_methods, swig_SccFilter_attributes, &swig_SccFilter_Sf_SwigStatic, swig_SccFilter_meta, swig_SccFilter_bases, swig_SccFilter_base_names };

static int _wrap_ComputeScc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  SccFilter *arg2 = 0 ;
  StateSet *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComputeScc",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComputeScc",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComputeScc",2,"SccFilter const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComputeScc",3,"StateSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("ComputeScc",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("ComputeScc",2,SWIGTYPE_p_SccFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("ComputeScc",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)ComputeScc((Generator const &)*arg1,(SccFilter const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComputeScc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  SccFilter *arg2 = 0 ;
  Idx arg3 ;
  StateSet *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComputeScc",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComputeScc",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComputeScc",2,"SccFilter const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComputeScc",3,"Idx");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComputeScc",4,"StateSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("ComputeScc",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("ComputeScc",2,SWIGTYPE_p_SccFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Idx)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("ComputeScc",4,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)ComputeScc((Generator const &)*arg1,(SccFilter const &)*arg2,arg3,*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComputeScc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SccFilter, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComputeScc__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SccFilter, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_IndexSet, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComputeScc__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComputeScc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComputeScc(Generator const &,SccFilter const &,StateSet &)\n"
    "    ComputeScc(Generator const &,SccFilter const &,Idx,StateSet &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComputeNextScc(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  SccFilter *arg2 = 0 ;
  StateSet *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComputeNextScc",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComputeNextScc",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComputeNextScc",2,"SccFilter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComputeNextScc",3,"StateSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("ComputeNextScc",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("ComputeNextScc",2,SWIGTYPE_p_SccFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IndexSet,0))){
    SWIG_fail_ptr("ComputeNextScc",3,SWIGTYPE_p_IndexSet);
  }
  
  {
    try{
      result = (bool)ComputeNextScc((Generator const &)*arg1,*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HasScc(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  SccFilter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("HasScc",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("HasScc",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("HasScc",2,"SccFilter const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("HasScc",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SccFilter,0))){
    SWIG_fail_ptr("HasScc",2,SWIGTYPE_p_SccFilter);
  }
  
  {
    try{
      result = (bool)HasScc((Generator const &)*arg1,(SccFilter const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accessible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("Accessible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Accessible",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Accessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Accessible(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accessible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("Accessible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Accessible",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Accessible",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Accessible",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Accessible",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Accessible((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accessible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accessible__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Accessible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accessible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Accessible(Generator &)\n"
    "    Accessible(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetDifference(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("SetDifference",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetDifference",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetDifference",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SetDifference",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetDifference",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetDifference",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetDifference",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetDifference((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetEquality(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SetEquality",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEquality",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetEquality",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetEquality",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetEquality",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)SetEquality((NameSet const &)*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetExtract(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("AlphabetExtract",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AlphabetExtract",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AlphabetExtract",2,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("AlphabetExtract",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetExtract",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      AlphabetExtract((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetInclusion(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SetInclusion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetInclusion",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetInclusion",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetInclusion",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetInclusion",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)SetInclusion((NameSet const &)*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetIntersection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("SetIntersection",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetIntersection",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetIntersection",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SetIntersection",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetIntersection",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetIntersection",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetIntersection",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetIntersection((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetIntersection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  EventSetVector *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SetIntersection",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetIntersection",1,"EventSetVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetIntersection",2,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("AlphabetIntersection",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetIntersection",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetIntersection((TBaseVector< NameSet > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetIntersection__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SetIntersection",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetIntersection",1,"GeneratorVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetIntersection",2,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("AlphabetIntersection",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetIntersection",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetIntersection((TBaseVector< Generator > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetIntersection(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetIntersection__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetIntersection__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AlphabetIntersection__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetIntersection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetIntersection(EventSet const &,EventSet const &,EventSet &)\n"
    "    SetIntersection(EventSetVector const &,EventSet &)\n"
    "    SetIntersection(GeneratorVector const &,EventSet &)\n");
  lua_error(L);return 0;
}


static int _wrap_AlphabetLanguage(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("AlphabetLanguage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AlphabetLanguage",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AlphabetLanguage",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetLanguage",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("AlphabetLanguage",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      AlphabetLanguage((NameSet const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetUnion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  EventSet *arg3 = 0 ;
  
  SWIG_check_num_args("SetUnion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetUnion",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetUnion",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SetUnion",3,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetUnion",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetUnion",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetUnion",3,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetUnion((NameSet const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetUnion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  EventSetVector *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SetUnion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetUnion",1,"EventSetVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetUnion",2,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_NameSet_t,0))){
    SWIG_fail_ptr("AlphabetUnion",1,SWIGTYPE_p_TBaseVectorT_NameSet_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetUnion",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetUnion((TBaseVector< NameSet > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetUnion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SetUnion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetUnion",1,"GeneratorVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetUnion",2,"EventSet &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("AlphabetUnion",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("AlphabetUnion",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SetUnion((TBaseVector< Generator > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlphabetUnion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_NameSet_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetUnion__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AlphabetUnion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AlphabetUnion__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AlphabetUnion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetUnion(EventSet const &,EventSet const &,EventSet &)\n"
    "    SetUnion(EventSetVector const &,EventSet &)\n"
    "    SetUnion(GeneratorVector const &,EventSet &)\n");
  lua_error(L);return 0;
}


static int _wrap_Automaton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("Automaton",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Automaton",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Automaton",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Automaton(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Automaton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Automaton",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Automaton",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Automaton",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Automaton",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Automaton",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      Automaton(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Automaton(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Automaton__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Automaton__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Automaton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Automaton(Generator &)\n"
    "    Automaton(Generator &,EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Coaccessible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("Coaccessible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Coaccessible",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Coaccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Coaccessible(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Coaccessible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("Coaccessible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Coaccessible",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Coaccessible",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Coaccessible",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Coaccessible",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Coaccessible((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Coaccessible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Coaccessible__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Coaccessible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Coaccessible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coaccessible(Generator &)\n"
    "    Coaccessible(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_Complete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("Complete",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Complete",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Complete(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Complete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("Complete",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Complete",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Complete",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Complete((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Complete__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("Complete",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Complete",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Complete",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Complete",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      Complete(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Complete__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("Complete",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Complete",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Complete",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Complete",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Complete",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Complete",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Complete((Generator const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Complete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Complete__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Complete__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Complete__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Complete__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Complete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Complete(Generator &)\n"
    "    Complete(Generator const &,Generator &)\n"
    "    Complete(Generator &,EventSet const &)\n"
    "    Complete(Generator const &,EventSet const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_Deterministic(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("aDeterministic",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aDeterministic",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aDeterministic",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Deterministic",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Deterministic",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aDeterministic((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EmptyLanguage(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("EmptyLanguage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("EmptyLanguage",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("EmptyLanguage",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EmptyLanguage",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("EmptyLanguage",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      EmptyLanguage((NameSet const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EmptyStringLanguage(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("EmptyStringLanguage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("EmptyStringLanguage",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("EmptyStringLanguage",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("EmptyStringLanguage",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("EmptyStringLanguage",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      EmptyStringLanguage((NameSet const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullLanguage(lua_State* L) {
  int SWIG_arg = 0;
  EventSet *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("FullLanguage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FullLanguage",1,"EventSet const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FullLanguage",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("FullLanguage",1,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("FullLanguage",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      FullLanguage((NameSet const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntegerSum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  long *arg1 = 0 ;
  long *arg2 = 0 ;
  long temp1 ;
  long temp2 ;
  long result;
  
  SWIG_check_num_args("IntegerSum",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("IntegerSum",1,"long const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IntegerSum",2,"long const &");
  temp1=(long)lua_tonumber(L,1); arg1=&temp1;
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  {
    try{
      result = (long)IntegerSum((long const &)*arg1,(long const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntegerSum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IntegerVector *arg1 = 0 ;
  long result;
  
  SWIG_check_num_args("IntegerSum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IntegerSum",1,"IntegerVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IntegerVector,0))){
    SWIG_fail_ptr("IntegerSum",1,SWIGTYPE_p_IntegerVector);
  }
  
  {
    try{
      result = (long)IntegerSum((IntegerVector const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntegerSum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IntegerVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IntegerSum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IntegerSum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IntegerSum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntegerSum(long const &,long const &)\n"
    "    IntegerSum(IntegerVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvProject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("aInvProject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aInvProject",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aInvProject",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("InvProject",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("InvProject",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      aInvProject(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InvProject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aInvProject",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aInvProject",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aInvProject",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aInvProject",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("InvProject",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("InvProject",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("InvProject",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aInvProject((Generator const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InvProject(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InvProject__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_InvProject__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InvProject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    aInvProject(Generator &,EventSet const &)\n"
    "    aInvProject(Generator const &,EventSet const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_IsAccessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsAccessible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsAccessible",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsAccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsAccessible((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsCoaccessible(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsCoaccessible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsCoaccessible",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsCoaccessible",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsCoaccessible((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsComplete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsComplete",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsComplete",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsComplete",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsComplete((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsComplete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsComplete",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsComplete",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IsComplete",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsComplete",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("IsComplete",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      result = (bool)IsComplete((Generator const &)*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsComplete(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IsComplete__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsComplete__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsComplete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IsComplete(Generator const &)\n"
    "    IsComplete(Generator const &,EventSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IsDeterministic(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsDeterministic",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsDeterministic",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsDeterministic",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsDeterministic((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsEmptyLanguage(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsEmptyLanguage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsEmptyLanguage",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsEmptyLanguage",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsEmptyLanguage((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNonblocking__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsNonblocking",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsNonblocking",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsNonblocking",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsNonblocking((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNonblocking__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsNonblocking",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsNonblocking",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IsNonblocking",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsNonblocking",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsNonblocking",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsNonblocking((Generator const &)*arg1,(Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNonblocking__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsNonblocking",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsNonblocking",1,"GeneratorVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("IsNonblocking",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  {
    try{
      result = (bool)IsNonblocking((TBaseVector< Generator > const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNonblocking(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IsNonblocking__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IsNonblocking__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsNonblocking__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsNonblocking'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IsNonblocking(Generator const &)\n"
    "    IsNonblocking(Generator const &,Generator const &)\n"
    "    IsNonblocking(GeneratorVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IsOmegaClosed(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsOmegaClosed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsOmegaClosed",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsOmegaClosed",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsOmegaClosed((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsOmegaTrim(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsOmegaTrim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsOmegaTrim",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsOmegaTrim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsOmegaTrim((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsPrefixClosed(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsPrefixClosed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsPrefixClosed",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsPrefixClosed",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsPrefixClosed((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsTrim(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("IsTrim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsTrim",1,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("IsTrim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)IsTrim((Generator const &)*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KleeneClosure__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("KleeneClosure",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KleeneClosure",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("KleeneClosure",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      KleeneClosure(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KleeneClosure__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("KleeneClosure",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KleeneClosure",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KleeneClosure",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("KleeneClosure",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("KleeneClosure",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      KleeneClosure((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KleeneClosure(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_KleeneClosure__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_KleeneClosure__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KleeneClosure'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KleeneClosure(Generator &)\n"
    "    KleeneClosure(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_LanguageComplement__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("LanguageComplement",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageComplement",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageComplement",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageComplement(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageComplement__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("LanguageComplement",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageComplement",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageComplement",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageComplement",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageComplement",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageComplement((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageComplement__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageComplement",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageComplement",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageComplement",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageComplement",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageComplement",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("LanguageComplement",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageComplement",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageComplement((Generator const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageComplement(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LanguageComplement__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LanguageComplement__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NameSet, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LanguageComplement__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LanguageComplement'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LanguageComplement(Generator &)\n"
    "    LanguageComplement(Generator const &,Generator &)\n"
    "    LanguageComplement(Generator const &,EventSet const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_LanguageConcatenate(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageConcatenate",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageConcatenate",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageConcatenate",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageConcatenate",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenate",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenate",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageConcatenate",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageConcatenate((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageDifference(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageDifference",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageDifference",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageDifference",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageDifference",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageDifference",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageDifference",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageDifference",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageDifference((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageDisjoint(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LanguageDisjoint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageDisjoint",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageDisjoint",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageDisjoint",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageDisjoint",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)LanguageDisjoint((Generator const &)*arg1,(Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageEquality(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LanguageEquality",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageEquality",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageEquality",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageEquality",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageEquality",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)LanguageEquality((Generator const &)*arg1,(Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageInclusion(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LanguageInclusion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageInclusion",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageInclusion",2,"Generator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageInclusion",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageInclusion",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      result = (bool)LanguageInclusion((Generator const &)*arg1,(Generator const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageIntersection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageIntersection",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageIntersection",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageIntersection",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageIntersection",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageIntersection",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageIntersection",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageIntersection",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageIntersection((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageIntersection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("LanguageIntersection",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageIntersection",1,"GeneratorVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageIntersection",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("LanguageIntersection",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageIntersection",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageIntersection((TBaseVector< Generator > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageIntersection(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LanguageIntersection__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LanguageIntersection__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LanguageIntersection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LanguageIntersection(Generator const &,Generator const &,Generator &)\n"
    "    LanguageIntersection(GeneratorVector const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_LanguageUnion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("LanguageUnion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageUnion",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageUnion",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LanguageUnion",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnion",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnion",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnion",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageUnion((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageUnion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("LanguageUnion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LanguageUnion",1,"GeneratorVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LanguageUnion",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("LanguageUnion",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("LanguageUnion",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      LanguageUnion((TBaseVector< Generator > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanguageUnion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LanguageUnion__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LanguageUnion__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LanguageUnion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LanguageUnion(Generator const &,Generator const &,Generator &)\n"
    "    LanguageUnion(GeneratorVector const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_MarkAllStates(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("MarkAllStates",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MarkAllStates",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("MarkAllStates",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      MarkAllStates(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaClosure(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("OmegaClosure",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OmegaClosure",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaClosure",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      OmegaClosure(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaParallel(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aOmegaParallel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aOmegaParallel",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aOmegaParallel",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aOmegaParallel",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaParallel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaParallel",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaParallel",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aOmegaParallel((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaProduct(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aOmegaProduct",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aOmegaProduct",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aOmegaProduct",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aOmegaProduct",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaProduct",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaProduct",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaProduct",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aOmegaProduct((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaTrim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("OmegaTrim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OmegaTrim",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaTrim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      OmegaTrim(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaTrim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("OmegaTrim",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OmegaTrim",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OmegaTrim",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaTrim",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("OmegaTrim",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      OmegaTrim((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OmegaTrim(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OmegaTrim__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OmegaTrim__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OmegaTrim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OmegaTrim(Generator &)\n"
    "    OmegaTrim(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_Parallel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aParallel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aParallel",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aParallel",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aParallel",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aParallel((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parallel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorVector *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("aParallel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aParallel",1,"GeneratorVector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aParallel",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TBaseVectorT_Generator_t,0))){
    SWIG_fail_ptr("Parallel",1,SWIGTYPE_p_TBaseVectorT_Generator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aParallel((TBaseVector< Generator > const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parallel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  ProductCompositionMap *arg3 = 0 ;
  Generator *arg4 = 0 ;
  
  SWIG_check_num_args("aParallel",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aParallel",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aParallel",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aParallel",3,"ProductCompositionMap &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("aParallel",4,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("Parallel",3,SWIGTYPE_p_ProductCompositionMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Parallel",4,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aParallel((Generator const &)*arg1,(Generator const &)*arg2,*arg3,*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parallel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TBaseVectorT_Generator_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Parallel__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Parallel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ProductCompositionMap, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Parallel__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Parallel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    aParallel(Generator const &,Generator const &,Generator &)\n"
    "    aParallel(GeneratorVector const &,Generator &)\n"
    "    aParallel(Generator const &,Generator const &,ProductCompositionMap &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_PrefixClosure(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("PrefixClosure",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PrefixClosure",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("PrefixClosure",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      PrefixClosure(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Product__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aProduct",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aProduct",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aProduct",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aProduct",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aProduct((Generator const &)*arg1,(Generator const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Product__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  ProductCompositionMap *arg3 = 0 ;
  Generator *arg4 = 0 ;
  
  SWIG_check_num_args("aProduct",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aProduct",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aProduct",2,"Generator const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aProduct",3,"ProductCompositionMap &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("aProduct",4,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",2,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ProductCompositionMap,0))){
    SWIG_fail_ptr("Product",3,SWIGTYPE_p_ProductCompositionMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Product",4,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aProduct((Generator const &)*arg1,(Generator const &)*arg2,*arg3,*arg4);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Product(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Product__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ProductCompositionMap, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Product__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Product'\n"
    "  Possible C/C++ prototypes are:\n"
    "    aProduct(Generator const &,Generator const &,Generator &)\n"
    "    aProduct(Generator const &,Generator const &,ProductCompositionMap &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_Project(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  Generator *arg3 = 0 ;
  
  SWIG_check_num_args("aProject",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aProject",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aProject",2,"EventSet const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("aProject",3,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Project",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("Project",2,SWIGTYPE_p_NameSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Project",3,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aProject((Generator const &)*arg1,(NameSet const &)*arg2,*arg3);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SelfLoop(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  EventSet *arg2 = 0 ;
  
  SWIG_check_num_args("SelfLoop",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SelfLoop",1,"Generator &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SelfLoop",2,"EventSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("SelfLoop",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NameSet,0))){
    SWIG_fail_ptr("SelfLoop",2,SWIGTYPE_p_NameSet);
  }
  
  {
    try{
      SelfLoop(*arg1,(NameSet const &)*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateMin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("aStateMin",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aStateMin",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("aStateMin",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("StateMin",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("StateMin",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aStateMin((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateMin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("aStateMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("aStateMin",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("StateMin",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      aStateMin(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateMin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StateMin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StateMin__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StateMin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    aStateMin(Generator const &,Generator &)\n"
    "    aStateMin(Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_Trim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("Trim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Trim",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Trim(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("Trim",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Trim",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Trim",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("Trim",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      Trim((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Trim__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Trim__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Trim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Trim(Generator &)\n"
    "    Trim(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static int _wrap_UniqueInit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  
  SWIG_check_num_args("UniqueInit",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("UniqueInit",1,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("UniqueInit",1,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      UniqueInit(*arg1);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniqueInit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Generator *arg1 = 0 ;
  Generator *arg2 = 0 ;
  
  SWIG_check_num_args("UniqueInit",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("UniqueInit",1,"Generator const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UniqueInit",2,"Generator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("UniqueInit",1,SWIGTYPE_p_Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Generator,0))){
    SWIG_fail_ptr("UniqueInit",2,SWIGTYPE_p_Generator);
  }
  
  {
    try{
      UniqueInit((Generator const &)*arg1,*arg2);
    }
    catch (const Exception& except) {
      SWIG_exception(SWIG_RuntimeError,except.Message());
      return 0;
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown Error");
      return 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniqueInit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_UniqueInit__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Generator, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UniqueInit__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UniqueInit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    UniqueInit(Generator &)\n"
    "    UniqueInit(Generator const &,Generator &)\n");
  lua_error(L);return 0;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_STRING("SwigModule", "SwigCoreFaudes")},
    {SWIG_LUA_CONSTTAB_STRING("FAUDES_VERSION", "libFAUDES 2.32f")},
    {SWIG_LUA_CONSTTAB_STRING("FAUDES_PLUGINS", "synthesis-luabindings")},
    {SWIG_LUA_CONSTTAB_INT("AttributeCFlags_mControllableFlag", AttributeCFlags::mControllableFlag)},
    {SWIG_LUA_CONSTTAB_INT("AttributeCFlags_mObservableFlag", AttributeCFlags::mObservableFlag)},
    {SWIG_LUA_CONSTTAB_INT("AttributeCFlags_mForcibleFlag", AttributeCFlags::mForcibleFlag)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Error", _wrap_Error},
    { "StateNamesOn", _wrap_StateNamesOn},
    { "StateNamesOff", _wrap_StateNamesOff},
    { "DotExecPath", _wrap_DotExecPath},
    { "Print", _wrap_Print},
    { "Mute", _wrap_Mute},
    { "Help", _wrap_Help},
    { "TestProtocol", _wrap_TestProtocol},
    { "TypeName", _wrap_TypeName},
    { "TypeTest", _wrap_TypeTest},
    { "Version", _wrap_Version},
    { "LanguageConcatenateNonDet", _wrap_LanguageConcatenateNonDet},
    { "LanguageUnionNonDet", _wrap_LanguageUnionNonDet},
    { "KleeneClosureNonDet", _wrap_KleeneClosureNonDet},
    { "ProjectNonDet", _wrap_ProjectNonDet},
    { "ProjectNonDetScc", _wrap_ProjectNonDetScc},
    { "EventSetUnion", _wrap_EventSetUnion},
    { "EventSetIntersection", _wrap_EventSetIntersection},
    { "EventSetDifference", _wrap_EventSetDifference},
    { "ComputeScc", _wrap_ComputeScc},
    { "ComputeNextScc", _wrap_ComputeNextScc},
    { "HasScc", _wrap_HasScc},
    { "Accessible", _wrap_Accessible},
    { "AlphabetDifference", _wrap_AlphabetDifference},
    { "AlphabetEquality", _wrap_AlphabetEquality},
    { "AlphabetExtract", _wrap_AlphabetExtract},
    { "AlphabetInclusion", _wrap_AlphabetInclusion},
    { "AlphabetIntersection", _wrap_AlphabetIntersection},
    { "AlphabetLanguage", _wrap_AlphabetLanguage},
    { "AlphabetUnion", _wrap_AlphabetUnion},
    { "Automaton", _wrap_Automaton},
    { "Coaccessible", _wrap_Coaccessible},
    { "Complete", _wrap_Complete},
    { "Deterministic", _wrap_Deterministic},
    { "EmptyLanguage", _wrap_EmptyLanguage},
    { "EmptyStringLanguage", _wrap_EmptyStringLanguage},
    { "FullLanguage", _wrap_FullLanguage},
    { "IntegerSum", _wrap_IntegerSum},
    { "InvProject", _wrap_InvProject},
    { "IsAccessible", _wrap_IsAccessible},
    { "IsCoaccessible", _wrap_IsCoaccessible},
    { "IsComplete", _wrap_IsComplete},
    { "IsDeterministic", _wrap_IsDeterministic},
    { "IsEmptyLanguage", _wrap_IsEmptyLanguage},
    { "IsNonblocking", _wrap_IsNonblocking},
    { "IsOmegaClosed", _wrap_IsOmegaClosed},
    { "IsOmegaTrim", _wrap_IsOmegaTrim},
    { "IsPrefixClosed", _wrap_IsPrefixClosed},
    { "IsTrim", _wrap_IsTrim},
    { "KleeneClosure", _wrap_KleeneClosure},
    { "LanguageComplement", _wrap_LanguageComplement},
    { "LanguageConcatenate", _wrap_LanguageConcatenate},
    { "LanguageDifference", _wrap_LanguageDifference},
    { "LanguageDisjoint", _wrap_LanguageDisjoint},
    { "LanguageEquality", _wrap_LanguageEquality},
    { "LanguageInclusion", _wrap_LanguageInclusion},
    { "LanguageIntersection", _wrap_LanguageIntersection},
    { "LanguageUnion", _wrap_LanguageUnion},
    { "MarkAllStates", _wrap_MarkAllStates},
    { "OmegaClosure", _wrap_OmegaClosure},
    { "OmegaParallel", _wrap_OmegaParallel},
    { "OmegaProduct", _wrap_OmegaProduct},
    { "OmegaTrim", _wrap_OmegaTrim},
    { "Parallel", _wrap_Parallel},
    { "PrefixClosure", _wrap_PrefixClosure},
    { "Product", _wrap_Product},
    { "Project", _wrap_Project},
    { "SelfLoop", _wrap_SelfLoop},
    { "StateMin", _wrap_StateMin},
    { "Trim", _wrap_Trim},
    { "UniqueInit", _wrap_UniqueInit},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_Transition,
&_wrap_class_Type,
&_wrap_class_AttributeVoid,
&_wrap_class_AttributeFlags,
&_wrap_class_AttributeCFlags,
&_wrap_class_IndexSetIterator,
&_wrap_class_IndexSet,
&_wrap_class_IndexSetA,
&_wrap_class_NameSetIterator,
&_wrap_class_EventSet,
&_wrap_class_Alphabet,
&_wrap_class_TransSetIterator,
&_wrap_class_TransSetX1X2EvIterator,
&_wrap_class_TransSetX2EvX1Iterator,
&_wrap_class_TransSetX2X1EvIterator,
&_wrap_class_TransSetEvX1X2Iterator,
&_wrap_class_TransSetEvX2X1Iterator,
&_wrap_class_TransSet,
&_wrap_class_TransSetX1X2Ev,
&_wrap_class_TransSetX2EvX1,
&_wrap_class_TransSetX2X1Ev,
&_wrap_class_TransSetEvX1X2,
&_wrap_class_TransSetEvX2X1,
&_wrap_class_Generator,
&_wrap_class_System,
&_wrap_class_EventSetVector,
&_wrap_class_AlphabetVector,
&_wrap_class_GeneratorVector,
&_wrap_class_SystemVector,
&_wrap_class_IndexSetVector,
&_wrap_class_ProductCompositionMap,
&_wrap_class_SccFilter,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "faudes",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_tTo_p_Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Generator *)  ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) x));
}
static void *_p_AttributeCFlagsTo_p_AttributeFlags(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AttributeFlags *)  ((AttributeCFlags *) x));
}
static void *_p_TaIndexSetT_AttributeVoid_tTo_p_IndexSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IndexSet *)  ((TaIndexSet< AttributeVoid > *) x));
}
static void *_p_TransSetX1X2EvTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetX1X2Ev *) x));
}
static void *_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TBaseVector< TaNameSet< AttributeCFlags > > *) x));
}
static void *_p_TBaseVectorT_NameSet_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TBaseVector< NameSet > *) x));
}
static void *_p_IndexSetTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((IndexSet *) x));
}
static void *_p_TransSetEvX1X2To_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetEvX1X2 *) x));
}
static void *_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *) (Generator *) ((TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *) x));
}
static void *_p_NameSetTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((NameSet *) x));
}
static void *_p_TBaseVectorT_Generator_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TBaseVector< Generator > *) x));
}
static void *_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > > *) x));
}
static void *_p_TransSetEvX2X1To_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetEvX2X1 *) x));
}
static void *_p_TBaseVectorT_IndexSet_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TBaseVector< IndexSet > *) x));
}
static void *_p_TransSetX2EvX1To_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetX2EvX1 *) x));
}
static void *_p_TaIndexSetT_AttributeVoid_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *) (IndexSet *) ((TaIndexSet< AttributeVoid > *) x));
}
static void *_p_TransSetX1EvX2To_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetX1EvX2 *) x));
}
static void *_p_TransSetX2X1EvTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((TransSetX2X1Ev *) x));
}
static void *_p_ProductCompositionMapTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((ProductCompositionMap *) x));
}
static void *_p_TaNameSetT_AttributeCFlags_tTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *) (NameSet *) ((TaNameSet< AttributeCFlags > *) x));
}
static void *_p_GeneratorTo_p_Type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Type *)  ((Generator *) x));
}
static void *_p_TaNameSetT_AttributeCFlags_tTo_p_NameSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NameSet *)  ((TaNameSet< AttributeCFlags > *) x));
}
static void *_p_AttributeFlagsTo_p_AttributeVoid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AttributeVoid *)  ((AttributeFlags *) x));
}
static void *_p_AttributeCFlagsTo_p_AttributeVoid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AttributeVoid *) (AttributeFlags *) ((AttributeCFlags *) x));
}
static swig_type_info _swigt__p_AttributeCFlags = {"_p_AttributeCFlags", "AttributeCFlags *", 0, 0, (void*)&_wrap_class_AttributeCFlags, 0};
static swig_type_info _swigt__p_AttributeFlags = {"_p_AttributeFlags", "AttributeFlags *", 0, 0, (void*)&_wrap_class_AttributeFlags, 0};
static swig_type_info _swigt__p_AttributeVoid = {"_p_AttributeVoid", "AttributeVoid *", 0, 0, (void*)&_wrap_class_AttributeVoid, 0};
static swig_type_info _swigt__p_Generator = {"_p_Generator", "Generator *", 0, 0, (void*)&_wrap_class_Generator, 0};
static swig_type_info _swigt__p_IndexSet = {"_p_IndexSet", "IndexSet *|StateSet *", 0, 0, (void*)&_wrap_class_IndexSet, 0};
static swig_type_info _swigt__p_IndexSetIterator = {"_p_IndexSetIterator", "IndexSetIterator *", 0, 0, (void*)&_wrap_class_IndexSetIterator, 0};
static swig_type_info _swigt__p_IntegerVector = {"_p_IntegerVector", "IntegerVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NameSet = {"_p_NameSet", "EventSet *|NameSet *", 0, 0, (void*)&_wrap_class_EventSet, 0};
static swig_type_info _swigt__p_NameSetIterator = {"_p_NameSetIterator", "NameSetIterator *", 0, 0, (void*)&_wrap_class_NameSetIterator, 0};
static swig_type_info _swigt__p_Position = {"_p_Position", "Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProductCompositionMap = {"_p_ProductCompositionMap", "ProductCompositionMap *", 0, 0, (void*)&_wrap_class_ProductCompositionMap, 0};
static swig_type_info _swigt__p_SccFilter = {"_p_SccFilter", "SccFilter *", 0, 0, (void*)&_wrap_class_SccFilter, 0};
static swig_type_info _swigt__p_SymbolTable = {"_p_SymbolTable", "SymbolTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TBaseVectorT_Generator_t = {"_p_TBaseVectorT_Generator_t", "TBaseVector< Generator > *|GeneratorVector *", 0, 0, (void*)&_wrap_class_GeneratorVector, 0};
static swig_type_info _swigt__p_TBaseVectorT_IndexSet_t = {"_p_TBaseVectorT_IndexSet_t", "TBaseVector< IndexSet > *|IndexSetVector *", 0, 0, (void*)&_wrap_class_IndexSetVector, 0};
static swig_type_info _swigt__p_TBaseVectorT_NameSet_t = {"_p_TBaseVectorT_NameSet_t", "TBaseVector< NameSet > *|TBaseVector< EventSet > *|EventSetVector *", 0, 0, (void*)&_wrap_class_EventSetVector, 0};
static swig_type_info _swigt__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t = {"_p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t", "TBaseVector< TaNameSet< AttributeCFlags > > *|TBaseVector< Alphabet > *|AlphaberVector *", 0, 0, (void*)&_wrap_class_AlphabetVector, 0};
static swig_type_info _swigt__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t = {"_p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t", "TBaseVector< System > *|TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > > *|SystemVector *", 0, 0, (void*)&_wrap_class_SystemVector, 0};
static swig_type_info _swigt__p_TaIndexSetT_AttributeVoid_t = {"_p_TaIndexSetT_AttributeVoid_t", "TaIndexSet< AttributeVoid > *", 0, 0, (void*)&_wrap_class_IndexSetA, 0};
static swig_type_info _swigt__p_TaNameSetT_AttributeCFlags_t = {"_p_TaNameSetT_AttributeCFlags_t", "TaNameSet< AttributeCFlags > *|Alphabet *", 0, 0, (void*)&_wrap_class_Alphabet, 0};
static swig_type_info _swigt__p_TaTransSetT_AttributeVoid_t = {"_p_TaTransSetT_AttributeVoid_t", "TaTransSet< AttributeVoid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t = {"_p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t", "TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > *|System *", 0, 0, (void*)&_wrap_class_System, 0};
static swig_type_info _swigt__p_TokenReader = {"_p_TokenReader", "TokenReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TokenWriter = {"_p_TokenWriter", "TokenWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransSet = {"_p_TransSet", "TransSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransSetEvX1X2 = {"_p_TransSetEvX1X2", "TransSetEvX1X2 *", 0, 0, (void*)&_wrap_class_TransSetEvX1X2, 0};
static swig_type_info _swigt__p_TransSetEvX1X2Iterator = {"_p_TransSetEvX1X2Iterator", "TransSetEvX1X2Iterator *", 0, 0, (void*)&_wrap_class_TransSetEvX1X2Iterator, 0};
static swig_type_info _swigt__p_TransSetEvX2X1 = {"_p_TransSetEvX2X1", "TransSetEvX2X1 *", 0, 0, (void*)&_wrap_class_TransSetEvX2X1, 0};
static swig_type_info _swigt__p_TransSetEvX2X1Iterator = {"_p_TransSetEvX2X1Iterator", "TransSetEvX2X1Iterator *", 0, 0, (void*)&_wrap_class_TransSetEvX2X1Iterator, 0};
static swig_type_info _swigt__p_TransSetX1EvX2 = {"_p_TransSetX1EvX2", "TransSetX1EvX2 *", 0, 0, (void*)&_wrap_class_TransSet, 0};
static swig_type_info _swigt__p_TransSetX1EvX2Iterator = {"_p_TransSetX1EvX2Iterator", "TransSetX1EvX2Iterator *", 0, 0, (void*)&_wrap_class_TransSetIterator, 0};
static swig_type_info _swigt__p_TransSetX1X2Ev = {"_p_TransSetX1X2Ev", "TransSetX1X2Ev *", 0, 0, (void*)&_wrap_class_TransSetX1X2Ev, 0};
static swig_type_info _swigt__p_TransSetX1X2EvIterator = {"_p_TransSetX1X2EvIterator", "TransSetX1X2EvIterator *", 0, 0, (void*)&_wrap_class_TransSetX1X2EvIterator, 0};
static swig_type_info _swigt__p_TransSetX2EvX1 = {"_p_TransSetX2EvX1", "TransSetX2EvX1 *", 0, 0, (void*)&_wrap_class_TransSetX2EvX1, 0};
static swig_type_info _swigt__p_TransSetX2EvX1Iterator = {"_p_TransSetX2EvX1Iterator", "TransSetX2EvX1Iterator *", 0, 0, (void*)&_wrap_class_TransSetX2EvX1Iterator, 0};
static swig_type_info _swigt__p_TransSetX2X1Ev = {"_p_TransSetX2X1Ev", "TransSetX2X1Ev *", 0, 0, (void*)&_wrap_class_TransSetX2X1Ev, 0};
static swig_type_info _swigt__p_TransSetX2X1EvIterator = {"_p_TransSetX2X1EvIterator", "TransSetX2X1EvIterator *", 0, 0, (void*)&_wrap_class_TransSetX2X1EvIterator, 0};
static swig_type_info _swigt__p_Transition = {"_p_Transition", "Transition *", 0, 0, (void*)&_wrap_class_Transition, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)&_wrap_class_Type, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Float *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|Int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_int_t__size_type = {"_p_std__vectorT_int_t__size_type", "std::vector< int >::size_type *|TBaseVector< NameSet >::Position *|TBaseVector< Generator >::Position *|TBaseVector< IndexSet >::Position *|TBaseVector< TaNameSet< AttributeCFlags > >::Position *|TBaseVector< TcGenerator< AttributeVoid,AttributeVoid,AttributeCFlags,AttributeVoid > >::Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|Idx *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "fType *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AttributeCFlags,
  &_swigt__p_AttributeFlags,
  &_swigt__p_AttributeVoid,
  &_swigt__p_Generator,
  &_swigt__p_IndexSet,
  &_swigt__p_IndexSetIterator,
  &_swigt__p_IntegerVector,
  &_swigt__p_NameSet,
  &_swigt__p_NameSetIterator,
  &_swigt__p_Position,
  &_swigt__p_ProductCompositionMap,
  &_swigt__p_SccFilter,
  &_swigt__p_SymbolTable,
  &_swigt__p_TBaseVectorT_Generator_t,
  &_swigt__p_TBaseVectorT_IndexSet_t,
  &_swigt__p_TBaseVectorT_NameSet_t,
  &_swigt__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,
  &_swigt__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,
  &_swigt__p_TaIndexSetT_AttributeVoid_t,
  &_swigt__p_TaNameSetT_AttributeCFlags_t,
  &_swigt__p_TaTransSetT_AttributeVoid_t,
  &_swigt__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,
  &_swigt__p_TokenReader,
  &_swigt__p_TokenWriter,
  &_swigt__p_TransSet,
  &_swigt__p_TransSetEvX1X2,
  &_swigt__p_TransSetEvX1X2Iterator,
  &_swigt__p_TransSetEvX2X1,
  &_swigt__p_TransSetEvX2X1Iterator,
  &_swigt__p_TransSetX1EvX2,
  &_swigt__p_TransSetX1EvX2Iterator,
  &_swigt__p_TransSetX1X2Ev,
  &_swigt__p_TransSetX1X2EvIterator,
  &_swigt__p_TransSetX2EvX1,
  &_swigt__p_TransSetX2EvX1Iterator,
  &_swigt__p_TransSetX2X1Ev,
  &_swigt__p_TransSetX2X1EvIterator,
  &_swigt__p_Transition,
  &_swigt__p_Type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_int_t__size_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AttributeCFlags[] = {  {&_swigt__p_AttributeCFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttributeFlags[] = {  {&_swigt__p_AttributeFlags, 0, 0, 0},  {&_swigt__p_AttributeCFlags, _p_AttributeCFlagsTo_p_AttributeFlags, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttributeVoid[] = {  {&_swigt__p_AttributeFlags, _p_AttributeFlagsTo_p_AttributeVoid, 0, 0},  {&_swigt__p_AttributeCFlags, _p_AttributeCFlagsTo_p_AttributeVoid, 0, 0},  {&_swigt__p_AttributeVoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Generator[] = {  {&_swigt__p_Generator, 0, 0, 0},  {&_swigt__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, _p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_tTo_p_Generator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IndexSet[] = {  {&_swigt__p_IndexSet, 0, 0, 0},  {&_swigt__p_TaIndexSetT_AttributeVoid_t, _p_TaIndexSetT_AttributeVoid_tTo_p_IndexSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IndexSetIterator[] = {  {&_swigt__p_IndexSetIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegerVector[] = {  {&_swigt__p_IntegerVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NameSet[] = {  {&_swigt__p_NameSet, 0, 0, 0},  {&_swigt__p_TaNameSetT_AttributeCFlags_t, _p_TaNameSetT_AttributeCFlags_tTo_p_NameSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NameSetIterator[] = {  {&_swigt__p_NameSetIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Position[] = {  {&_swigt__p_Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProductCompositionMap[] = {  {&_swigt__p_ProductCompositionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SccFilter[] = {  {&_swigt__p_SccFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SymbolTable[] = {  {&_swigt__p_SymbolTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TBaseVectorT_Generator_t[] = {  {&_swigt__p_TBaseVectorT_Generator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TBaseVectorT_IndexSet_t[] = {  {&_swigt__p_TBaseVectorT_IndexSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TBaseVectorT_NameSet_t[] = {  {&_swigt__p_TBaseVectorT_NameSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t[] = {  {&_swigt__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t[] = {  {&_swigt__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TaIndexSetT_AttributeVoid_t[] = {  {&_swigt__p_TaIndexSetT_AttributeVoid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TaNameSetT_AttributeCFlags_t[] = {  {&_swigt__p_TaNameSetT_AttributeCFlags_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TaTransSetT_AttributeVoid_t[] = {  {&_swigt__p_TaTransSetT_AttributeVoid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t[] = {  {&_swigt__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenReader[] = {  {&_swigt__p_TokenReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenWriter[] = {  {&_swigt__p_TokenWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSet[] = {  {&_swigt__p_TransSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetEvX1X2[] = {  {&_swigt__p_TransSetEvX1X2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetEvX1X2Iterator[] = {  {&_swigt__p_TransSetEvX1X2Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetEvX2X1[] = {  {&_swigt__p_TransSetEvX2X1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetEvX2X1Iterator[] = {  {&_swigt__p_TransSetEvX2X1Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX1EvX2[] = {  {&_swigt__p_TransSetX1EvX2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX1EvX2Iterator[] = {  {&_swigt__p_TransSetX1EvX2Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX1X2Ev[] = {  {&_swigt__p_TransSetX1X2Ev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX1X2EvIterator[] = {  {&_swigt__p_TransSetX1X2EvIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX2EvX1[] = {  {&_swigt__p_TransSetX2EvX1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX2EvX1Iterator[] = {  {&_swigt__p_TransSetX2EvX1Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX2X1Ev[] = {  {&_swigt__p_TransSetX2X1Ev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSetX2X1EvIterator[] = {  {&_swigt__p_TransSetX2X1EvIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Transition[] = {  {&_swigt__p_Transition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},  {&_swigt__p_TBaseVectorT_NameSet_t, _p_TBaseVectorT_NameSet_tTo_p_Type, 0, 0},  {&_swigt__p_TransSetX1X2Ev, _p_TransSetX1X2EvTo_p_Type, 0, 0},  {&_swigt__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t, _p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_tTo_p_Type, 0, 0},  {&_swigt__p_IndexSet, _p_IndexSetTo_p_Type, 0, 0},  {&_swigt__p_TBaseVectorT_Generator_t, _p_TBaseVectorT_Generator_tTo_p_Type, 0, 0},  {&_swigt__p_TransSetEvX1X2, _p_TransSetEvX1X2To_p_Type, 0, 0},  {&_swigt__p_TBaseVectorT_IndexSet_t, _p_TBaseVectorT_IndexSet_tTo_p_Type, 0, 0},  {&_swigt__p_NameSet, _p_NameSetTo_p_Type, 0, 0},  {&_swigt__p_TransSetEvX2X1, _p_TransSetEvX2X1To_p_Type, 0, 0},  {&_swigt__p_TaIndexSetT_AttributeVoid_t, _p_TaIndexSetT_AttributeVoid_tTo_p_Type, 0, 0},  {&_swigt__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t, _p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_tTo_p_Type, 0, 0},  {&_swigt__p_TaNameSetT_AttributeCFlags_t, _p_TaNameSetT_AttributeCFlags_tTo_p_Type, 0, 0},  {&_swigt__p_TransSetX2EvX1, _p_TransSetX2EvX1To_p_Type, 0, 0},  {&_swigt__p_TransSetX1EvX2, _p_TransSetX1EvX2To_p_Type, 0, 0},  {&_swigt__p_TransSetX2X1Ev, _p_TransSetX2X1EvTo_p_Type, 0, 0},  {&_swigt__p_ProductCompositionMap, _p_ProductCompositionMapTo_p_Type, 0, 0},  {&_swigt__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t, _p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_tTo_p_Type, 0, 0},  {&_swigt__p_Generator, _p_GeneratorTo_p_Type, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t__size_type[] = {  {&_swigt__p_std__vectorT_int_t__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AttributeCFlags,
  _swigc__p_AttributeFlags,
  _swigc__p_AttributeVoid,
  _swigc__p_Generator,
  _swigc__p_IndexSet,
  _swigc__p_IndexSetIterator,
  _swigc__p_IntegerVector,
  _swigc__p_NameSet,
  _swigc__p_NameSetIterator,
  _swigc__p_Position,
  _swigc__p_ProductCompositionMap,
  _swigc__p_SccFilter,
  _swigc__p_SymbolTable,
  _swigc__p_TBaseVectorT_Generator_t,
  _swigc__p_TBaseVectorT_IndexSet_t,
  _swigc__p_TBaseVectorT_NameSet_t,
  _swigc__p_TBaseVectorT_TaNameSetT_AttributeCFlags_t_t,
  _swigc__p_TBaseVectorT_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t_t,
  _swigc__p_TaIndexSetT_AttributeVoid_t,
  _swigc__p_TaNameSetT_AttributeCFlags_t,
  _swigc__p_TaTransSetT_AttributeVoid_t,
  _swigc__p_TcGeneratorT_AttributeVoid_AttributeVoid_AttributeCFlags_AttributeVoid_t,
  _swigc__p_TokenReader,
  _swigc__p_TokenWriter,
  _swigc__p_TransSet,
  _swigc__p_TransSetEvX1X2,
  _swigc__p_TransSetEvX1X2Iterator,
  _swigc__p_TransSetEvX2X1,
  _swigc__p_TransSetEvX2X1Iterator,
  _swigc__p_TransSetX1EvX2,
  _swigc__p_TransSetX1EvX2Iterator,
  _swigc__p_TransSetX1X2Ev,
  _swigc__p_TransSetX1X2EvIterator,
  _swigc__p_TransSetX2EvX1,
  _swigc__p_TransSetX2EvX1Iterator,
  _swigc__p_TransSetX2X1Ev,
  _swigc__p_TransSetX2X1EvIterator,
  _swigc__p_Transition,
  _swigc__p_Type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_int_t__size_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "\n"
  "\n"
  "function FAUDES_TEST_DUMP(m,d) \n"
  "  local file\n"
  "  if arg ~= nil then\n"
  "    file= arg[0]\n"
  "  else \n"
  "    file= \"faudes_console_dump\"\n"
  "  end\n"
  "  faudes.TestProtocol(file)\n"
  "  faudes.TestProtocol(m .. \" [at \" .. file .. \"]\",d)\n"
  "end\n"
  "\n"
  "function FAUDES_TEST_DIFF(m,d) \n"
  "  local res = faudes.TestProtocol()\n"
  "  local file\n"
  "  if arg ~= nil then\n"
  "    file= arg[0]\n"
  "  else \n"
  "    file= \"faudes_console_dump\"\n"
  "  end\n"
  "  if not res then\n"
  "    print(\"FAUDES_TEST_DIFF: sensed test case error in \" .. file)\n"
  "  end\n"
  "  return res\n"
  "end\n"
  "\n"
  "\n"
  "-- Copy faudes to global name space\n"
  "function faudes.MakeGlobal()\n"
  "  for k,v in pairs(faudes) do _G[k]=v end\n"
  "end";

void SWIG_init_user(lua_State* L)
{
  faudes_dict_insert_topic("IndexSet","IndexSet methods"); 
  faudes_dict_insert_entry("IndexSet","Constructors","IndexSet IndexSet()"); 
  faudes_dict_insert_entry("IndexSet","Constructors","IndexSet IndexSet(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Constructors","IndexSet Copy()"); 
  faudes_dict_insert_entry("IndexSet","Maintenance","string Name()"); 
  faudes_dict_insert_entry("IndexSet","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("IndexSet","Maintenance","int Size()"); 
  faudes_dict_insert_entry("IndexSet","Maintenance"," Lock()"); 
  faudes_dict_insert_entry("IndexSet","Maintenance"," Detach()"); 
  faudes_dict_insert_entry("IndexSet","Maintenance","bool Empty()"); 
  faudes_dict_insert_entry("IndexSet","Element access","bool Insert(int)"); 
  faudes_dict_insert_entry("IndexSet","Element access","bool Erase(int)"); 
  faudes_dict_insert_entry("IndexSet","Element access","iterator Erase(iterator)"); 
  faudes_dict_insert_entry("IndexSet","Element access","iterator Begin()"); 
  faudes_dict_insert_entry("IndexSet","Element access","iterator End()"); 
  faudes_dict_insert_entry("IndexSet","Element access","bool Exists(int)"); 
  faudes_dict_insert_entry("IndexSet","Element access","iterator Find(int)"); 
  faudes_dict_insert_entry("IndexSet","Set operations"," InsertSet(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations"," EraseSet(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","IndexSet SetIntersection(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","IndexSet SetUnion(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","IndexSet operator+(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","IndexSet operator*(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","IndexSet operator-(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","bool operator<=(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","bool operator<(IndexSet)"); 
  faudes_dict_insert_entry("IndexSet","Set operations","bool operator==(IndexSet)"); 
  faudes_dict_insert_topic("EventSet","EventSet methods"); 
  faudes_dict_insert_entry("EventSet","Constructors","EventSet EventSet()"); 
  faudes_dict_insert_entry("EventSet","Constructors","EventSet EventSet(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Constructors","EventSet Copy()"); 
  faudes_dict_insert_entry("EventSet","Maintenance","string Name()"); 
  faudes_dict_insert_entry("EventSet","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("EventSet","Maintenance","int Size()"); 
  faudes_dict_insert_entry("EventSet","Maintenance"," Lock()"); 
  faudes_dict_insert_entry("EventSet","Maintenance"," Detach()"); 
  faudes_dict_insert_entry("EventSet","Maintenance","int Index(string)"); 
  faudes_dict_insert_entry("EventSet","Maintenance","string SymbolicName(int)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Empty()"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Insert(string)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Insert(int)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Erase(string)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Erase(int)"); 
  faudes_dict_insert_entry("EventSet","Element access","iterator Erase(iterator)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Exists(string)"); 
  faudes_dict_insert_entry("EventSet","Element access","bool Exists(int)"); 
  faudes_dict_insert_entry("EventSet","Element access","iterator Find(string)"); 
  faudes_dict_insert_entry("EventSet","Element access","iterator Find(int)"); 
  faudes_dict_insert_entry("EventSet","Element access","iterator Begin()"); 
  faudes_dict_insert_entry("EventSet","Element access","iterator End()"); 
  faudes_dict_insert_entry("EventSet","Set operations"," InsertSet(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations"," EraseSet(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","EventSet SetIntersection(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","EventSet SetUnion(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","EventSet operator+(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","EventSet operator*(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","EventSet operator-(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","bool operator<=(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","bool operator<(EventSet)"); 
  faudes_dict_insert_entry("EventSet","Set operations","bool operator==(EventSet)"); 
  faudes_dict_insert_topic("Alphabet","Alphabet methods"); 
  faudes_dict_insert_entry("Alphabet","Constructors","Alphabet Alphabet()"); 
  faudes_dict_insert_entry("Alphabet","Constructors","Alphabet Alphabet(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Constructors","Alphabet Copy()"); 
  faudes_dict_insert_entry("Alphabet","Maintenance","string Name()"); 
  faudes_dict_insert_entry("Alphabet","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("Alphabet","Maintenance","int Size()"); 
  faudes_dict_insert_entry("Alphabet","Maintenance"," Lock()"); 
  faudes_dict_insert_entry("Alphabet","Maintenance"," Detach()"); 
  faudes_dict_insert_entry("Alphabet","Maintenance","int Index(string)"); 
  faudes_dict_insert_entry("Alphabet","Maintenance","string SymbolicName(int)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Empty()"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Insert(string)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Insert(int)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Erase(string)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Erase(int)"); 
  faudes_dict_insert_entry("Alphabet","Element access","iterator Erase(iterator)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Exists(string)"); 
  faudes_dict_insert_entry("Alphabet","Element access","bool Exists(int)"); 
  faudes_dict_insert_entry("Alphabet","Element access","iterator Find(string)"); 
  faudes_dict_insert_entry("Alphabet","Element access","iterator Find(int)"); 
  faudes_dict_insert_entry("Alphabet","Element access","iterator Begin()"); 
  faudes_dict_insert_entry("Alphabet","Element access","iterator End()"); 
  faudes_dict_insert_entry("Alphabet","Set operations"," InsertSet(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations"," EraseSet(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","Alphabet SetIntersection(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","Alphabet SetUnion(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","Alphabet operator+(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","Alphabet operator*(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","Alphabet operator-(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","bool operator<=(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","bool operator<(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Set operations","bool operator==(Alphabet)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes","AttributeCFlag Attribute(int)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes","AttributeCFlag Attribute(string)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes","AttributeCFlag Attribute(iterator)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes"," Attribute(int,attr)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes"," Attribute(string,attr)"); 
  faudes_dict_insert_entry("Alphabet","Controllablity attributes"," Attribute(iterator,attr)"); 
  faudes_dict_insert_topic("TransSet","TransSet methods"); 
  faudes_dict_insert_entry("TransSet","Constructors","TransSet<Order> TransSet<Oder>()"); 
  faudes_dict_insert_entry("TransSet","Constructors","TransSet<Order> TransSet<Order>(TransSet<OtherOrder>)"); 
  faudes_dict_insert_entry("TransSet","Constructors","TransSet Copy()"); 
  faudes_dict_insert_entry("TransSet","Maintenance","string Name()"); 
  faudes_dict_insert_entry("TransSet","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("TransSet","Maintenance","int Size()"); 
  faudes_dict_insert_entry("TransSet","Maintenance"," Lock()"); 
  faudes_dict_insert_entry("TransSet","Maintenance"," Detach()"); 
  faudes_dict_insert_entry("TransSet","Maintenance","bool Empty()"); 
  faudes_dict_insert_entry("TransSet","Element access","bool Insert(trans)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool Insert(x1,ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Element access"," Erase(trans)"); 
  faudes_dict_insert_entry("TransSet","Element access"," Erase(x1,ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByX1(x1)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByX1Ev(x1,ev)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByEv(ev)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByX2(x2)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByX1OrX2(x)"); 
  faudes_dict_insert_entry("TransSet","Element access"," EraseByX1OrX2(IndexSet)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator Erase(iterator)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator Begin()"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator End()"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator Begin(x1)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator End(x1)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator BeginByEv(ev)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator EndByEv(ev)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator BeginByEvX1(ev,x1)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator EndByEvX1(ev,x1)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator BeginByX2(x2)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator EndByX2(x2)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator BeginByEvX2(ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator EndByEvX2(ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator BeginByX2Ev(x2,ev)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator EndByX2Ev(x2,ev)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool Exists(transition)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool Exists(x1,ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool ExistsByX1Ev(x1,ev)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool ExistsByX1(x1)"); 
  faudes_dict_insert_entry("TransSet","Element access","bool ExistsByX1OrX2(x)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator Find(transition)"); 
  faudes_dict_insert_entry("TransSet","Element access","iterator Find(x1,ev,x2)"); 
  faudes_dict_insert_entry("TransSet","Set operations"," InsertSet(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations"," EraseSet(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","TransSet SetIntersection(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","TransSet SetUnion(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","TransSet operator+(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","TransSet operator*(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","TransSet operator-(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","bool operator<=(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","bool operator<(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Set operations","bool operator==(TransSet)"); 
  faudes_dict_insert_entry("TransSet","Misc","IndexSet States()"); 
  faudes_dict_insert_entry("TransSet","Misc","IndexSet SuccessorStates(x1)"); 
  faudes_dict_insert_entry("TransSet","Misc","IndexSet SuccessorStates(IndexSet)"); 
  faudes_dict_insert_entry("TransSet","Misc","IndexSet SuccessorStates(x1,ev)"); 
  faudes_dict_insert_entry("TransSet","Misc","IndexSet SuccessorStates(IndexSet,EventSet)"); 
  faudes_dict_insert_entry("TransSet","Misc"," RestrictStates(IndexSet)"); 
  faudes_dict_insert_entry("TransSet","Misc","EventSet ActiveEvents(x1)"); 
  faudes_dict_insert_topic("Generator","Generator methods"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Generator()"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Generator(gen)"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Generator(filename)"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Copy()"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Version(string,string)"); 
  faudes_dict_insert_entry("Generator","Constructors","Generator Version(string)"); 
  faudes_dict_insert_entry("Generator","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("Generator","Maintenance","string Name()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool Valid()"); 
  faudes_dict_insert_entry("Generator","Maintenance"," Clear()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int Size()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int AlphabetSize()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int TransRelSize()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int TransRelSize()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int InitStatesSize()"); 
  faudes_dict_insert_entry("Generator","Maintenance","int MarkedStatesSize()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool AlphabetEmpty()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool TransRelEmpty()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool InitStatesEmpty()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool MarkedStatesEmpty()"); 
  faudes_dict_insert_entry("Generator","Maintenance","EventSet UsedEvents()"); 
  faudes_dict_insert_entry("Generator","Maintenance","EventSet UnusedEvents()"); 
  faudes_dict_insert_entry("Generator","Maintenance","bool IsDeterministic()"); 
  faudes_dict_insert_entry("Generator","Maintenance"," MinimizeAlphabet()"); 
  faudes_dict_insert_entry("Generator","Maintenance"," MinStateIndex()"); 
  faudes_dict_insert_entry("Generator","Symbolic names","int EventIndex(string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","string EventName(int)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","string UniqueEventName(string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","bool RenameEvent(idx,string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","bool RenameEvent(string,string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","int StateIndex(string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","string StateName(int)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","string UniqueStateName(string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," ClearStateNames()"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," ClrStateName(int)"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," ClrStateName(string)"); 
  faudes_dict_insert_entry("Generator","Symbolic names","bool StateNamesEnabled()"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," StateNamesEnabled(bool)"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," SetDefaultStateNames()"); 
  faudes_dict_insert_entry("Generator","Symbolic names"," EnforceStateNames(string)"); 
  faudes_dict_insert_entry("Generator","Misc IO","string EStr(int)"); 
  faudes_dict_insert_entry("Generator","Misc IO","string SStr(int)"); 
  faudes_dict_insert_entry("Generator","Misc IO","string TStr(int)"); 
  faudes_dict_insert_entry("Generator","Misc IO"," GrapthWrite(filename,format)"); 
  faudes_dict_insert_entry("Generator","Misc IO"," WriteAlphabet()"); 
  faudes_dict_insert_entry("Generator","Misc IO","string AlphabetToString()"); 
  faudes_dict_insert_entry("Generator","Misc IO"," WriteStateSet(IndexSet)"); 
  faudes_dict_insert_entry("Generator","Misc IO"," DWriteStateSet(IndexSet)"); 
  faudes_dict_insert_entry("Generator","Misc IO","string StateSetToString(IndexSet)"); 
  faudes_dict_insert_entry("Generator","Misc IO","string StatesToString()"); 
  faudes_dict_insert_entry("Generator","Misc IO","string InitStatesToString()"); 
  faudes_dict_insert_entry("Generator","Misc IO","string MarkedStatesToString()"); 
  faudes_dict_insert_entry("Generator","Misc IO"," WriteTransRel()"); 
  faudes_dict_insert_entry("Generator","Misc IO","string TransRelToString()"); 
  faudes_dict_insert_entry("Generator","Misc IO"," SWrite()"); 
  faudes_dict_insert_entry("Generator","Misc IO","string ToSText()"); 
  faudes_dict_insert_entry("Generator","Misc IO",""); 
  faudes_dict_insert_entry("Generator","Alphabet","EventSet Alphabet()"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool InsEvent(idx)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool InsEvent(name)"); 
  faudes_dict_insert_entry("Generator","Alphabet"," InsEvents(EventSet)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool DelEvent(idx)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool DelEvent(name)"); 
  faudes_dict_insert_entry("Generator","Alphabet"," DelEvents(EventSet)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool ExistsEvent(idx)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool ExistsEvent(name)"); 
  faudes_dict_insert_entry("Generator","Alphabet","iterator AlphabetBegin()"); 
  faudes_dict_insert_entry("Generator","Alphabet","iterator AlphabetEnd()"); 
  faudes_dict_insert_entry("Generator","Alphabet","iterator FindEvent(idx)"); 
  faudes_dict_insert_entry("Generator","Alphabet","iterator FindEvent(name)"); 
  faudes_dict_insert_entry("Generator","Alphabet","bool DelEventFromAlphabet(idx)"); 
  faudes_dict_insert_entry("Generator","Alphabet"," InjectAlphabet(EventSet)"); 
  faudes_dict_insert_entry("Generator","Alphabet"," RestrictAlphabet(EventSet)"); 
  faudes_dict_insert_entry("Generator","State set","IndexSet States()"); 
  faudes_dict_insert_entry("Generator","State set","idx InsState()"); 
  faudes_dict_insert_entry("Generator","State set","bool InsState(idx)"); 
  faudes_dict_insert_entry("Generator","State set","idx InsState(name)"); 
  faudes_dict_insert_entry("Generator","State set"," InsStates(StateSet)"); 
  faudes_dict_insert_entry("Generator","State set"," InsEvents(EventSet)"); 
  faudes_dict_insert_entry("Generator","State set","bool DelState(idx)"); 
  faudes_dict_insert_entry("Generator","State set","bool DelState(name)"); 
  faudes_dict_insert_entry("Generator","State set"," DelStates(StateSet)"); 
  faudes_dict_insert_entry("Generator","State set"," RestrictStates(StateSet)"); 
  faudes_dict_insert_entry("Generator","State set","bool ExistsState(idx)"); 
  faudes_dict_insert_entry("Generator","State set","bool ExistsState(name)"); 
  faudes_dict_insert_entry("Generator","State set","iterator StatesBegin()"); 
  faudes_dict_insert_entry("Generator","State set","iterator StatesEnd()"); 
  faudes_dict_insert_entry("Generator","State set","iterator FindState(idx)"); 
  faudes_dict_insert_entry("Generator","State set","iterator FindState(name)"); 
  faudes_dict_insert_entry("Generator","State set","bool DelStateFromStates(idx)"); 
  faudes_dict_insert_entry("Generator","State set","iterator DelStateFromStates(iterator)"); 
  faudes_dict_insert_entry("Generator","State set"," InjectState(idx)"); 
  faudes_dict_insert_entry("Generator","State set"," InjectStates(IndexSet)"); 
  faudes_dict_insert_entry("Generator","State set","idx MaxStateIndex()"); 
  faudes_dict_insert_entry("Generator","State set",""); 
  faudes_dict_insert_entry("Generator","Initial states","IndexSet InitStates()"); 
  faudes_dict_insert_entry("Generator","Initial states","idx InsInitState()"); 
  faudes_dict_insert_entry("Generator","Initial states","idx InsInitState(idx)"); 
  faudes_dict_insert_entry("Generator","Initial states"," InsInitStates(StateSet)"); 
  faudes_dict_insert_entry("Generator","Initial states","idx InsInitState(name)"); 
  faudes_dict_insert_entry("Generator","Initial states"," SetInitState(idx)"); 
  faudes_dict_insert_entry("Generator","Initial states"," SetInitState(name)"); 
  faudes_dict_insert_entry("Generator","Initial states"," ClrInitState(idx)"); 
  faudes_dict_insert_entry("Generator","Initial states"," ClrInitState(name)"); 
  faudes_dict_insert_entry("Generator","Initial states","iterator ClrInitState(iterator)"); 
  faudes_dict_insert_entry("Generator","Initial states","bool ExistsInitState(idx)"); 
  faudes_dict_insert_entry("Generator","Initial states","iterator InitStatesBegin()"); 
  faudes_dict_insert_entry("Generator","Initial states","iterator InitStatesEnd()"); 
  faudes_dict_insert_entry("Generator","Initial states","iterator FindInitState()"); 
  faudes_dict_insert_entry("Generator","Initial states"," ClearInitStates()"); 
  faudes_dict_insert_entry("Generator","Initial states"," InjectInitStates(IndexSet)"); 
  faudes_dict_insert_entry("Generator","Initial states","idx InitState()"); 
  faudes_dict_insert_entry("Generator","Marked states","IndexSet MarkedStates()"); 
  faudes_dict_insert_entry("Generator","Marked states","idx InsMarkedState()"); 
  faudes_dict_insert_entry("Generator","Marked states","idx InsMarkedState(idx)"); 
  faudes_dict_insert_entry("Generator","Marked states","idx InsMarkedState(name)"); 
  faudes_dict_insert_entry("Generator","Marked states"," InsMarkedStates(StateSet)"); 
  faudes_dict_insert_entry("Generator","Marked states"," SetMarkedState(idx)"); 
  faudes_dict_insert_entry("Generator","Marked states"," SetMarkedState(name)"); 
  faudes_dict_insert_entry("Generator","Marked states"," ClrMarkedState(idx)"); 
  faudes_dict_insert_entry("Generator","Marked states"," ClrMarkedState(name)"); 
  faudes_dict_insert_entry("Generator","Marked states","iterator ClrMarkedState(iterator)"); 
  faudes_dict_insert_entry("Generator","Marked states","bool ExistsMarkedState(idx)"); 
  faudes_dict_insert_entry("Generator","Marked states","iterator MarkedStatesBegin()"); 
  faudes_dict_insert_entry("Generator","Marked states","iterator MarkedStatesEnd()"); 
  faudes_dict_insert_entry("Generator","Marked states","iterator FindMarkedState()"); 
  faudes_dict_insert_entry("Generator","Marked states"," ClearMarkedStates()"); 
  faudes_dict_insert_entry("Generator","Marked states"," InjectMarkedStates(IndexSet)"); 
  faudes_dict_insert_entry("Generator","Marked states","idx MarkedState()"); 
  faudes_dict_insert_entry("Generator","Transitions","TransSet TransRel()"); 
  faudes_dict_insert_entry("Generator","Transitions"," TransRel(TransSet<ORDER>)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool SetTransition(trans)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool SetTransition(x1,ev,x2)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool SetTransition(x1name,evname,x2name)"); 
  faudes_dict_insert_entry("Generator","Transitions"," ClrTransition(trans)"); 
  faudes_dict_insert_entry("Generator","Transitions"," ClrTransition(x1,ev,x2)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator ClrTransition(iterator)"); 
  faudes_dict_insert_entry("Generator","Transitions"," ClrTransitions(x1,ev)"); 
  faudes_dict_insert_entry("Generator","Transitions"," ClrTransitions(x1)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool ExistsTransition(trans)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool ExistsTransition(x1,ev,x2)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool ExistsTransition(x1name,evname,x2name)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool ExistsTransition(x1,ev)"); 
  faudes_dict_insert_entry("Generator","Transitions","bool ExistsTransition(x1)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelBegin()"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelEnd()"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelBegin(x1)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelEnd(x1)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelBegin(x1,ev)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator TransRelEnd(x1,ev)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator FindTransition(trans)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator FindTransition(x1,ev,x2)"); 
  faudes_dict_insert_entry("Generator","Transitions","iterator FindTransition(x1name,evname,x2name)"); 
  faudes_dict_insert_entry("Generator","Transitions"," ClearTransRel()"); 
  faudes_dict_insert_entry("Generator","Transitions"," InjectTransRel(TransSet)"); 
  faudes_dict_insert_entry("Generator","Transitions"," InjectTransition(trans)"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet AccessibleSet()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool Accessible()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool IsAccessible()"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet CoaccessibleSet()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool Coaccessible()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool IsCoaccessible()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool Trim()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool IsTrim()"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet BlockingStates()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool IsComplete()"); 
  faudes_dict_insert_entry("Generator","Reachability","bool Complete()"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet TerminalStates()"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet TransRelStates()"); 
  faudes_dict_insert_entry("Generator","Reachability","EventSet ActiveEventSet(x1)"); 
  faudes_dict_insert_entry("Generator","Reachability","TransSet ActiveTransSet(x1)"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet SuccessorStates(x1)"); 
  faudes_dict_insert_entry("Generator","Reachability","IndexSet SuccessorStates(x1,ev)"); 
  faudes_dict_insert_entry("Generator","Reachabilits","idx SuccessorState(x1,ev)"); 
  faudes_dict_insert_topic("System","System methods (inherits Generator)"); 
  faudes_dict_insert_entry("System","Constructors","System System()"); 
  faudes_dict_insert_entry("System","Constructors","System System(sys)"); 
  faudes_dict_insert_entry("System","Constructors","System System(gen)"); 
  faudes_dict_insert_entry("System","Constructors","System System(filename)"); 
  faudes_dict_insert_entry("System","Constructors","System Copy()"); 
  faudes_dict_insert_entry("System","Controllable events","bool Controllable(idx)"); 
  faudes_dict_insert_entry("System","Controllable events","bool Controllable(name)"); 
  faudes_dict_insert_entry("System","Controllable events"," InsControllableEvent(idx)"); 
  faudes_dict_insert_entry("System","Controllable events","idx InsControllableEvent(name)"); 
  faudes_dict_insert_entry("System","Controllable events"," InsUncontrollableEvent(idx)"); 
  faudes_dict_insert_entry("System","Controllable events","idx InsUncontrollableEvent(name)"); 
  faudes_dict_insert_entry("System","Controllable events"," SetControllable(idx)"); 
  faudes_dict_insert_entry("System","Controllable events"," SetControllable(name)"); 
  faudes_dict_insert_entry("System","Controllable events"," SetControllable(evenset)"); 
  faudes_dict_insert_entry("System","Controllable events"," ClrControllable(idx)"); 
  faudes_dict_insert_entry("System","Controllable events"," ClrControllable(name)"); 
  faudes_dict_insert_entry("System","Controllable events"," ClrControllable(evenset)"); 
  faudes_dict_insert_entry("System","Controllable events","eventset ControllableEvents()"); 
  faudes_dict_insert_entry("System","Controllable events","eventset UncontrollableEvents()"); 
  faudes_dict_insert_entry("System","Observable events","bool Observable(idx)"); 
  faudes_dict_insert_entry("System","Observable events","bool Observable(name)"); 
  faudes_dict_insert_entry("System","Observable events"," InsObservableEvent(idx)"); 
  faudes_dict_insert_entry("System","Observable events","idx InsObservableEvent(name)"); 
  faudes_dict_insert_entry("System","Observable events"," InsUncontrollableEvent(idx)"); 
  faudes_dict_insert_entry("System","Observable events","idx InsUncontrollableEvent(name)"); 
  faudes_dict_insert_entry("System","Observable events"," SetObservable(idx)"); 
  faudes_dict_insert_entry("System","Observable events"," SetObservable(name)"); 
  faudes_dict_insert_entry("System","Observable events"," SetObservable(evenset)"); 
  faudes_dict_insert_entry("System","Observable events"," ClrObservable(idx)"); 
  faudes_dict_insert_entry("System","Observable events"," ClrObservable(name)"); 
  faudes_dict_insert_entry("System","Observable events"," ClrObservable(evenset)"); 
  faudes_dict_insert_entry("System","Observable events","eventset ObservableEvents()"); 
  faudes_dict_insert_entry("System","Observable events","eventset UnobservableEvents()"); 
  faudes_dict_insert_entry("System","Forcible events","bool Forcible(idx)"); 
  faudes_dict_insert_entry("System","Forcible events","bool Forcible(name)"); 
  faudes_dict_insert_entry("System","Forcible events"," InsForcibleEvent(idx)"); 
  faudes_dict_insert_entry("System","Forcible events","idx InsForcibleEvent(name)"); 
  faudes_dict_insert_entry("System","Forcible events"," InsUncontrollableEvent(idx)"); 
  faudes_dict_insert_entry("System","Forcible events","idx InsUncontrollableEvent(name)"); 
  faudes_dict_insert_entry("System","Forcible events"," SetForcible(idx)"); 
  faudes_dict_insert_entry("System","Forcible events"," SetForcible(name)"); 
  faudes_dict_insert_entry("System","Forcible events"," SetForcible(evenset)"); 
  faudes_dict_insert_entry("System","Forcible events"," ClrForcible(idx)"); 
  faudes_dict_insert_entry("System","Forcible events"," ClrForcible(name)"); 
  faudes_dict_insert_entry("System","Forcible events"," ClrForcible(evenset)"); 
  faudes_dict_insert_entry("System","Forcible events","eventset ForcibleEvents()"); 
  faudes_dict_insert_entry("System","Forcible events","eventset UnforcibleEvents()"); 
  faudes_dict_insert_entry("System","Abstraction events","bool Highlevel(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events","bool Highlevel(name)"); 
  faudes_dict_insert_entry("System","Abstraction events","bool Lowlevel(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events","bool Lowlevel(name)"); 
  faudes_dict_insert_entry("System","Abstraction events"," InsHighlevelEvent(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events","idx InsLowlevelEvent(name)"); 
  faudes_dict_insert_entry("System","Abstraction events"," InsLowlevelEvent(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events","idx InsLowlevelEvent(name)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetHighlevel(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetHighlevel(name)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetHighlevel(evenset)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetLowlevel(idx)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetLowlevel(name)"); 
  faudes_dict_insert_entry("System","Abstraction events"," SetLowlevel(evenset)"); 
  faudes_dict_insert_entry("System","Abstraction events","eventset HighlevelEvents()"); 
  faudes_dict_insert_entry("System","Abstraction events","eventset LowlevelEvents()"); 
  faudes_dict_insert_topic("Vectors","Vector data types"); 
  faudes_dict_insert_entry("Vectors","Constructors"," GeneratorVector()"); 
  faudes_dict_insert_entry("Vectors","Constructors"," SystemVector()"); 
  faudes_dict_insert_entry("Vectors","Constructors"," EventSetVector()"); 
  faudes_dict_insert_entry("Vectors","Maintenance","string Name()"); 
  faudes_dict_insert_entry("Vectors","Maintenance"," Name(string)"); 
  faudes_dict_insert_entry("Vectors","Maintenance"," Clear()"); 
  faudes_dict_insert_entry("Vectors","Maintenance","int Size()"); 
  faudes_dict_insert_entry("Vectors","Maintenance"," Size(int)"); 
  faudes_dict_insert_entry("Vectors","Maintenance","bool Empty()"); 
  faudes_dict_insert_entry("Vectors","Element access","elem At(pos)"); 
  faudes_dict_insert_entry("Vectors","Element access"," Insert(pos,elem)"); 
  faudes_dict_insert_entry("Vectors","Element access"," Replace(pos,elem)"); 
  faudes_dict_insert_entry("Vectors","Element access"," Append(elem)"); 
  faudes_dict_insert_entry("Vectors","Element access"," PushBack(elem)"); 
  faudes_dict_insert_entry("Vectors","Misc","string FilenameAt(pos)"); 
  faudes_dict_insert_entry("Vectors","Misc"," FilenameAt(pos,string)"); 
  faudes_dict_insert_topic("Functions","Core library functions"); 
  faudes_dict_insert_entry("Functions","regular expressions"," LanguageConcatenateNonDet(+In+ Generator Lm1, +In+ Generator Lm2, +Out+ Generator LRes)"); 
  faudes_dict_insert_entry("Functions","regular expressions"," LanguageUnion(+In+ Generator Lm1, +In+ Generator Lm2, +Out+ Generator LRes)"); 
  faudes_dict_insert_entry("Functions","regular expressions"," LanguageUnionNonDet(+In+ Generator Lm1, +In+ Generator Lm2, +Out+ Generator LRes)"); 
  faudes_dict_insert_entry("Functions","regular expressions"," LanguageIntersection(+In+ Generator Lm1, +In+ Generator Lm2, +Out+ Generator LRes)"); 
  faudes_dict_insert_entry("Functions","regular expressions"," KleeneClosureNonDet(+InOut+ Generator LArg)"); 
  faudes_dict_insert_entry("Functions","event sets"," EventSetUnion(alph1_arg, alph2_arg, alph_res) [depreciated; use AlphabetUnion instead]"); 
  faudes_dict_insert_entry("Functions","event sets"," EventSetIntersection(alph1_arg, alph2_arg, alph_res) [depreciated; use AlphabetIntersection instead]"); 
  faudes_dict_insert_entry("Functions","event sets"," EventSetDifference(alph1_arg, alph2_arg, alph_res) [depreciated; use AlphabetDifference instead]"); 
  faudes_dict_insert_entry("Functions","generator misc"," Version(+In+ Generator G, +In+ String Subscript, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","generator misc"," Version(+In+ Generator G, +In+ String Pattern, +In+ String Replacement, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","generator misc","Boolean ComputeScc(+In+ Generator G, +In+ SccFilter sf, +Out+ StateSet SCC)"); 
  faudes_dict_insert_entry("Functions","generator misc","Boolean ComputeScc(+In+ Generator G, +In+ SccFilter sf, +In+ q0 +Out+ StateSet SCC)"); 
  faudes_dict_insert_entry("Functions","generator misc","Boolean ComputeNextScc(+In+ Generator G, +InOut+ SccFilter sf, +Out+ StateSet SCC)"); 
  faudes_dict_insert_entry("Functions","generator misc","Boolean HasScc(+In+ Generator G, +In+ SccFilter sf)"); 
  faudes_dict_insert_entry("Functions","language misc"," ProjectNonDet(+InOut+ Generator LArg, +In+ EventSet Sigma0)"); 
  faudes_dict_insert_entry("Functions","language misc"," ProjectNonDetScc(+InOut+ Generator LArg, +In+ EventSet Sigma0)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Accessible(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Accessible(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetDifference(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)"); 
  faudes_dict_insert_entry("EventSet","Functions","Boolean AlphabetEquality(+In+ EventSet Sigma1, +In+ EventSet Sigma2)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetExtract(+In+ Generator Gen, +Out+ EventSet Sigma)"); 
  faudes_dict_insert_entry("EventSet","Functions","Boolean AlphabetInclusion(+In+ EventSet Sigma1, +In+ EventSet Sigma2)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetIntersection(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetIntersection(+In+ EventSetVector AVec, +Out+ EventSet ARes)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetIntersection(+In+ GeneratorVector GVec, +Out+ EventSet ARes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," AlphabetLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetUnion(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetUnion(+In+ EventSetVector AVec, +Out+ EventSet ARes)"); 
  faudes_dict_insert_entry("EventSet","Functions"," AlphabetUnion(+In+ GeneratorVector GVec, +Out+ EventSet ARes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Automaton(+InOut+ Generator GArg)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Automaton(+InOut+ Generator GArg, +In+ EventSet Sigma)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Coaccessible(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Coaccessible(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Complete(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Complete(+In+ Generator G, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Complete(+InOut+ Generator G, +In+ EventSet SigmaO)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Complete(+In+ Generator G, +In+ EventSet SigmaO, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Deterministic(+In+ Generator G, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Language misc"," EmptyLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," EmptyStringLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," FullLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Integer","Elemetary types","Integer IntegerSum(+In+ Integer I_1, +In+ Integer I_2)"); 
  faudes_dict_insert_entry("Integer","Elemetary types","Integer IntegerSum(+In+ IntegerVector IVec)"); 
  faudes_dict_insert_entry("Functions","Language misc"," InvProject(+InOut+ Generator G0, +In+ EventSet Sigma)"); 
  faudes_dict_insert_entry("Functions","Language misc"," InvProject(+In+ Generator G0, +In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsAccessible(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsCoaccessible(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsComplete(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsComplete(+In+ Generator G, +In+ EventSet SigmaO)"); 
  faudes_dict_insert_entry("Functions","Generator misc","Boolean IsDeterministic(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean IsEmptyLanguage(+In+ Generator GArg)"); 
  faudes_dict_insert_entry("Functions","Composition","Boolean IsNonblocking(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Composition","Boolean IsNonblocking(+In+ Generator G1, +In+ Generator G2)"); 
  faudes_dict_insert_entry("Functions","Composition","Boolean IsNonblocking(+In+ GeneratorVector G)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean IsOmegaClosed(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsOmegaTrim(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean IsPrefixClosed(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability","Boolean IsTrim(+In+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," KleeneClosure(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," KleeneClosure(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageComplement(+InOut+ Generator GPar)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageComplement(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageComplement(+In+ Generator GArg, +In+ EventSet Sigma, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageConcatenate(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageDifference(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean LanguageDisjoint(+In+ Generator G1, +In+ Generator G2)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean LanguageEquality(+In+ Generator G1, +In+ Generator G2)"); 
  faudes_dict_insert_entry("Functions","Language misc","Boolean LanguageInclusion(+In+ Generator G1, +In+ Generator G2)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageIntersection(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageIntersection(+In+ GeneratorVector GVec, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageUnion(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Regular expressions"," LanguageUnion(+In+ GeneratorVector GVec, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("",""," MarkAllStates(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Language misc"," OmegaClosure(+InOut+ Generator GArg)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," OmegaParallel(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," OmegaProduct(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Reachability"," OmegaTrim(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," OmegaTrim(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Parallel(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Parallel(+In+ GeneratorVector GVec, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Parallel(+In+ Generator G1, +In+ Generator G2, +Out+ ProductCompositionMap CompMap, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Language misc"," PrefixClosure(+InOut+ Generator GArg)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Product(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," Product(+In+ Generator G1, +In+ Generator G2, +Out+ ProductCompositionMap CompMap, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Language misc"," Project(+In+ Generator G, +In+ EventSet Sigma0, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Language misc"," SelfLoop(+InOut+ Generator G, +In+ EventSet Sigma)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," StateMin(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," StateMin(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Trim(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Reachability"," Trim(+In+ Generator GArg, +Out+ Generator GRes)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," UniqueInit(+InOut+ Generator G)"); 
  faudes_dict_insert_entry("Functions","Generator misc"," UniqueInit(+In+ Generator G, +Out+ Generator GRes)"); 
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

